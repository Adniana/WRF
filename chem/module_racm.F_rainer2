      MODULE module_racm
      USE module_data_racm
      USE module_data_sorgam

      CONTAINS

      subroutine racm_driver(id,ktau,dtstep,config_flags,              &
               gmt,julday,t_phy,moist,p8w,t8w,                         &
               p_phy,chem,rho_phy,dz8w,z,z_at_w,vdrog3,         &
               ph_macr,ph_o31d,ph_o33p,ph_no2,ph_no3o2,ph_no3o,ph_hno2,&
               ph_hno3,ph_hno4,ph_h2o2,ph_ch2or,ph_ch2om,ph_ch3cho,    &
               ph_ch3coch3,ph_ch3coc2h5,ph_hcocho,ph_ch3cocho,         &
               ph_hcochest,ph_ch3o2h,ph_ch3coo2h,ph_ch3ono2,ph_hcochob,&
               addt,addx,addc,etep,oltp,olip,cslp,limp,hc5p,hc8p,tolp, &
               xylp,apip,isop,hc3p,ethp,o3p,tco3,mo2,o1d,olnn,rpho,xo2,&
               ketp,olnd,                                              &
               ids,ide, jds,jde, kds,kde,                              &
               ims,ime, jms,jme, kms,kme,                              &
               its,ite, jts,jte, kts,kte                               )


  USE module_configure
  USE module_state_description
  USE module_model_constants
   IMPLICIT NONE

   INTEGER,      INTENT(IN   ) :: id,julday,                           &
                                  ids,ide, jds,jde, kds,kde,           &
                                  ims,ime, jms,jme, kms,kme,           &
                                  its,ite, jts,jte, kts,kte
   INTEGER,      INTENT(IN   ) ::                                      &
                                  ktau
      REAL,      INTENT(IN   ) ::                                      &
                             dtstep,gmt
!
! advected moisture variables
!
   REAL, DIMENSION( ims:ime, kms:kme, jms:jme, num_moist ),            &
         INTENT(IN ) ::                                   moist
!
!  advected chemical tracers
!
   REAL, DIMENSION( ims:ime, kms:kme, jms:jme, num_chem ),             &
         INTENT(INOUT ) ::                                chem

!
! arrays that hold photolysis rates
!
   REAL, DIMENSION( ims:ime, kms:kme, jms:jme ),                       &
         INTENT(INOUT ) ::                                             &
           ph_macr,ph_o31d,ph_o33p,ph_no2,ph_no3o2,ph_no3o,ph_hno2,    &
           ph_hno3,ph_hno4,ph_h2o2,ph_ch2or,ph_ch2om,ph_ch3cho,        &
           ph_ch3coch3,ph_ch3coc2h5,ph_hcocho,ph_ch3cocho,             &
           ph_hcochest,ph_ch3o2h,ph_ch3coo2h,ph_ch3ono2,ph_hcochob
!
! arrays that hold the radicals
!
   REAL, DIMENSION( ims:ime, kms:kme, jms:jme ),                       &
         INTENT(INOUT ) ::                                             &
               addt,addx,addc,etep,oltp,olip,cslp,limp,hc5p,hc8p,tolp, &
               xylp,apip,isop,hc3p,ethp,o3p,tco3,mo2,o1d,olnn,rpho,xo2,&
               ketp,olnd
!
! on input from met model 
!
   REAL,  DIMENSION( ims:ime , kms:kme , jms:jme )         ,           &
          INTENT(IN   ) ::                                             &
                                                      t_phy,           &
                                                      p_phy,           &
                                                      dz8w,            &
                                                      z    ,           &
                                              t8w,p8w,z_at_w ,         &
                                                    rho_phy
!
! for interaction with aerosols (really is output)
!
      real ,      INTENT(INOUT) ::                                     &
                      vdrog3(ims:ime,kms:kme-0,jms:jme,ldrog)
      TYPE(grid_config_rec_type),  INTENT(IN   )    :: config_flags

! ..
! .. Local Scalars ..
      REAL ::  clwchem,  dt60, dtcmax, dtcmin, xtime
      INTEGER :: i,j,k,iprt, jce, jcs, n, nr, ipr,jpr,nvr
! ..
! .. Local Arrays ..
      REAL :: p(kts:kte-1), rh(kts:kte-1),       &
        t(kts:kte-1), vcinp(nspec),wlc(kts:kte-1),p1,wvap
        REAL*8 :: t_in,t_end, rj(nphot)
      real :: PRDROG(ldrog)
	REAL*8 :: ATOL,rtol,temp
!     real *8 :: saverad(its:ite,kts:kte,jts:jte,50)
      real *8 :: rxylho,rtolho,rcslho,rcslno3,rhc8ho,roliho,rolino3,      &
                 rolio3,roltho,roltno3,rolto3,rapiho,rapino3,rapio3,      &
                 rlimho,rlimno3,rlimo3
!     EXTERNAL arr
!     REAL*8 :: arr

!

      INTEGER :: ixhour,iaerosol_sorgam
      real :: xhour,xmin,xtimin
      real :: const2,tinv,pot,pt2

      xtime=ktau*dtstep/60.
      ixhour=ifix(gmt+.01)+ifix(xtime/60.)
      xhour=float(ixhour)
      xmin=60.*gmt+(xtime-xhour*60.)
      ipr=-10
      jpr=-10
      nvr=5
      RTOL = 1.0d-5	
      ATOL=1.0d-1*RTOL
      stepmin=0.0001
      stepmax=3600.
      ISNOTAUTONOM=1
      STEPSTART=STEPMIN
	
!
! following is for combination racm/sorgam only, p_nu0 must be defined
! in that case
!
      iaerosol_sorgam=0
      if(p_nu0.gt.1)iaerosol_sorgam=1

!
      chem=max(chem,epsilc_racm)
      do 100 j=jts,jte

      do 100 i=its,ite
      vcinp=epsilc_racm
      iprt=0
      dt60 = dtstep/60.
      xtimin = max(0.,xtime-dt60)

      dtcmin = min(.05,xtime-xtimin)
      dtcmax = min(5.,dt60)
      dtcmax = min(dtcmax,xtime-xtimin)
      t_in=0.
      t_end=t_in+dble(dt60*60.)

! reorder                                                                                        
!                                                                                                
      do k=kts,kte-1                                       


        var(I_so2)  =  max(chem(i,k,j,p_so2),epsilc_racm)
        var(I_sulf) =  max(chem(i,k,j,p_sulf),epsilc_racm)
        var(I_no2)  =  max(chem(i,k,j,p_no2),epsilc_racm)
        var(I_no)   =  max(chem(i,k,j,p_no),epsilc_racm)
        var(I_o3)   =  max(chem(i,k,j,p_o3),epsilc_racm)
        var(I_hno3) =  max(chem(i,k,j,p_hno3),epsilc_racm)
        var(I_h2o2) =  max(chem(i,k,j,p_h2o2),epsilc_racm)
        var(I_ald)  =  max(chem(i,k,j,p_ald),epsilc_racm)
        var(I_hcho) =  max(chem(i,k,j,p_hcho),epsilc_racm)
        var(I_op1)  =  max(chem(i,k,j,p_op1),epsilc_racm)
        var(I_op2)  =  max(chem(i,k,j,p_op2),epsilc_racm)
        var(I_paa)  =  max(chem(i,k,j,p_paa),epsilc_racm)
        var(I_ora1)  = max(chem(i,k,j,p_ora1),epsilc_racm)
        var(I_ora2)  = max(chem(i,k,j,p_ora2),epsilc_racm)
!        var(I_nh3)  =  max(chem(i,k,j,p_nh3),epsilc_racm) 
        var(I_n2o5)  = max(chem(i,k,j,p_n2o5),epsilc_racm)
        var(I_no3)  =  max(chem(i,k,j,p_no3),epsilc_racm) 
        var(I_pan)  =  max(chem(i,k,j,p_pan),epsilc_racm)

        var(I_hc3)  =  max(chem(i,k,j,p_hc3),epsilc_racm)
        var(I_hc5)  =  max(chem(i,k,j,p_hc5),epsilc_racm)
        var(I_hc8)  =  max(chem(i,k,j,p_hc8),epsilc_racm)
        var(I_eth)  =  max(chem(i,k,j,p_eth),epsilc_racm)
        var(I_co)  =  max(chem(i,k,j,p_co),epsilc_racm)  

        var(I_ETE)  =  max(chem(i,k,j,p_ETE),epsilc_racm)
        var(I_olt)  =  max(chem(i,k,j,p_olt),epsilc_racm)
        var(I_oli)  =  max(chem(i,k,j,p_oli),epsilc_racm)
        var(I_tol)  =  max(chem(i,k,j,p_tol),epsilc_racm)
        var(I_aco3)  =  max(chem(i,k,j,p_aco3),epsilc_racm)
        var(I_tpan)  =  max(chem(i,k,j,p_tpan),epsilc_racm)
        var(I_hono)  =  max(chem(i,k,j,p_hono),epsilc_racm)
        var(I_hno4)  =  max(chem(i,k,j,p_hno4),epsilc_racm)
        var(I_ket)  =  max(chem(i,k,j,p_ket),epsilc_racm)
        var(I_gly)  =  max(chem(i,k,j,p_gly),epsilc_racm)
        var(I_mgly)  =  max(chem(i,k,j,p_mgly),epsilc_racm)
        var(I_dcb)  =  max(chem(i,k,j,p_dcb),epsilc_racm)
        var(I_onit)  =  max(chem(i,k,j,p_onit),epsilc_racm)
        var(I_csl)  =  max(chem(i,k,j,p_csl),epsilc_racm)
        var(I_xyl)  =  max(chem(i,k,j,p_xyl),epsilc_racm)
        var(I_iso)  =  max(chem(i,k,j,p_iso),epsilc_racm)
        var(Lho)  =  max(chem(i,k,j,p_ho),epsilc_racm)
        var(Lho2)  =  max(chem(i,k,j,p_ho2),epsilc_racm)
        var(I_CO2)  =  max(chem(i,k,j,p_CO2),epsilc_racm)
        var(I_UDD)  =  max(chem(i,k,j,p_UDD),epsilc_racm)
        var(I_API)  =  max(chem(i,k,j,p_API),epsilc_racm)
        var(I_CH4)  =  max(chem(i,k,j,p_CH4),epsilc_racm)
        var(I_DIEN)  =  max(chem(i,k,j,p_DIEN),epsilc_racm)
        var(I_HKET)  =  max(chem(i,k,j,p_HKET),epsilc_racm)
        var(I_LIM)  =  max(chem(i,k,j,p_LIM),epsilc_racm)
        var(I_MACR)  =  max(chem(i,k,j,p_MACR),epsilc_racm)

! radicals


        var(I_ADDC)  =  max(addc(i,k,j),epsilc_racm)
        var(I_ADDT)  =  max(addt(i,k,j),epsilc_racm)
        var(I_ADDX)  =  max(addx(i,k,j),epsilc_racm)
        var(I_APIP)  =  max(apip(i,k,j),epsilc_racm)
        var(I_CSLP)  =  max(cslp(i,k,j),epsilc_racm)
        var(I_ETEP)  =  max(etep(i,k,j),epsilc_racm)
        var(I_ETHP)  =  max(ethp(i,k,j),epsilc_racm)
        var(I_HC3P)  =  max(hc3p(i,k,j),epsilc_racm)
        var(I_HC5P)  =  max(hc5p(i,k,j),epsilc_racm)
        var(I_HC8P)  =  max(hc8p(i,k,j),epsilc_racm)
        var(I_ISOP)  =  max(isop(i,k,j),epsilc_racm)
        var(I_KETP)  =  max(ketp(i,k,j),epsilc_racm)
        var(I_LIMP)  =  max(limp(i,k,j),epsilc_racm)
        var(I_MO2)  =   max(mo2(i,k,j),epsilc_racm)
        var(I_O1D)  =   max(o1d(i,k,j),epsilc_racm)
        var(I_O3P)  =   max(o3p(i,k,j),epsilc_racm)
        var(I_OLIP)  =  max(olip(i,k,j),epsilc_racm)
        var(I_OLND)  =  max(olnd(i,k,j),epsilc_racm)
        var(I_OLNN)  =  max(olnn(i,k,j),epsilc_racm)
        var(I_OLTP)  =  max(oltp(i,k,j),epsilc_racm)
        var(I_PHO)  =  max(rpho(i,k,j),epsilc_racm)
        var(I_TCO3)  =  max(tco3(i,k,j),epsilc_racm)
        var(I_TOLP)  =  max(tolp(i,k,j),epsilc_racm)
        var(I_XO2)  =   max(xo2(i,k,j),epsilc_racm)
        var(I_XYLP)  =  max(xylp(i,k,j),epsilc_racm)

!
! racm here is called in a box
! fill photolysis rates for use in radm module
!
        rj(1) = ph_no2(i,k,j)
        rj(2) = ph_o31d(i,k,j)
        rj(3) = ph_o33p(i,k,j)
        rj(4) = ph_hno2(i,k,j)
        rj(5) = ph_hno3(i,k,j)
        rj(6) = ph_hno4(i,k,j)
        rj(7) = ph_no3o2(i,k,j)
        rj(8) = ph_no3o(i,k,j)
        rj(9) = ph_h2o2(i,k,j)
        rj(10) = ph_ch2om(i,k,j)
        rj(11) = ph_ch2or(i,k,j)
        rj(12) = ph_ch3cho(i,k,j)
        rj(13) = ph_ch3o2h(i,k,j)
        rj(14) = ph_ch3coch3(i,k,j)
        rj(15) = ph_ch3coo2h(i,k,j)
        rj(16) = ph_ch3coc2h5(i,k,j)
        rj(17) = ph_hcocho(i,k,j)
        rj(18) = ph_hcochob(i,k,j)
        rj(19) = ph_ch3cocho(i,k,j)
        rj(20) = ph_hcochest(i,k,j)
        rj(21) = ph_ch3ono2(i,k,j)
        rj(22) = ph_macr(i,k,j)
        rj(23) = ph_ch3coc2h5(i,k,j)
!--- now do chemistry, need some input here

        TEMP = dble(t_phy(i,k,j))
        PRES = dble(.001*p_phy(i,k,j))
        rh(k) = .95
        rh(k) = MIN( .95, moist(i,k,j,p_qv) / &
        (3.80*exp(17.27*(t_phy(i,k,j)-273.)/ &
        (t_phy(i,k,j)-36.))/(.01*p_phy(i,k,j))))
        rh(k)=max(.1,rh(k))
        p1=rh(k)*6.107*exp(17.1536*(t(k)-273.15) &
         /(t(k)-38.33))
        wvap=p1/(p(k))

!        wlc(k) = moist(i,k,j,p_qc)
        wlc(k) = 0.
!         fixed species in ppm
         fix(I_H2O)=dble(wvap*1e6)
         fix(I_O2)=0.209 *1d6
         fix(I_H2)=0.5e-6 *1d6
         fix(I_N2)=0.781 *1d6
         rad(1)=99999.

        CALL integrate(t_in,t_end,rj,temp,rtol,atol)
        if(p_nu0.gt.1)then
            CONST2=4.4E17
            TINV= 1./t_phy(i,k,j)
            POT= p_phy(i,k,j)*TINV/1.013 
            PT2= CONST2*POT/60.0
            rxylho = ((PT2*ARR(7.30d-12,-355.0,TEMP)))
            rtolho = ((PT2*ARR(1.81d-12,-355.0,TEMP)))
            rcslho = ((PT2*ARR(6.00d-11,0.0,TEMP)))
            rcslno3 = ((PT2*ARR(2.20d-11,0.0,TEMP)))
            rhc8ho = ((PT2*ARR(1.64d-11,125.0,TEMP)))
            roliho = ((PT2*ARR(1.33d-11,-500.0,TEMP)))
            rolino3 = ((PT2*ARR(8.64d-13,-450.0,TEMP)))
            rolio3 = ((PT2*ARR(4.40d-15,845.0,TEMP)))
            roltho = ((PT2*ARR(5.72d-12,-500.0,TEMP)))
            roltno3 = ((PT2*ARR(1.79d-13,450.0,TEMP)))
            rolto3 = ((PT2*ARR(4.33d-15,1800.0,TEMP)))
            rapiho = ((PT2*ARR(1.21d-11,-444.0,TEMP)))
            rapino3 = ((PT2*ARR(1.19d-12,-490.0,TEMP)))
            rapio3 = ((PT2*ARR(1.01d-15,736.0,TEMP)))
            rlimho = ((PT2*ARR(1.71d-10,0.0,TEMP)))
            rlimno3 = ((PT2*ARR(1.22d-11,0.0,TEMP)))
            rlimo3 = ((PT2*ARR(2.00d-16,0.0,TEMP)))
            PRDROG(PXYL)  = rxylho * var(i_xyl)*var(i_ho)
            PRDROG(PTOL)  = rtolho * var(i_tol)*var(i_ho)
            PRDROG(PCSL1) = rcslho * var(i_csl)*var(i_ho)
            PRDROG(PCSL2) = 0.50 * rcslno3* var(i_csl)*var(i_no3)
            PRDROG(PHC8)  = rhc8ho * var(i_hc8)*var(i_ho)
            PRDROG(POLI1) = roliho * var(i_oli)*var(i_ho)
            PRDROG(POLI2) = rolino3 * var(i_oli)*var(i_no3)
            PRDROG(POLI3) = rolio3 * var(i_oli)*var(i_o3)
            PRDROG(POLT1) = roltho * var(i_olt)*var(i_ho)
            PRDROG(POLT2) = roltno3 * var(i_olt)*var(i_no3)
            PRDROG(POLT3) = rolto3 * var(i_olt)*var(i_o3)
            PRDROG(PAPI1) = rapiho * var(i_api)*var(i_ho)
            PRDROG(PAPI2) = rapino3 * var(i_api)*var(i_no3)
            PRDROG(PAPI3) = rapio3 * var(i_api)*var(i_o3)
            PRDROG(PLIM1) = rlimho * var(i_lim)*var(i_ho)
            PRDROG(PLIM2) = rlimno3 * var(i_lim)*var(i_no3)
            PRDROG(PLIM3) = rlimo3 * var(i_lim)*var(i_o3)
            DO n = 1, LDROG
               VDROG3( i,k,j, n ) =  PRDROG( n ) * DTSTEP
               VDROG3( i,k,j,n  ) = MAX( 0., VDROG3( i,k,j, n ) )
            ENDDO
        endif

        chem(i,k,j,p_so2)     = max(real(var(I_so2)),epsilc_racm)
        chem(i,k,j,p_sulf)     = max(real(var(I_sulf)),epsilc_racm)
        chem(i,k,j,p_no2)     = max(real(var(I_no2)),epsilc_racm)
        chem(i,k,j,p_no)     = max(real(var(I_no)),epsilc_racm)
        chem(i,k,j,p_o3)     = max(real(var(I_o3)),epsilc_racm)
        chem(i,k,j,p_hno3)     = max(real(var(I_hno3)),epsilc_racm)
        chem(i,k,j,p_h2o2)     = max(real(var(I_h2o2)),epsilc_racm)
        chem(i,k,j,p_ald)     = max(real(var(I_ald)),epsilc_racm)
        chem(i,k,j,p_hcho)     = max(real(var(I_hcho)),epsilc_racm)
        chem(i,k,j,p_op1)     = max(real(var(I_op1)),epsilc_racm)
        chem(i,k,j,p_op2)     = max(real(var(I_op2)),epsilc_racm)
        chem(i,k,j,p_paa)     = max(real(var(I_paa)),epsilc_racm)
        chem(i,k,j,p_ora1)     = max(real(var(I_ora1)),epsilc_racm)
        chem(i,k,j,p_ora2)     = max(real(var(I_ora2)),epsilc_racm)
!        chem(i,k,j,p_nh3)     = max(real(var(I_nh3)),epsilc_racm)
        chem(i,k,j,p_n2o5)     = max(real(var(I_n2o5)),epsilc_racm)
        chem(i,k,j,p_no3)     = max(real(var(I_no3)),epsilc_racm)
        chem(i,k,j,p_pan)     = max(real(var(I_pan)),epsilc_racm)
        chem(i,k,j,p_hc3)     = max(real(var(I_hc3)),epsilc_racm)
        chem(i,k,j,p_hc5)     = max(real(var(I_hc5)),epsilc_racm)
        chem(i,k,j,p_hc8)     = max(real(var(I_hc8)),epsilc_racm)
        chem(i,k,j,p_eth)     = max(real(var(I_eth)),epsilc_racm)
        chem(i,k,j,p_co)     = max(real(var(I_co)),epsilc_racm)
        chem(i,k,j,p_ETE)     = max(real(var(I_ETE)),epsilc_racm)
        chem(i,k,j,p_olt)     = max(real(var(I_olt)),epsilc_racm)
        chem(i,k,j,p_oli)     = max(real(var(I_oli)),epsilc_racm)
        chem(i,k,j,p_tol)     = max(real(var(I_tol)),epsilc_racm)
        chem(i,k,j,p_xyl)     = max(real(var(I_xyl)),epsilc_racm)
        chem(i,k,j,p_aco3)     = max(real(var(I_aco3)),epsilc_racm)
        chem(i,k,j,p_tpan)     = max(real(var(I_tpan)),epsilc_racm)
        chem(i,k,j,p_hono)     = max(real(var(I_hono)),epsilc_racm)
        chem(i,k,j,p_hno4)     = max(real(var(I_hno4)),epsilc_racm)
        chem(i,k,j,p_ket)     = max(real(var(I_ket)),epsilc_racm)
        chem(i,k,j,p_gly)     = max(real(var(I_gly)),epsilc_racm)
        chem(i,k,j,p_mgly)     = max(real(var(I_mgly)),epsilc_racm)
        chem(i,k,j,p_dcb)     = max(real(var(I_dcb)),epsilc_racm)
        chem(i,k,j,p_onit)     = max(real(var(I_onit)),epsilc_racm)
        chem(i,k,j,p_csl)     = max(real(var(I_csl)),epsilc_racm)
        chem(i,k,j,p_iso)     = max(real(var(I_iso)),epsilc_racm)
        chem(i,k,j,p_ho)     = max(real(var(I_ho)),epsilc_racm)
        chem(i,k,j,p_ho2)     = max(real(var(I_ho2)),epsilc_racm)



        chem(i,k,j,p_CO2)        = max(real(var(I_CO2)),epsilc_racm)
        chem(i,k,j,p_UDD)        = max(real(var(I_UDD)),epsilc_racm)
        chem(i,k,j,p_API)        = max(real(var(I_API)),epsilc_racm) 
        chem(i,k,j,p_CH4)        = max(real(var(I_CH4)),epsilc_racm) 
        chem(i,k,j,p_DIEN)       = max(real(var(I_DIEN)),epsilc_racm)
        chem(i,k,j,p_HKET)       = max(real(var(I_HKET)),epsilc_racm)
        chem(i,k,j,p_LIM)        = max(real(var(I_LIM)),epsilc_racm) 
        chem(i,k,j,p_MACR)       = max(real(var(I_MACR)),epsilc_racm)

! radicals                                         


        addc(i,k,j)  = max(real(var(I_ADDC)),epsilc_racm)
        addt(i,k,j)  = max(real(var(I_ADDT)),epsilc_racm)
        addx(i,k,j)  = max(real(var(I_ADDX)),epsilc_racm)
        apip(i,k,j)  = max(real(var(I_APIP)),epsilc_racm)
        cslp(i,k,j)  = max(real(var(I_CSLP)),epsilc_racm)
        etep(i,k,j)  = max(real(var(I_ETEP)),epsilc_racm)
        ethp(i,k,j)  = max(real(var(I_ETHP)),epsilc_racm)
        hc3p(i,k,j)  = max(real(var(I_HC3P)),epsilc_racm)
        hc5p(i,k,j)  = max(real(var(I_HC5P)),epsilc_racm)
        hc8p(i,k,j)  = max(real(var(I_HC8P)),epsilc_racm)
        isop(i,k,j)  = max(real(var(I_ISOP)),epsilc_racm)
        ketp(i,k,j)  = max(real(var(I_KETP)),epsilc_racm)
        limp(i,k,j)  = max(real(var(I_LIMP)),epsilc_racm)
        mo2(i,k,j)    = max(real(var(I_MO2)),epsilc_racm) 
        o1d(i,k,j)    = max(real(var(I_O1D)),epsilc_racm) 
        o3p(i,k,j)    = max(real(var(I_O3P)),epsilc_racm) 
        olip(i,k,j)  = max(real(var(I_OLIP)),epsilc_racm)
        olnd(i,k,j)  = max(real(var(I_OLND)),epsilc_racm)
        olnn(i,k,j)  = max(real(var(I_OLNN)),epsilc_racm)
        oltp(i,k,j)  = max(real(var(I_OLTP)),epsilc_racm)
        rpho(i,k,j)   = max(real(var(I_PHO)),epsilc_racm) 
        tco3(i,k,j)  = max(real(var(I_TCO3)),epsilc_racm)
        tolp(i,k,j)  = max(real(var(I_TOLP)),epsilc_racm)
        xo2(i,k,j)    = max(real(var(I_XO2)),epsilc_racm)
        xylp(i,k,j)  = max(real(var(I_XYLP)),epsilc_racm)




      ENDDO
100   continue
END SUBROUTINE racm_driver
! ****************************************************************

! INTEGRATE - Integrator routine
!   Arguments :
!      TIN       - Start Time for Integration
!      TOUT      - End Time for Integration

! ****************************************************************

    SUBROUTINE integrate(tin,tout,rj,temp,rtol,atol)

!     IMPLICIT NONE
!     INCLUDE '/users/grell/from_rainer/module_data_racm.f77'


! TIN - Start Time
      REAL*8 tin
! TOUT - End Time
      REAL*8 tout
      REAL*8 rconst(nreact)
      REAL*8 rj(nphot),temp
      INTEGER km, km2
      INTEGER nrdens, lwork, liwork
      INTEGER itol, ijac, mljac, mujac, imas, iout, idfx, idid

      PARAMETER (km=12,km2=2+km*(km+3)/2,nrdens=nvar)
      PARAMETER (lwork=2*nvar*nvar+(km+8)*nvar+4*km+20+km2*nrdens)
      PARAMETER (liwork=2*nvar+km+20+nrdens)

      REAL*8 work(lwork)
	REAL*8 :: ATOL,rtol
      INTEGER iwork(liwork)


      itol = 1
      ijac = 1
      mljac = nvar
      mujac = nvar
      imas = 0
      iout = 0
      idfx = 0

      DO i = 1, 20
        iwork(i) = 0
        work(i) = 0.D0

      END DO

      CALL atmseulex(nvar,isnotautonom,tin,var,tout,stepstart,rtol,atol,itol, &
        ijac,mljac,mujac,imas,mljac,mujac,work,lwork,iwork,liwork,idid,rj,temp)

      IF (idid<0) THEN
        PRINT *, 'ATMSEULEX: Unsucessfull exit at T=', tin, ' (IDID=', idid, &
          ')'
      END IF

      RETURN
    END SUBROUTINE integrate


    SUBROUTINE atmseulex(n,ifcn,x,y,xend,h,reltol,abstol,itol,ijac,mljac, &
        mujac,imas,mlmas,mumas,work,lwork,iwork,liwork,idid,rj,temp)
! ----------------------------------------------------------
!     NUMERICAL SOLUTION OF A STIFF (OR DIFFERENTIAL ALGEBRAIC)
!     SYSTEM OF FIRST 0RDER ORDINARY DIFFERENTIAL EQUATIONS  MY'=F(X,Y).
!     THIS IS AN EXTRAPOLATION-ALGORITHM, BASED ON THE
!     LINEARLY IMPLICIT EULER METHOD (WITH STEP SIZE CONTROL
!     AND ORDER SELECTION).

!     AUTHORS: E. HAIRER AND G. WANNER
!              UNIVERSITE DE GENEVE, DEPT. DE MATHEMATIQUES
!              CH-1211 GENEVE 24, SWITZERLAND
!              E-MAIL:  HAIRER@DIVSUN.UNIGE.CH,  WANNER@DIVSUN.UNIGE.CH
!              INCLUSION OF DENSE OUTPUT BY E. HAIRER AND A. OSTERMANN

!     THIS CODE IS PART OF THE BOOK:
!         E. HAIRER AND G. WANNER, SOLVING ORDINARY DIFFERENTIAL
!         EQUATIONS II. STIFF AND DIFFERENTIAL-ALGEBRAIC PROBLEMS.
!         SPRINGER SERIES IN COMPUTATIONAL MATHEMATICS 14,
!         SPRINGER-VERLAG (1991)

!     VERSION OF SEPTEMBER 30, 1995

!     INPUT PARAMETERS
!     ----------------
!     N           DIMENSION OF THE SYSTEM

!     FCN         NAME (EXTERNAL) OF SUBROUTINE COMPUTING THE
!                 VALUE OF F(X,Y):
!                    SUBROUTINE FCN(N,X,Y,F)
!                    REAL*8 X,Y(N),F(N)
!                    F(1)=...   ETC.
!                 RPAR, IPAR (SEE BELOW)

!     IFCN        GIVES INFORMATION ON FCN:
!                    IFCN=0: F(X,Y) INDEPENDENT OF X (AUTONOMOUS)
!                    IFCN=1: F(X,Y) MAY DEPEND ON X (NON-AUTONOMOUS)

!     X           INITIAL X-VALUE

!     Y(N)        INITIAL VALUES FOR Y

!     XEND        FINAL X-VALUE (XEND-X MAY BE POSITIVE OR NEGATIVE)

!     H           INITIAL STEP SIZE GUESS;
!                 FOR STIFF EQUATIONS WITH INITIAL TRANSIENT,
!                 H=1.D0/(NORM OF F'), USUALLY 1.D-2 OR 1.D-3, IS GOOD.
!                 THIS CHOICE IS NOT VERY IMPORTANT, THE CODE QUICKLY
!                 ADAPTS ITS STEP SIZE (IF H=0.D0, THE CODE PUTS H=1.D-6

!     RelTol,AbsTol   RELATIVE AND ABSOLUTE ERROR TOLERANCES. THEY
!                 CAN BE BOTH SCALARS OR ELSE BOTH VECTORS OF LENGTH N.

!     ITOL        SWITCH FOR RelTol AND AbsTol:
!                   ITOL=0: BOTH RelTol AND AbsTol ARE SCALARS.
!                     THE CODE KEEPS, ROUGHLY, THE LOCAL ERROR OF
!                     Y(I) BELOW RelTol*ABS(Y(I))+AbsTol
!                   ITOL=1: BOTH RelTol AND AbsTol ARE VECTORS.
!                     THE CODE KEEPS THE LOCAL ERROR OF Y(I) BELOW
!                     RelTol(I)*ABS(Y(I))+AbsTol(I).

!     JAC         NAME (EXTERNAL) OF THE SUBROUTINE WHICH COMPUTES
!                 THE PARTIAL DERIVATIVES OF F(X,Y) WITH RESPECT TO Y
!                 (THIS ROUTINE IS ONLY CALLED IF IJAC=1; SUPPLY
!                 A DUMMY SUBROUTINE IN THE CASE IJAC=0).
!                 FOR IJAC=1, THIS SUBROUTINE MUST HAVE THE FORM
!                    SUBROUTINE JAC(N,X,Y,DFY,LDFY)
!                    REAL*8 X,Y(N),DFY(LDFY,N)
!                    DFY(1,1)= ...
!                 LDFY, THE COLOMN-LENGTH OF THE ARRAY, IS
!                 FURNISHED BY THE CALLING PROGRAM.
!                 IF (MLJAC.EQ.N) THE JACOBIAN IS SUPPOSED TO
!                    BE FULL AND THE PARTIAL DERIVATIVES ARE
!                    STORED IN DFY AS
!                       DFY(I,J) = PARTIAL F(I) / PARTIAL Y(J)
!                 ELSE, THE JACOBIAN IS TAKEN AS BANDED AND
!                    THE PARTIAL DERIVATIVES ARE STORED
!                    DIAGONAL-WISE AS
!                       DFY(I-J+MUJAC+1,J) = PARTIAL F(I) / PARTIAL Y(J)

!     IJAC        SWITCH FOR THE COMPUTATION OF THE JACOBIAN:
!                    IJAC=0: JACOBIAN IS COMPUTED INTERNALLY BY FINITE
!                       DIFFERENCES, SUBROUTINE "JAC" IS NEVER CALLED.
!                    IJAC=1: JACOBIAN IS SUPPLIED BY SUBROUTINE JAC.

!     MLJAC       SWITCH FOR THE BANDED STRUCTURE OF THE JACOBIAN:
!                    MLJAC=N: JACOBIAN IS A FULL MATRIX. THE LINEAR
!                       ALGEBRA IS DONE BY FULL-MATRIX GAUSS-ELIMINATION
!                    0<=MLJAC<N: MLJAC IS THE LOWER BANDWITH OF JACOBIAN
!                       MATRIX (>= NUMBER OF NON-ZERO DIAGONALS BELOW
!                       THE MAIN DIAGONAL).

!     MUJAC       UPPER BANDWITH OF JACOBIAN  MATRIX (>= NUMBER OF NON-
!                 ZERO DIAGONALS ABOVE THE MAIN DIAGONAL).
!                 NEED NOT BE DEFINED IF MLJAC=N.

!     ----   MAS,IMAS,MLMAS, AND MUMAS HAVE ANALOG MEANINGS      -----
!     ----   FOR THE "MASS MATRIX" (THE MATRIX "M" OF SECTION IV.8): -

!     MAS         NAME (EXTERNAL) OF SUBROUTINE COMPUTING THE MASS-
!                 MATRIX M.
!                 IF IMAS=0, THIS MATRIX IS ASSUMED TO BE THE IDENTITY
!                 MATRIX AND NEEDS NOT TO BE DEFINED;
!                 SUPPLY A DUMMY SUBROUTINE IN THIS CASE.

!                 IF IMAS=1, THE SUBROUTINE MAS IS OF THE FORM
!                    SUBROUTINE MAS(N,AM,LMAS)
!                    REAL*8 AM(LMAS,N)
!                    AM(1,1)= ....
!                    IF (MLMAS.EQ.N) THE MASS-MATRIX IS STORED
!                    AS FULL MATRIX LIKE
!                         AM(I,J) = M(I,J)
!                    ELSE, THE MATRIX IS TAKEN AS BANDED AND STORED
!                    DIAGONAL-WISE AS
!                         AM(I-J+MUMAS+1,J) = M(I,J).

!     IMAS       GIVES INFORMATION ON THE MASS-MATRIX:
!                    IMAS=0: M IS SUPPOSED TO BE THE IDENTITY
!                       MATRIX, MAS IS NEVER CALLED.
!                    IMAS=1: MASS-MATRIX  IS SUPPLIED.

!     MLMAS       SWITCH FOR THE BANDED STRUCTURE OF THE MASS-MATRIX:
!                    MLMAS=N: THE FULL MATRIX CASE. THE LINEAR
!                       ALGEBRA IS DONE BY FULL-MATRIX GAUSS-ELIMINATION
!                    0<=MLMAS<N: MLMAS IS THE LOWER BANDWITH OF THE
!                       MATRIX (>= NUMBER OF NON-ZERO DIAGONALS BELOW
!                       THE MAIN DIAGONAL).
!                 MLMAS IS SUPPOSED TO BE .LE. MLJAC.

!     MUMAS       UPPER BANDWITH OF MASS-MATRIX (>= NUMBER OF NON-
!                 ZERO DIAGONALS ABOVE THE MAIN DIAGONAL).
!                 NEED NOT BE DEFINED IF MLMAS=N.
!                 MUMAS IS SUPPOSED TO BE .LE. MUJAC.

!     SOLOUT      NAME (EXTERNAL) OF SUBROUTINE PROVIDING THE
!                 NUMERICAL SOLUTION DURING INTEGRATION.
!                 IF IOUT>=1, IT IS CALLED AFTER EVERY SUCCESSFUL STEP.
!                 SUPPLY A DUMMY SUBROUTINE IF IOUT=0.
!                 IT MUST HAVE THE FORM
!                    SUBROUTINE SOLOUT (NR,XOLD,X,Y,RC,LRC,IC,LIC,N,
!                                       RPAR,IPAR,IRTRN)
!                    REAL*8 X,Y(N),RC(LRC),IC(LIC)
!                    ....
!                 SOLOUT FURNISHES THE SOLUTION "Y" AT THE NR-TH
!                    GRID-POINT "X" (THEREBY THE INITIAL VALUE IS
!                    THE FIRST GRID-POINT).
!                 "XOLD" IS THE PRECEEDING GRID-POINT.
!                 "IRTRN" SERVES TO INTERRUPT THE INTEGRATION. IF IRTRN
!                    IS SET <0, SEULEX RETURNS TO THE CALLING PROGRAM.
!                 DO NOT CHANGE THE ENTRIES OF RC(LRC),IC(LIC)!

!          -----  CONTINUOUS OUTPUT (IF IOUT=2): -----
!                 DURING CALLS TO "SOLOUT", A CONTINUOUS SOLUTION
!                 FOR THE INTERVAL [XOLD,X] IS AVAILABLE THROUGH
!                 THE REAL*8 FUNCTION
!                        >>>   CONTEX(I,S,RC,LRC,IC,LIC)   <<<
!                 WHICH PROVIDES AN APPROXIMATION TO THE I-TH
!                 COMPONENT OF THE SOLUTION AT THE POINT S. THE VALUE
!                 S SHOULD LIE IN THE INTERVAL [XOLD,X].

!     IOUT        GIVES INFORMATION ON THE SUBROUTINE SOLOUT:
!                    IOUT=0: SUBROUTINE IS NEVER CALLED
!                    IOUT=1: SUBROUTINE IS USED FOR OUTPUT
!                    IOUT=2: DENSE OUTPUT IS PERFORMED IN SOLOUT

!     WORK        ARRAY OF WORKING SPACE OF LENGTH "LWORK".
!                 SERVES AS WORKING SPACE FOR ALL VECTORS AND MATRICES.
!                 "LWORK" MUST BE AT LEAST
!                        N*(LJAC+LMAS+LE1+KM+8)+4*KM+20+KM2*NRDENS
!                 WHERE
!                    KM2=2+KM*(KM+3)/2  AND  NRDENS=IWORK(6) (SEE BELOW)
!                 AND
!                    LJAC=N              IF MLJAC=N (FULL JACOBIAN)
!                    LJAC=MLJAC+MUJAC+1  IF MLJAC<N (BANDED JAC.)
!                 AND
!                    LMAS=0              IF IMAS=0
!                    LMAS=N              IF IMAS=1 AND MLMAS=N (FULL)
!                    LMAS=MLMAS+MUMAS+1  IF MLMAS<N (BANDED MASS-M.)
!                 AND
!                    LE1=N               IF MLJAC=N (FULL JACOBIAN)
!                    LE1=2*MLJAC+MUJAC+1 IF MLJAC<N (BANDED JAC.).
!                 AND
!                    KM=12               IF IWORK(3)=0
!                    KM=IWORK(3)         IF IWORK(3).GT.0

!                 IN THE USUAL CASE WHERE THE JACOBIAN IS FULL AND THE
!                 MASS-MATRIX IS THE INDENTITY (IMAS=0), THE MINIMUM
!                 STORAGE REQUIREMENT IS
!                         LWORK = 2*N*N+(KM+8)*N+4*KM+13+KM2*NRDENS.
!                 IF IWORK(9)=M1>0 THEN "LWORK" MUST BE AT LEAST
!                    N*(LJAC+KM+8)+(N-M1)*(LMAS+LE1)+4*KM+20+KM2*NRDENS
!                 WHERE IN THE DEFINITIONS OF LJAC, LMAS AND LE1 THE
!                 NUMBER N CAN BE REPLACED BY N-M1.

!     LWORK       DECLARED LENGTH OF ARRAY "WORK".


!     IWORK       INTEGER WORKING SPACE OF LENGTH "LIWORK".
!                 "LIWORK" MUST BE AT LEAST  2*N+KM+20+NRDENS.

!     LIWORK      DECLARED LENGTH OF ARRAY "IWORK".

!     RPAR, IPAR  REAL AND INTEGER PARAMETERS (OR PARAMETER ARRAYS) WHIC
!                 CAN BE USED FOR COMMUNICATION BETWEEN YOUR CALLING
!                 PROGRAM AND THE FCN, JAC, MAS, SOLOUT SUBROUTINES.


! ----------------------------------------------------------------------

!     SOPHISTICATED SETTING OF PARAMETERS
!     -----------------------------------
!              SEVERAL PARAMETERS OF THE CODE ARE TUNED TO MAKE IT WORK
!              WELL. THEY MAY BE DEFINED BY SETTING WORK(1),..,WORK(13)
!              AS WELL AS IWORK(1),..,IWORK(4) DIFFERENT FROM ZERO.
!              FOR ZERO INPUT, THE CODE CHOOSES DEFAULT VALUES:

!    IWORK(1)  IF IWORK(1).NE.0, THE CODE TRANSFORMS THE JACOBIAN
!              MATRIX TO HESSENBERG FORM. THIS IS PARTICULARLY
!              ADVANTAGEOUS FOR LARGE SYSTEMS WITH FULL JACOBIAN.
!              IT DOES NOT WORK FOR BANDED JACOBIAN (MLJAC<N)
!              AND NOT FOR IMPLICIT SYSTEMS (IMAS=1).

!    IWORK(2)  THIS IS THE MAXIMAL NUMBER OF ALLOWED STEPS.
!              THE DEFAULT VALUE (FOR IWORK(2)=0) IS 100000.

!    IWORK(3)  THE MAXIMUM NUMBER OF COLUMNS IN THE EXTRAPOLATION
!              TABLE. THE DEFAULT VALUE (FOR IWORK(3)=0) IS 12.
!              IF IWORK(3).NE.0 THEN IWORK(3) SHOULD BE .GE.3.

!    IWORK(4)  SWITCH FOR THE STEP SIZE SEQUENCE
!              IF IWORK(4).EQ.1 THEN 1,2,3,4,6,8,12,16,24,32,48,...
!              IF IWORK(4).EQ.2 THEN 2,3,4,6,8,12,16,24,32,48,64,...
!              IF IWORK(4).EQ.3 THEN 1,2,3,4,5,6,7,8,9,10,...
!              IF IWORK(4).EQ.4 THEN 2,3,4,5,6,7,8,9,10,11,...
!              THE DEFAULT VALUE (FOR IWORK(4)=0) IS IWORK(4)=2.

!    IWORK(5)  PARAMETER "LAMBDA" OF DENSE OUTPUT; POSSIBLE VALUES
!              ARE 0 AND 1; DEFAULT IWORK(5)=0.

!    IWORK(6)  = NRDENS = NUMBER OF COMPONENTS, FOR WHICH DENSE OUTPUT
!              IS REQUIRED

!    IWORK(21),...,IWORK(NRDENS+20) INDICATE THE COMPONENTS, FOR WHICH
!              DENSE OUTPUT IS REQUIRED

!       IF THE DIFFERENTIAL SYSTEM HAS THE SPECIAL STRUCTURE THAT
!            Y(I)' = Y(I+M2)   FOR  I=1,...,M1,
!       WITH M1 A MULTIPLE OF M2, A SUBSTANTIAL GAIN IN COMPUTERTIME
!       CAN BE ACHIEVED BY SETTING THE FOLLOWING TWO PARAMETERS. E.G.,
!       FOR SECOND ORDER SYSTEMS P'=V, V'=G(P,V), WHERE P AND V ARE
!       VECTORS OF DIMENSION N/2, ONE HAS TO PUT M1=M2=N/2.
!       FOR M1>0 SOME OF THE INPUT PARAMETERS HAVE DIFFERENT MEANINGS:
!       - JAC: ONLY THE ELEMENTS OF THE NON-TRIVIAL PART OF THE
!              JACOBIAN HAVE TO BE STORED
!              IF (MLJAC.EQ.N-M1) THE JACOBIAN IS SUPPOSED TO BE FULL
!                 DFY(I,J) = PARTIAL F(I+M1) / PARTIAL Y(J)

!                FOR I=1,N-M1 AND J=1,N.
!              ELSE, THE JACOBIAN IS BANDED ( M1 = M2 * MM )
!                 DFY(I-J+MUJAC+1,J+K*M2) = PARTIAL F(I+M1) / PARTIAL Y(
!                FOR I=1,MLJAC+MUJAC+1 AND J=1,M2 AND K=0,MM.
!       - MLJAC: MLJAC=N-M1: IF THE NON-TRIVIAL PART OF THE JACOBIAN IS
!                0<=MLJAC<N-M1: IF THE (MM+1) SUBMATRICES (FOR K=0,MM)
!                     PARTIAL F(I+M1) / PARTIAL Y(J+K*M2),  I,J=1,M2
!                    ARE BANDED, MLJAC IS THE MAXIMAL LOWER BANDWIDTH
!                    OF THESE MM+1 SUBMATRICES
!       - MUJAC: MAXIMAL UPPER BANDWIDTH OF THESE MM+1 SUBMATRICES
!                NEED NOT BE DEFINED IF MLJAC=N-M1
!       - MAS: IF IMAS=0 THIS MATRIX IS ASSUMED TO BE THE IDENTITY AND
!              NEED NOT BE DEFINED. SUPPLY A DUMMY SUBROUTINE IN THIS CA
!              IT IS ASSUMED THAT ONLY THE ELEMENTS OF RIGHT LOWER BLOCK
!              DIMENSION N-M1 DIFFER FROM THAT OF THE IDENTITY MATRIX.
!              IF (MLMAS.EQ.N-M1) THIS SUBMATRIX IS SUPPOSED TO BE FULL
!                 AM(I,J) = M(I+M1,J+M1)     FOR I=1,N-M1 AND J=1,N-M1.
!              ELSE, THE MASS MATRIX IS BANDED
!                 AM(I-J+MUMAS+1,J) = M(I+M1,J+M1)
!       - MLMAS: MLMAS=N-M1: IF THE NON-TRIVIAL PART OF M IS FULL
!                0<=MLMAS<N-M1: LOWER BANDWIDTH OF THE MASS MATRIX
!       - MUMAS: UPPER BANDWIDTH OF THE MASS MATRIX
!                NEED NOT BE DEFINED IF MLMAS=N-M1

!    IWORK(9)  THE VALUE OF M1.  DEFAULT M1=0.

!    IWORK(10) THE VALUE OF M2.  DEFAULT M2=M1.

!    WORK(1)   UROUND, THE ROUNDING UNIT, DEFAULT 1.D-16.

!    WORK(2)   MAXIMAL STEP SIZE, DEFAULT XEND-X.


!    WORK(3)   DECIDES WHETHER THE JACOBIAN SHOULD BE RECOMPUTED;
!              INCREASE WORK(3), TO 0.01 SAY, WHEN JACOBIAN EVALUATIONS
!              ARE COSTLY. FOR SMALL SYSTEMS WORK(3) SHOULD BE SMALLER.
!              DEFAULT MIN(1.0D-4,RelTol(1))

!    WORK(4), WORK(5)   PARAMETERS FOR STEP SIZE SELECTION
!              THE NEW STEP SIZE FOR THE J-TH DIAGONAL ENTRY IS
!              CHOSEN SUBJECT TO THE RESTRICTION
!                 FACMIN/WORK(5) <= HNEW(J)/HOLD <= 1/FACMIN
!              WHERE FACMIN=WORK(4)**(1/(J-1))
!              DEFAULT VALUES: WORK(4)=0.1D0, WORK(5)=4.D0

!    WORK(6), WORK(7)   PARAMETERS FOR THE ORDER SELECTION
!              ORDER IS DECREASED IF    W(K-1) <= W(K)*WORK(6)
!              ORDER IS INCREASED IF    W(K) <= W(K-1)*WORK(7)
!              DEFAULT VALUES: WORK(6)=0.7D0, WORK(7)=0.9D0

!    WORK(8), WORK(9)   SAFETY FACTORS FOR STEP CONTROL ALGORITHM
!             HNEW=H*WORK(9)*(WORK(8)*TOL/ERR)**(1/(J-1))
!              DEFAULT VALUES: WORK(8)=0.8D0, WORK(9)=0.93D0

!    WORK(10), WORK(11), WORK(12), WORK(13)   ESTIMATED WORKS FOR
!             A CALL TO  FCN, JAC, DEC, SOL, RESPECTIVELY.
!             DEFAULT VALUES ARE: WORK(10)=1.D0, WORK(11)=5.D0,
!             WORK(12)=1.D0, WORK(13)=1.D0.

!-----------------------------------------------------------------------

!     OUTPUT PARAMETERS
!     -----------------
!     X           X-VALUE WHERE THE SOLUTION IS COMPUTED
!                 (AFTER SUCCESSFUL RETURN X=XEND)

!     Y(N)        SOLUTION AT X

!     H           PREDICTED STEP SIZE OF THE LAST ACCEPTED STEP

!     IDID        REPORTS ON SUCCESSFULNESS UPON RETURN:
!                   IDID=1  COMPUTATION SUCCESSFUL,
!                   IDID=-1 COMPUTATION UNSUCCESSFUL.

!   IWORK(14)  NFCN    NUMBER OF FUNCTION EVALUATIONS (THOSE FOR NUMERIC

!                      EVALUATION OF THE JACOBIAN ARE NOT COUNTED)
!   IWORK(15)  NJAC    NUMBER OF JACOBIAN EVALUATIONS (EITHER ANALYTICAL
!                      OR NUMERICALLY)
!   IWORK(16)  NSTEP   NUMBER OF COMPUTED STEPS
!   IWORK(17)  NACCPT  NUMBER OF ACCEPTED STEPS
!   IWORK(18)  NREJCT  NUMBER OF REJECTED STEPS (AFTER AT LEAST ONE STEP
!                      HAS BEEN ACCEPTED)
!   IWORK(19)  NDEC    NUMBER OF LU-KppDecompOSITIONS (N-DIMENSIONAL MAT
!   IWORK(20)  NSOL    NUMBER OF FORWARD-BACKWARD SUBSTITUTIONS
!-----------------------------------------------------------------------
! *** *** *** *** *** *** *** *** *** *** *** *** ***
!          DECLARATIONS
! *** *** *** *** *** *** *** *** *** *** *** *** ***

!     IMPLICIT NONE
!     INCLUDE '/users/grell/from_rainer/module_data_racm.f77'

      REAL*8 y, abstol, reltol, work, x, xend, h, hitol, hmax,temp
      INTEGER n, lwork, iwork, liwork, ifcn, ijac, mljac, mujac, imas, mlas
      INTEGER itol, mlmas, mumas, idid, iout, nfcn, njac, nstep, naccpt, &
        nrejct
      INTEGER ndec, nsol, nmax, km, km2, nsequ, lambda, nrdens, m1, m2, nm1
      INTEGER ldjac, lde, ldmas, ijob, ldmas2, ieyh, iedy, iefx, ieyhh, iedyh
      INTEGER iedel, iewh, iescal, iehh, iew, iea, iejac, iee, iemas, iet, &
        ifac
      INTEGER iede, ifsafe, istore, ieco, ieip, ienj, ieiph, nrd
      REAL*8 uround, thet, fac1, fac2, fac3, fac4, safe1, safe2, wkfcn, wkjac
      REAL*8 wkdec, wksol, wkrow
      REAL*8 rj(nphot)

      DIMENSION y(n), abstol(*), reltol(*), work(lwork), iwork(liwork)
      LOGICAL autnms, implct, arret, jband
! *** *** *** *** *** *** ***
!        SETTING THE PARAMETERS
! *** *** *** *** *** *** ***
      iout = 0
      nfcn = 0
      njac = 0
      nstep = 0
      naccpt = 0
      nrejct = 0

      ndec = 0
      nsol = 0
      arret = .FALSE.
! -------- NMAX , THE MAXIMAL NUMBER OF STEPS -----
      IF (iwork(2)==0) THEN
        nmax = 100000
      ELSE
        nmax = iwork(2)
        IF (nmax<=0) THEN
          WRITE (6,*) ' WRONG INPUT IWORK(2)=', iwork(2)
          arret = .TRUE.
        END IF
      END IF
! -------- KM     MAXIMUM NUMBER OF COLUMNS IN THE EXTRAPOLATION
      IF (iwork(3)==0) THEN
        km = 12
      ELSE
        km = iwork(3)
        IF (km<=2) THEN
          WRITE (6,*) ' CURIOUS INPUT IWORK(3)=', iwork(3)
          arret = .TRUE.
        END IF
      END IF
! -------- NSEQU     CHOICE OF STEP SIZE SEQUENCE
      nsequ = iwork(4)
      IF (iwork(4)==0) nsequ = 2
      IF (nsequ<=0 .OR. nsequ>=5) THEN

        WRITE (6,*) ' CURIOUS INPUT IWORK(4)=', iwork(4)
        arret = .TRUE.
      END IF
! -------- LAMBDA   PARAMETER FOR DENSE OUTPUT
      lambda = iwork(5)
      IF (lambda<0 .OR. lambda>=2) THEN
        WRITE (6,*) ' CURIOUS INPUT IWORK(5)=', iwork(5)
        arret = .TRUE.
      END IF
! -------- NRDENS   NUMBER OF DENSE OUTPUT COMPONENTS
      nrdens = iwork(6)
      IF (nrdens<0 .OR. nrdens>n) THEN
        WRITE (6,*) ' CURIOUS INPUT IWORK(6)=', iwork(6)
        arret = .TRUE.
      END IF
! -------- PARAMETER FOR SECOND ORDER EQUATIONS
      m1 = iwork(9)
      m2 = iwork(10)
      nm1 = n - m1
      IF (m1==0) m2 = n
      IF (m2==0) m2 = m1
      IF (m1<0 .OR. m2<0 .OR. m1+m2>n) THEN
        WRITE (6,*) ' CURIOUS INPUT FOR IWORK(9,10)=', m1, m2
        arret = .TRUE.
      END IF
! -------- UROUND   SMALLEST NUMBER SATISFYING 1.D0+UROUND>1.D0
      IF (work(1)==0.D0) THEN
        uround = 1.D-16
      ELSE
        uround = work(1)
        IF (uround<=0.D0 .OR. uround>=1.D0) THEN
          WRITE (6,*) '  UROUND=', work(1)
          arret = .TRUE.
        END IF
      END IF
! -------- MAXIMAL STEP SIZE
      IF (work(2)==0.D0) THEN
        hmax = xend - x
      ELSE
        hmax = work(2)
      END IF
! ------ THET     DECIDES WHETHER THE JACOBIAN SHOULD BE RECOMPUTED;
      IF (work(3)==0.D0) THEN
        thet = min(1.0D-4,reltol(1))
      ELSE
        thet = work(3)
      END IF
! -------  FAC1,FAC2     PARAMETERS FOR STEP SIZE SELECTION
      IF (work(4)==0.D0) THEN
        fac1 = 0.1D0
      ELSE
        fac1 = work(4)
      END IF
      IF (work(5)==0.D0) THEN
        fac2 = 4.0D0
      ELSE
        fac2 = work(5)
      END IF
! -------  FAC3, FAC4   PARAMETERS FOR THE ORDER SELECTION
      IF (work(6)==0.D0) THEN
        fac3 = 0.7D0
      ELSE
        fac3 = work(6)
      END IF
      IF (work(7)==0.D0) THEN
        fac4 = 0.9D0
      ELSE
        fac4 = work(7)
      END IF
! ------- SAFE1, SAFE2 SAFETY FACTORS FOR STEP SIZE PREDICTION
      IF (work(8)==0.D0) THEN
        safe1 = 0.6D0
      ELSE
        safe1 = work(8)
      END IF
      IF (work(9)==0.D0) THEN
        safe2 = 0.93D0
      ELSE
        safe2 = work(9)
      END IF
! ------- WKFCN,WKJAC,WKDEC,WKSOL  ESTIMATED WORK FOR  FCN,JAC,DEC,SOL
      IF (work(10)==0.D0) THEN
        wkfcn = 1.D0
      ELSE
        wkfcn = work(10)
      END IF
      IF (work(11)==0.D0) THEN
        wkjac = 5.D0
      ELSE
        wkjac = work(11)
      END IF
      IF (work(12)==0.D0) THEN
        wkdec = 1.D0
      ELSE
        wkdec = work(12)
      END IF
      IF (work(13)==0.D0) THEN
        wksol = 1.D0
      ELSE
        wksol = work(13)
      END IF
      wkrow = wkfcn + wksol
! --------- CHECK IF TOLERANCES ARE O.K.
      IF (itol==0) THEN
        IF (abstol(1)<=0.D0 .OR. reltol(1)<=10.D0*uround) THEN
          WRITE (6,*) ' TOLERANCES ARE TOO SMALL'
          arret = .TRUE.

        END IF
      ELSE
        DO i = 1, n
          IF (abstol(i)<=0.D0 .OR. reltol(i)<=10.D0*uround) THEN
            WRITE (6,*) ' TOLERANCES(', i, ') ARE TOO SMALL'
            arret = .TRUE.
          END IF
        END DO
      END IF
! *** *** *** *** *** *** *** *** *** *** *** *** ***
!         COMPUTATION OF ARRAY ENTRIES
! *** *** *** *** *** *** *** *** *** *** *** *** ***
! ---- AUTONOMOUS, IMPLICIT, BANDED OR NOT ?

      autnms = ifcn == 0
      implct = imas /= 0
      jband = mljac < nm1
! -------- COMPUTATION OF THE ROW-DIMENSIONS OF THE 2-ARRAYS ---
! -- JACOBIAN AND MATRIX E
      IF (jband) THEN
        ldjac = mljac + mujac + 1
        lde = mljac + ldjac
      ELSE
        mljac = nm1
        mujac = nm1
        ldjac = nm1
        lde = nm1
      END IF
! -- MASS MATRIX
      IF (implct) THEN
        IF (mlmas/=nm1) THEN
          ldmas = mlmas + mumas + 1
          IF (jband) THEN
            ijob = 4
          ELSE
            ijob = 3
          END IF
        ELSE
          ldmas = nm1
          ijob = 5
        END IF
! ------ BANDWITH OF "MAS" NOT LARGER THAN BANDWITH OF "JAC"
        IF (mlmas>mljac .OR. mumas>mujac) THEN
          WRITE (6,*) 'BANDWITH OF "MAS" NOT LARGER THAN BANDWITH OF "JAC"'
          arret = .TRUE.
        END IF
      ELSE
        ldmas = 0
        IF (jband) THEN
          ijob = 2
        ELSE
          ijob = 1
          IF (n>2 .AND. iwork(1)/=0) ijob = 7

        END IF
      END IF
      ldmas2 = max(1,ldmas)
! ------ HESSENBERG OPTION ONLY FOR EXPLICIT EQU. WITH FULL JACOBIAN
      IF ((implct .OR. jband) .AND. ijob==7) THEN
!        WRITE(6,*)' HESSENBERG OPTION ONLY FOR EXPLICIT EQUATIONS WITH
!    &FULL JACOBIAN'
        arret = .TRUE.
      END IF
! ------- PREPARE THE ENTRY-POINTS FOR THE ARRAYS IN WORK -----
      km2 = (km*(km+1))/2
      ieyh = 21
      iedy = ieyh + n
      iefx = iedy + n
      ieyhh = iefx + n
      iedyh = ieyhh + n
      iedel = iedyh + n
      iewh = iedel + n
      iescal = iewh + n
      iehh = iescal + n
      iew = iehh + km
      iea = iew + km
      iejac = iea + km
      iee = iejac + n*ldjac
      iemas = iee + nm1*lde
      iet = iemas + nm1*ldmas
      ifac = iet + n*km
      iede = ifac + km

      ifsafe = iede + (km+2)*nrdens
! ------ TOTAL STORAGE REQUIREMENT -----------
      istore = ifsafe + km2*nrdens - 1
      IF (istore>lwork) THEN
        WRITE (6,*) ' INSUFFICIENT STORAGE FOR WORK, MIN. LWORK=', istore
        arret = .TRUE.
      END IF
! ------- ENTRY POINTS FOR INTEGER WORKSPACE -----
      ieco = 21
      ieip = 21 + nrdens
      ienj = ieip + n
      ieiph = ienj + km
! --------- TOTAL REQUIREMENT ---------------
      istore = ieco + km - 1
      IF (istore>liwork) THEN
        WRITE (6,*) ' INSUFF. STORAGE FOR IWORK, MIN. LIWORK=', istore
        arret = .TRUE.
      END IF
! ------ WHEN A FAIL HAS OCCURED, WE RETURN WITH IDID=-1
      IF (arret) THEN
        idid = -1
        RETURN
      END IF
      nrd = max(1,nrdens)
! -------- CALL TO CORE INTEGRATOR ------------
      CALL seucor(n,x,y,xend,hmax,h,km,reltol,abstol,itol,ijac,mljac,mujac, &
        mlmas,mumas,iout,idid,ijob,m1,m2,nm1,nmax,uround,nsequ,autnms,implct, &
        jband,ldjac,lde,ldmas2,work(ieyh),work(iedy),work(iefx),work(ieyhh), &
        work(iedyh),work(iedel),work(iewh),work(iescal),work(iehh),work(iew), &
        work(iea),work(iejac),work(iee),work(iemas),work(iet),iwork(ieip), &
        iwork(ienj),iwork(ieiph),fac1,fac2,fac3,fac4,thet,safe1,safe2,wkjac, &
        wkdec,wkrow,km2,nrd,work(ifac),work(ifsafe),lambda,nfcn,njac,nstep, &
        naccpt,nrejct,ndec,nsol,work(iede),iwork(ieco),rj,temp)
      iwork(14) = nfcn
      iwork(15) = njac
      iwork(16) = nstep
      iwork(17) = naccpt
      iwork(18) = nrejct
      iwork(19) = ndec
      iwork(20) = nsol
! ----------- RETURN -----------
      RETURN
    END SUBROUTINE atmseulex


!  ----- ... AND HERE IS THE CORE INTEGRATOR  ----------

    SUBROUTINE seucor(n,x,y,xend,hmax,h,km,reltol,abstol,itol,ijac,mljac, &
        mujac,mlb,mub,iout,idid,ijob,m1,m2,nm1,nmax,uround,nsequ,autnms, &
        implct,banded,lfjac,le,ldmas,yh,dy,fx,yhh,dyh,del,wh,scal,hh,w,a,fjac, &
        e,fmas,t,ip,nj,iphes,fac1,fac2,fac3,fac4,thet,safe1,safe2,wkjac,wkdec, &
        wkrow,km2,nrd,facul,fsafe,lambda,nfcn,njac,nstep,naccpt,nrejct,ndec, &
        nsol,dens,icomp,rj,temp)
! ----------------------------------------------------------
!     CORE INTEGRATOR FOR SEULEX
!     PARAMETERS SAME AS IN SEULEX WITH WORKSPACE ADDED
! ----------------------------------------------------------
!         DECLARATIONS
! ----------------------------------------------------------
!      IMPLICIT NONE
!     INCLUDE '/users/grell/from_rainer/module_data_racm.f77'
      REAL*8 y, abstol, reltol, x, xend, h, hmax, hmaxn
      INTEGER n, ijac, mljac, mujac
      INTEGER itol, mlmas, idid, iout, nfcn, njac, nstep, naccpt, nrejct
      INTEGER ndec, nsol, nmax, nsequ, lambda, m1, m2, nm1
      INTEGER ijob, ldmas, nrd, le, ip, nj, iphes, icomp
      INTEGER nnrd, mle, mue, mbjac, mbb, mdiag, mdiff, mbdiag
      INTEGER mlb, mub, lfjac, lrde, ipt, j, lbeg, lend, l, in, ii
      REAL*8 uround, thet, fac1, fac2, fac3, fac4, safe1, safe2, wkjac
      REAL*8 wkdec, wksol, wkrow, del, yh, dy, dyh, fx, yhh, wh
      REAL*8 scal, hh, w, a, fjac, e, fmas, t, facul, fsafe, dens, xoldd, hhh
      REAL*8 theta, err, h1, hopt, fac, errold, xold, t1i, facnj, dblenj, &
        factor
      REAL*8 temp,rj(nphot)

      INTEGER km, km2, k, kc, kright, klr, kk, krn, kopt
      DIMENSION y(n), yh(n), dy(n), fx(n), yhh(n), dyh(n), del(n)
      DIMENSION wh(n), scal(n), hh(km), w(km), a(km), fjac(lu_nonzero_v)
      DIMENSION fmas(ldmas,nm1), t(km,n), ip(nm1), nj(km)
      DIMENSION reltol(*), abstol(*)
      DIMENSION iphes(n), fsafe(km2,nrd), facul(km), e(le,nm1)
      DIMENSION dens((km+2)*nrd), icomp(nrd)
      LOGICAL reject, last, atov, caljac, calhes, autnms, implct, banded

!RS      COMMON /coseu/xoldd, hhh, nnrd, kright
      COMMON /linal/mle, mue, mbjac, mbb, mdiag, mdiff, mbdiag
! --- COMPUTE COEFFICIENTS FOR DENSE OUTPUT
      IF (iout==2) THEN
        nnrd = nrd
! --- COMPUTE THE FACTORIALS --------
        facul(1) = 1.D0
        DO i = 1, km - 1
          facul(i+1) = i*facul(i)
        END DO
      END IF

! *** *** *** *** *** *** ***
!  INITIALISATIONS
! *** *** *** *** *** *** ***
      lrde = (km+2)*nrd
      mle = mljac
      mue = mujac
      mbjac = mljac + mujac + 1
      mbb = mlb + mub + 1
      mdiag = mle + mue + 1
      mdiff = mle + mue - mub
      mbdiag = mub + 1
      IF (m1>0) ijob = ijob + 10
! --- DEFINE THE STEP SIZE SEQUENCE
      IF (nsequ==1) THEN
        nj(1) = 1
        nj(2) = 2
        nj(3) = 3
        DO i = 4, km
          nj(i) = 2*nj(i-2)
        END DO
      END IF
      IF (nsequ==2) THEN
        nj(1) = 2
        nj(2) = 3
        DO i = 3, km
          nj(i) = 2*nj(i-2)
        END DO
      END IF
      DO i = 1, km
        IF (nsequ==3) nj(i) = i
        IF (nsequ==4) nj(i) = i + 1
      END DO
      a(1) = wkjac + nj(1)*wkrow + wkdec
      DO i = 2, km
        a(i) = a(i-1) + (nj(i)-1)*wkrow + wkdec
      END DO
      k = max0(3,min0(km-2,int(-dlog10(reltol(1)+abstol(1))*.6D0+1.5D0)))
      hmaxn = min(abs(hmax),abs(xend-x))
      IF (abs(h)<=10.D0*uround) h = 1.0D-6
      h = min(abs(h),hmaxn)
      theta = 2*abs(thet)
      err = 0.D0
      w(1) = 1.D30
      DO i = 1, n
        IF (itol==0) THEN
          scal(i) = abstol(1) + reltol(1)*dabs(y(i))
        ELSE
          scal(i) = abstol(i) + reltol(i)*dabs(y(i))
        END IF
      END DO
      caljac = .FALSE.
      reject = .FALSE.
      last = .FALSE.
10    CONTINUE
      IF (reject) theta = 2*abs(thet)
      atov = .FALSE.
! *** *** *** *** *** *** ***
! --- IS XEND REACHED IN THE NEXT STEP?
! *** *** *** *** *** *** ***
      h1 = xend - x
      IF (h1<=uround) GO TO 110
      hopt = h
      h = min(h,h1,hmaxn)
      IF (h>=h1-uround) last = .TRUE.
      IF (autnms) THEN
        CALL fun(n,x,y,dy,rj,temp)
        nfcn = nfcn + 1
      END IF
      IF (theta>thet .AND. .NOT. caljac) THEN
! *** *** *** *** *** *** ***
!  COMPUTATION OF THE JACOBIAN

! *** *** *** *** *** *** ***
        njac = njac + 1
! --- COMPUTE JACOBIAN MATRIX ANALYTICALLY
        CALL jac_sp(n,x,y,fjac,rj,temp)
        caljac = .TRUE.
        calhes = .FALSE.
      END IF
! *** *** *** *** *** *** ***
! --- THE FIRST AND LAST STEP
! *** *** *** *** *** *** ***
      IF (nstep==0 .OR. last) THEN
        ipt = 0
        nstep = nstep + 1
        DO j = 1, k
          kc = j

          CALL seul(j,n,x,y,dy,fx,fjac,lfjac,fmas,ldmas,e,le,ip,h,km,hmaxn,t, &
            scal,nj,hh,w,a,yhh,dyh,del,wh,err,safe1,fac,fac1,fac2,safe2,theta, &
            mljac,mujac,nfcn,ndec,nsol,mlb,mub,errold,iphes,icomp,autnms, &
            implct,banded,reject,atov,fsafe,km2,nrd,iout,ipt,m1,m2,nm1,ijob, &
            calhes,rj,temp)

          IF (atov) GO TO 10
          IF (j>1 .AND. err<=1.D0) GO TO 60
        END DO
        GO TO 55
      END IF
! --- BASIC INTEGRATION STEP
30    CONTINUE
      ipt = 0
      nstep = nstep + 1
      IF (nstep>=nmax) GO TO 120
      kc = k - 1
      DO j = 1, kc
        CALL seul(j,n,x,y,dy,fx,fjac,lfjac,fmas,ldmas,e,le,ip,h,km,hmaxn,t, &
          scal,nj,hh,w,a,yhh,dyh,del,wh,err,safe1,fac,fac1,fac2,safe2,theta, &
          mljac,mujac,nfcn,ndec,nsol,mlb,mub,errold,iphes,icomp,autnms,implct, &
          banded,reject,atov,fsafe,km2,nrd,iout,ipt,m1,m2,nm1,ijob,calhes,rj,temp)
        IF (atov) GO TO 10
      END DO
! *** *** *** *** *** *** ***
! --- CONVERGENCE MONITOR
! *** *** *** *** *** *** ***
      IF (k==2 .OR. reject) GO TO 50
      IF (err<=1.D0) GO TO 60
      IF (err>dble(nj(k+1)*nj(k))*4.D0) GO TO 100
50    CALL seul(k,n,x,y,dy,fx,fjac,lfjac,fmas,ldmas,e,le,ip,h,km,hmaxn,t,scal, &
        nj,hh,w,a,yhh,dyh,del,wh,err,safe1,fac,fac1,fac2,safe2,theta,mljac, &
        mujac,nfcn,ndec,nsol,mlb,mub,errold,iphes,icomp,autnms,implct,banded, &
        reject,atov,fsafe,km2,nrd,iout,ipt,m1,m2,nm1,ijob,calhes,rj,temp)
      IF (atov) GO TO 10
      kc = k
      IF (err<=1.D0) GO TO 60
! --- HOPE FOR CONVERGENCE IN LINE K+1
55    IF (err>dble(nj(k+1))*2.D0) GO TO 100
      kc = k + 1
      CALL seul(kc,n,x,y,dy,fx,fjac,lfjac,fmas,ldmas,e,le,ip,h,km,hmaxn,t, &
        scal,nj,hh,w,a,yhh,dyh,del,wh,err,safe1,fac,fac1,fac2,safe2,theta, &
        mljac,mujac,nfcn,ndec,nsol,mlb,mub,errold,iphes,icomp,autnms,implct, &
        banded,reject,atov,fsafe,km2,nrd,iout,ipt,m1,m2,nm1,ijob,calhes,rj,temp)
      IF (atov) GO TO 10
!Adi      IF (ERR.GT.1.D0) GO TO 100

      IF ((err>1.D0) .AND. (h>stepmin)) GO TO 100
! *** *** *** *** *** *** ***
! --- STEP IS ACCEPTED
! *** *** *** *** *** *** ***
60    xold = x

      x = x + h
      IF (iout==2) THEN
        kright = kc
        DO i = 1, nrd
          dens(i) = y(icomp(i))
        END DO
      END IF
      DO i = 1, n
        t1i = t(1,i)
        IF (itol==0) THEN
          scal(i) = abstol(1) + reltol(1)*dabs(t1i)
        ELSE
          scal(i) = abstol(i) + reltol(i)*dabs(t1i)
        END IF
        y(i) = t1i
      END DO
      naccpt = naccpt + 1

      caljac = .FALSE.
      IF (iout==2) THEN
        xoldd = xold
        hhh = h
        DO i = 1, nrd
          dens(nrd+i) = y(icomp(i))
        END DO
        DO klr = 1, kright - 1
! --- COMPUTE DIFFERENCES
          IF (klr>=2) THEN
            DO kk = klr, kc
              lbeg = ((kk+1)*kk)/2
              lend = lbeg - kk + 2
              DO l = lbeg, lend, -1
                DO i = 1, nrd
                  fsafe(l,i) = fsafe(l,i) - fsafe(l-1,i)
                END DO
              END DO

            END DO
          END IF
! --- COMPUTE DERIVATIVES AT RIGHT END ----
          DO kk = klr + lambda, kc
            facnj = nj(kk)
            facnj = facnj**klr/facul(klr+1)
            ipt = ((kk+1)*kk)/2
            DO i = 1, nrd
              krn = (kk-lambda+1)*nrd
              dens(krn+i) = fsafe(ipt,i)*facnj

            END DO
          END DO

          DO j = klr + lambda + 1, kc
            dblenj = nj(j)
            DO l = j, klr + lambda + 1, -1
              factor = dblenj/nj(l-1) - 1.D0
              DO i = 1, nrd
                krn = (l-lambda+1)*nrd + i
                dens(krn-nrd) = dens(krn) + (dens(krn)-dens(krn-nrd))/factor
              END DO
            END DO
          END DO
        END DO
! ---  COMPUTE THE COEFFICIENTS OF THE INTERPOLATION POLYNOMIAL
        DO in = 1, nrd
          DO j = 1, kright

            ii = nrd*j + in
            dens(ii) = dens(ii) - dens(ii-nrd)
          END DO
        END DO
      END IF
! --- COMPUTE OPTIMAL ORDER
      IF (kc==2) THEN

        kopt = 3
        IF (reject) kopt = 2
        GO TO 80
      END IF
      IF (kc<=k) THEN
        kopt = kc
        IF (w(kc-1)<w(kc)*fac3) kopt = kc - 1
        IF (w(kc)<w(kc-1)*fac4) kopt = min0(kc+1,km-1)
      ELSE
        kopt = kc - 1
        IF (kc>3 .AND. w(kc-2)<w(kc-1)*fac3) kopt = kc - 2
        IF (w(kc)<w(kopt)*fac4) kopt = min0(kc,km-1)
      END IF
! --- AFTER A REJECTED STEP
80    IF (reject) THEN
        k = min0(kopt,kc)
        h = dmin1(h,hh(k))
        reject = .FALSE.
        GO TO 10
      END IF
! --- COMPUTE STEP SIZE FOR NEXT STEP
      IF (kopt<=kc) THEN

        h = hh(kopt)
      ELSE
        IF (kc<k .AND. w(kc)<w(kc-1)*fac4) THEN
          h = hh(kc)*a(kopt+1)/a(kc)
        ELSE
          h = hh(kc)*a(kopt)/a(kc)
        END IF
      END IF
      k = kopt
      h = dmax1(h,stepmin)
      GO TO 10
! *** *** *** *** *** *** ***
! --- STEP IS REJECTED
! *** *** *** *** *** *** ***
100   k = min0(k,kc)
      IF (k>2 .AND. w(k-1)<w(k)*fac3) k = k - 1
      nrejct = nrejct + 1
      h = hh(k)
      last = .FALSE.

      reject = .TRUE.
      IF (caljac) GO TO 30
      GO TO 10
! --- SOLUTION EXIT
110   CONTINUE
      h = hopt
      idid = 1
      RETURN
! --- FAIL EXIT
120   WRITE (6,979) x, h
979   FORMAT (' EXIT OF SEULEX AT X=',D14.7,'   H=',D14.7)
      idid = -1
      RETURN
    END SUBROUTINE seucor


! *** *** *** *** *** *** ***
!     S U B R O U T I N E    S E U L
! *** *** *** *** *** *** ***

    SUBROUTINE seul(jj,n,x,y,dy,fx,fjac,lfjac,fmas,ldmas,e,le,ip,h,km,hmaxn,t, &
        scal,nj,hh,w,a,yh,dyh,del,wh,err,safe1,fac,fac1,fac2,safe2,theta, &
        mljac,mujac,nfcn,ndec,nsol,mlb,mub,errold,iphes,icomp,autnms,implct, &
        banded,reject,atov,fsafe,km2,nrd,iout,ipt,m1,m2,nm1,ijob,calhes,rj,temp)
! --- THIS SUBROUTINE COMPUTES THE J-TH LINE OF THE
! --- EXTRAPOLATION TABLE AND PROVIDES AN ESTIMATE
! --- OF THE OPTIMAL STEP SIZE
!     IMPLICIT NONE
!     INCLUDE '/users/grell/from_rainer/module_data_racm.f77'
      INTEGER n, ldmas, ip, nj, iphes, icomp, nrd, mle, mue, l
      INTEGER mbjac, mbb, mdiag, mdiff, mbdiag, jj, lfjac, le, mljac, mujac
      INTEGER nfcn, ndec, nsol, mlb, mub, iout, ipt, m1, m2, nm1, ijob, j, &
        ier, m, mm
      REAL*8 y, dy, fx, fjac, fmas, e, t, scal, hh, w, a, yh, dyh, del, wh, &
        fsafe
      REAL*8 x, h, hmaxn, err, safe1, fac, fac1, fac2, safe2, theta, errold
      REAL*8 hj, hji, del1, sum, del2, expo, facmin
      REAL*8 rj(nphot),temp
      INTEGER km, km2
      DIMENSION y(n), yh(n), dy(n), fx(n), dyh(n), del(n)
      DIMENSION wh(n), scal(n), hh(km), w(km), a(km)
      DIMENSION fjac(lu_nonzero_v), e(lu_nonzero_v)
      DIMENSION fmas(ldmas,n), t(km,n), ip(n), nj(km), iphes(n)
      DIMENSION fsafe(km2,nrd), icomp(nrd)
      LOGICAL atov, reject, autnms, implct, banded, calhes
!RS      COMMON /linal/mle, mue, mbjac, mbb, mdiag, mdiff, mbdiag
!      EXTERNAL FCN
! *** *** *** *** *** *** ***
!  COMPUTE THE MATRIX E AND ITS KppDecompOSITION

! *** *** *** *** *** *** ***
      hj = h/nj(jj)
      hji = 1.D0/hj
      DO i = 1, lu_nonzero_v
        e(i) = -fjac(i)
      END DO

      DO j = 1, n
        e(lu_diag_v(j)) = e(lu_diag_v(j)) + hji
      END DO
      CALL kppdecomp(n,e,ier)
      IF (ier/=0) GO TO 79
      ndec = ndec + 1
! *** *** *** *** *** *** ***
! --- STARTING PROCEDURE
! *** *** *** *** *** *** ***
      IF ( .NOT. autnms) THEN
        CALL fun(n,x+hj,y,dy,rj,temp)
        nfcn = nfcn + 1
      END IF
      DO i = 1, n
        yh(i) = y(i)
        del(i) = dy(i)
      END DO
      CALL kppsolve(e,del)
      nsol = nsol + 1
      m = nj(jj)
      IF (iout==2 .AND. m==jj) THEN
        ipt = ipt + 1
        DO i = 1, nrd
          fsafe(ipt,i) = del(icomp(i))
        END DO
      END IF
! *** *** *** *** *** *** ***
! --- SEMI-IMPLICIT EULER METHOD
! *** *** *** *** *** *** ***
      IF (m>1) THEN
        DO mm = 1, m - 1
          DO i = 1, n
            yh(i) = yh(i) + del(i)
          END DO
          IF (autnms) THEN
            CALL fun(n,x+hj*mm,yh,dyh,rj,temp)
          ELSE
            CALL fun(n,x+hj*(mm+1),yh,dyh,rj,temp)
          END IF
          nfcn = nfcn + 1
          IF (mm==1 .AND. jj<=2) THEN
! --- STABILITY CHECK
            del1 = 0.D0
            DO i = 1, n
              del1 = del1 + (del(i)/scal(i))**2
            END DO
            del1 = dsqrt(del1)
            IF (implct) THEN
              DO i = 1, nm1
                wh(i) = del(i+m1)
              END DO
              IF (mlb==nm1) THEN
                DO i = 1, nm1
                  sum = 0.D0
                  DO j = 1, nm1
                    sum = sum + fmas(i,j)*wh(j)
                  END DO

                  del(i+m1) = sum
                END DO
              ELSE
                DO i = 1, nm1
                  sum = 0.D0
                  DO j = max(1,i-mlb), min(nm1,i+mub)
                    sum = sum + fmas(i-j+mbdiag,j)*wh(j)
                  END DO
                  del(i+m1) = sum
                END DO
              END IF
            END IF
            IF ( .NOT. autnms) THEN
              CALL fun(n,x+hj,yh,wh,rj,temp)
              nfcn = nfcn + 1
              DO i = 1, n
                del(i) = wh(i) - del(i)*hji
              END DO
            ELSE
              DO i = 1, n
                del(i) = dyh(i) - del(i)*hji
              END DO
            END IF
            CALL kppsolve(e,del)
            nsol = nsol + 1
            del2 = 0.D0
            DO i = 1, n
              del2 = del2 + (del(i)/scal(i))**2
            END DO
            del2 = dsqrt(del2)
            theta = del2/max(1.D0,del1)
            IF (theta>1.D0) GO TO 79
          END IF
          CALL kppsolve(e,dyh)
          nsol = nsol + 1
          DO i = 1, n
            del(i) = dyh(i)
          END DO
          IF (iout==2 .AND. mm>=m-jj) THEN
            ipt = ipt + 1
            DO i = 1, nrd
              fsafe(ipt,i) = del(icomp(i))
            END DO
          END IF
        END DO
      END IF
      DO i = 1, n
        t(jj,i) = yh(i) + del(i)
      END DO
! *** *** *** *** *** *** ***
! --- POLYNOMIAL EXTRAPOLATION
! *** *** *** *** *** *** ***
      IF (jj==1) RETURN
      DO l = jj, 2, -1
        fac = (dble(nj(jj))/dble(nj(l-1))) - 1.D0
        DO i = 1, n
          t(l-1,i) = t(l,i) + (t(l,i)-t(l-1,i))/fac
        END DO
      END DO
      err = 0.D0
      DO i = 1, n
        err = err + min(abs((t(1,i)-t(2,i)))/scal(i),1.D15)**2
      END DO
      IF (err>=1.D30) GO TO 79
      err = dsqrt(err/dble(n))
      IF (jj>2 .AND. err>=errold) GO TO 79
      errold = dmax1(4*err,1.D0)
! --- COMPUTE OPTIMAL STEP SIZES
      expo = 1.D0/jj
      facmin = fac1**expo
      fac = dmin1(fac2/facmin,dmax1(facmin,(err/safe1)**expo/safe2))
      fac = 1.D0/fac
      hh(jj) = dmin1(h*fac,hmaxn)

      w(jj) = a(jj)/hh(jj)
      RETURN
79    atov = .TRUE.
      h = h*0.5D0
      reject = .TRUE.
      RETURN
    END SUBROUTINE seul



    SUBROUTINE fun(n,t,y,p,rj,temp)
!     IMPLICIT NONE
!     INCLUDE '/users/grell/from_rainer/module_data_racm.f77'
      INTEGER n, ijunk
      REAL*8 rconst(nreact), photl(23)
      REAL*8 t, told
      REAL*8 y(nvar), p(nvar)
      REAL*8 rj(nphot),temp

!RS      told = time
!RS      time = t
!      CALL Update_SUN()
!      CALL Update_PHOTO(photl)
      DO ijunk = 1, nphot
!     RCONST(1:NPHOT)=RJ
        rconst(ijunk) = rj(ijunk)
      END DO
      CALL update_rconst(rconst,temp)
      CALL funvar(y,rad,fix,rconst,p)
!RS      time = told
      RETURN
    END SUBROUTINE fun


    SUBROUTINE jac_sp(n,t,y,j,rj,temp)
!     IMPLICIT NONE
!     INCLUDE '/users/grell/from_rainer/module_data_racm.f77'
      INTEGER n, ijunk
      REAL*8 rconst(nreact), photl(23)
      REAL*8 told, t
      REAL*8 y(nvar), j(lu_nonzero_v)

      REAL*8 rj(nphot),temp

!RS      told = time
!RS      time = t
!      CALL Update_SUN()
!      CALL Update_PHOTO(photl)
      DO ijunk = 1, nphot
!     RCONST(1:NPHOT)=RJ
        rconst(ijunk) = rj(ijunk)
      END DO
      CALL update_rconst(rconst,temp)
      CALL jacvar_sp(y,rad,fix,rconst,j)
!RS      time = told
      RETURN
    END SUBROUTINE jac_sp

! End of INTEGRATE function
! ****************************************************************






! ****************************************************************

! FunVar - time derivatives of variables - Agregate form
!   Arguments :
!      V         - Concentrations of variable species (local)
!      R         - Concentrations of radical species (local)
!      F         - Concentrations of fixed species (local)
!      RCT       - Rate constants (local)
!      A_VAR     - Agregate term

! ****************************************************************

    SUBROUTINE funvar(v,r,f,rct,a_var)


!     IMPLICIT NONE
!     INCLUDE '/users/grell/from_rainer/module_data_racm.f77'
! V - Concentrations of variable species (local)
      REAL*8 v(nvar)
! R - Concentrations of radical species (local)
      REAL*8 r(nrad)
! F - Concentrations of fixed species (local)
      REAL*8 f(nfix)
! RCT - Rate constants (local)
      REAL*8 rct(nreact)
! A_VAR - Agregate term
      REAL*8 a_var(nvar)


! Local variables
! A - rate for each equation
      REAL*8 a(nreact)

! Computation of equation rates
      a(1) = rct(1)*v(73)
      a(2) = rct(2)*v(63)
      a(3) = rct(3)*v(63)
      a(4) = rct(4)*v(18)
      a(5) = rct(5)*v(27)
      a(6) = rct(6)*v(16)
      a(7) = rct(7)*v(70)
      a(8) = rct(8)*v(70)
      a(9) = rct(9)*v(19)
      a(10) = rct(10)*v(48)
      a(11) = rct(11)*v(48)
      a(12) = rct(12)*v(53)
      a(13) = rct(13)*v(17)
      a(14) = rct(14)*v(71)
      a(15) = rct(15)*v(26)
      a(16) = rct(16)*v(42)
      a(17) = rct(17)*v(34)
      a(18) = rct(18)*v(34)
      a(19) = rct(19)*v(40)
      a(20) = rct(20)*v(54)
      a(21) = rct(21)*v(68)
      a(22) = rct(22)*v(51)
      a(23) = rct(23)*v(23)
      a(24) = rct(24)*v(62)*f(3)
      a(25) = rct(25)*v(62)*v(63)
      a(26) = rct(26)*v(6)*f(2)
      a(27) = rct(27)*v(6)*f(3)
      a(28) = rct(28)*v(6)*f(1)
      a(29) = rct(29)*v(63)*v(67)
      a(30) = rct(30)*v(63)*v(69)
      a(31) = rct(31)*v(67)*v(69)
      a(32) = rct(32)*v(19)*v(67)
      a(33) = rct(33)*v(69)*v(69)
      a(34) = rct(34)*v(69)*v(69)*f(1)
      a(35) = rct(35)*v(62)*v(72)
      a(36) = rct(36)*v(62)*v(73)
      a(37) = rct(37)*v(62)*v(73)
      a(38) = rct(38)*v(67)*v(72)
      a(39) = rct(39)*v(67)*v(73)
      a(40) = rct(40)*v(67)*v(70)
      a(41) = rct(41)*v(69)*v(72)
      a(42) = rct(42)*v(69)*v(73)
      a(43) = rct(43)*v(16)
      a(44) = rct(44)*v(69)*v(70)
      a(45) = rct(45)*v(18)*v(67)
      a(46) = rct(46)*v(27)*v(67)
      a(47) = rct(47)*v(16)*v(67)
      a(48) = rct(48)*v(63)*v(72)
      a(49) = rct(49)*v(63)*v(73)
      a(50) = rct(50)*v(72)*v(72)*f(3)
      a(51) = rct(51)*v(70)*v(72)
      a(52) = rct(52)*v(70)*v(73)
      a(53) = rct(53)*v(70)*v(73)
      a(54) = rct(54)*v(10)
      a(55) = rct(55)*v(70)*v(70)
      a(56) = rct(56)*v(67)*f(4)

      a(57) = rct(57)*v(5)*v(67)
      a(58) = rct(58)*v(28)*v(67)
      a(59) = rct(59)*v(37)*v(62)
      a(60) = rct(60)*v(51)*v(62)
      a(61) = rct(61)*v(14)*v(67)
      a(62) = rct(62)*v(13)*v(67)
      a(63) = rct(63)*v(12)*v(67)
      a(64) = rct(64)*v(7)*v(67)
      a(65) = rct(65)*v(11)*v(67)
      a(66) = rct(66)*v(24)*v(67)
      a(67) = rct(67)*v(57)*v(67)
      a(68) = rct(68)*v(58)*v(67)
      a(69) = rct(69)*v(33)*v(67)
      a(70) = rct(70)*v(37)*v(67)
      a(71) = rct(71)*v(29)*v(67)
      a(72) = rct(72)*v(30)*v(67)
      a(73) = rct(73)*v(8)*v(67)
      a(74) = rct(74)*v(9)*v(67)
      a(75) = rct(75)*v(32)*v(67)
      a(76) = rct(76)*v(48)*v(67)
      a(77) = rct(77)*v(53)*v(67)
      a(78) = rct(78)*v(42)*v(67)
      a(79) = rct(79)*v(23)*v(67)
      a(80) = rct(80)*v(34)*v(67)
      a(81) = rct(81)*v(40)*v(67)
      a(82) = rct(82)*v(51)*v(67)
      a(83) = rct(83)*v(54)*v(67)
      a(84) = rct(84)*v(15)*v(67)
      a(85) = rct(85)*v(17)*v(67)
      a(86) = rct(86)*v(67)*v(71)
      a(87) = rct(87)*v(26)*v(67)
      a(88) = rct(88)*v(31)*v(67)
      a(89) = rct(89)*v(35)*v(67)
      a(90) = rct(90)*v(67)*v(68)
      a(91) = rct(91)*v(48)*v(70)
      a(92) = rct(92)*v(53)*v(70)
      a(93) = rct(93)*v(34)*v(70)
      a(94) = rct(94)*v(40)*v(70)
      a(95) = rct(95)*v(51)*v(70)
      a(96) = rct(96)*v(54)*v(70)
      a(97) = rct(97)*v(32)*v(70)
      a(98) = rct(98)*v(24)*v(70)
      a(99) = rct(99)*v(57)*v(70)
      a(100) = rct(100)*v(58)*v(70)
      a(101) = rct(101)*v(33)*v(70)

      a(102) = rct(102)*v(37)*v(70)
      a(103) = rct(103)*v(29)*v(70)
      a(104) = rct(104)*v(30)*v(70)
      a(105) = rct(105)*v(35)*v(70)
      a(106) = rct(106)*v(24)*v(63)
      a(107) = rct(107)*v(57)*v(63)
      a(108) = rct(108)*v(58)*v(63)
      a(109) = rct(109)*v(33)*v(63)
      a(110) = rct(110)*v(37)*v(63)
      a(111) = rct(111)*v(29)*v(63)
      a(112) = rct(112)*v(30)*v(63)
      a(113) = rct(113)*v(51)*v(63)
      a(114) = rct(114)*v(54)*v(63)
      a(115) = rct(115)*v(35)*v(63)
      a(116) = rct(116)*v(20)*v(73)
      a(117) = rct(117)*v(20)*v(69)
      a(118) = rct(118)*v(21)*v(73)
      a(119) = rct(119)*v(21)*f(3)
      a(120) = rct(120)*v(21)*v(63)
      a(121) = rct(121)*v(22)*v(73)
      a(122) = rct(122)*v(22)*f(3)
      a(123) = rct(123)*v(22)*v(63)
      a(124) = rct(124)*v(25)*v(73)
      a(125) = rct(125)*v(25)*f(3)
      a(126) = rct(126)*v(25)*v(63)
      a(127) = rct(127)*v(66)*v(73)
      a(128) = rct(128)*v(31)

      a(129) = rct(129)*v(55)*v(73)
      a(130) = rct(130)*v(35)
      a(131) = rct(131)*v(65)*v(72)
      a(132) = rct(132)*v(61)*v(72)
      a(133) = rct(133)*v(52)*v(72)
      a(134) = rct(134)*v(44)*v(72)
      a(135) = rct(135)*v(45)*v(72)
      a(136) = rct(136)*v(36)*v(72)
      a(137) = rct(137)*v(38)*v(72)
      a(138) = rct(138)*v(39)*v(72)
      a(139) = rct(139)*v(50)*v(72)
      a(140) = rct(140)*v(49)*v(72)
      a(141) = rct(141)*v(43)*v(72)
      a(142) = rct(142)*v(46)*v(72)
      a(143) = rct(143)*v(47)*v(72)
      a(144) = rct(144)*v(41)*v(72)
      a(145) = rct(145)*v(66)*v(72)
      a(146) = rct(146)*v(55)*v(72)
      a(147) = rct(147)*v(64)*v(72)
      a(148) = rct(148)*v(59)*v(72)
      a(149) = rct(149)*v(60)*v(72)
      a(150) = rct(150)*v(65)*v(69)
      a(151) = rct(151)*v(61)*v(69)
      a(152) = rct(152)*v(52)*v(69)
      a(153) = rct(153)*v(44)*v(69)
      a(154) = rct(154)*v(45)*v(69)
      a(155) = rct(155)*v(36)*v(69)
      a(156) = rct(156)*v(38)*v(69)
      a(157) = rct(157)*v(39)*v(69)
      a(158) = rct(158)*v(50)*v(69)
      a(159) = rct(159)*v(49)*v(69)
      a(160) = rct(160)*v(43)*v(69)
      a(161) = rct(161)*v(46)*v(69)

      a(162) = rct(162)*v(47)*v(69)
      a(163) = rct(163)*v(41)*v(69)
      a(164) = rct(164)*v(66)*v(69)
      a(165) = rct(165)*v(66)*v(69)
      a(166) = rct(166)*v(55)*v(69)
      a(167) = rct(167)*v(55)*v(69)
      a(168) = rct(168)*v(64)*v(69)
      a(169) = rct(169)*v(59)*v(69)
      a(170) = rct(170)*v(60)*v(69)
      a(171) = rct(171)*v(65)*v(65)
      a(172) = rct(172)*v(61)*v(65)
      a(173) = rct(173)*v(52)*v(65)
      a(174) = rct(174)*v(44)*v(65)
      a(175) = rct(175)*v(45)*v(65)
      a(176) = rct(176)*v(36)*v(65)
      a(177) = rct(177)*v(38)*v(65)
      a(178) = rct(178)*v(39)*v(65)
      a(179) = rct(179)*v(50)*v(65)
      a(180) = rct(180)*v(49)*v(65)
      a(181) = rct(181)*v(43)*v(65)
      a(182) = rct(182)*v(46)*v(65)
      a(183) = rct(183)*v(47)*v(65)
      a(184) = rct(184)*v(41)*v(65)
      a(185) = rct(185)*v(65)*v(66)
      a(186) = rct(186)*v(65)*v(66)
      a(187) = rct(187)*v(55)*v(65)
      a(188) = rct(188)*v(55)*v(65)
      a(189) = rct(189)*v(64)*v(65)
      a(190) = rct(190)*v(59)*v(65)
      a(191) = rct(191)*v(60)*v(65)
      a(192) = rct(192)*v(61)*v(66)
      a(193) = rct(193)*v(52)*v(66)
      a(194) = rct(194)*v(44)*v(66)
      a(195) = rct(195)*v(45)*v(66)
      a(196) = rct(196)*v(36)*v(66)
      a(197) = rct(197)*v(38)*v(66)
      a(198) = rct(198)*v(39)*v(66)
      a(199) = rct(199)*v(50)*v(66)
      a(200) = rct(200)*v(49)*v(66)
      a(201) = rct(201)*v(43)*v(66)
      a(202) = rct(202)*v(46)*v(66)
      a(203) = rct(203)*v(47)*v(66)
      a(204) = rct(204)*v(41)*v(66)
      a(205) = rct(205)*v(66)*v(66)
      a(206) = rct(206)*v(55)*v(66)

      a(207) = rct(207)*v(64)*v(66)
      a(208) = rct(208)*v(59)*v(66)
      a(209) = rct(209)*v(60)*v(66)
      a(210) = rct(210)*v(59)*v(59)
      a(211) = rct(211)*v(59)*v(60)
      a(212) = rct(212)*v(60)*v(60)
      a(213) = rct(213)*v(65)*v(70)
      a(214) = rct(214)*v(61)*v(70)
      a(215) = rct(215)*v(52)*v(70)
      a(216) = rct(216)*v(44)*v(70)
      a(217) = rct(217)*v(45)*v(70)
      a(218) = rct(218)*v(36)*v(70)
      a(219) = rct(219)*v(38)*v(70)
      a(220) = rct(220)*v(39)*v(70)
      a(221) = rct(221)*v(50)*v(70)
      a(222) = rct(222)*v(49)*v(70)
      a(223) = rct(223)*v(43)*v(70)
      a(224) = rct(224)*v(46)*v(70)
      a(225) = rct(225)*v(47)*v(70)
      a(226) = rct(226)*v(41)*v(70)
      a(227) = rct(227)*v(66)*v(70)
      a(228) = rct(228)*v(55)*v(70)
      a(229) = rct(229)*v(64)*v(70)
      a(230) = rct(230)*v(59)*v(70)
      a(231) = rct(231)*v(60)*v(70)
      a(232) = rct(232)*v(56)*v(69)
      a(233) = rct(233)*v(56)*v(65)
      a(234) = rct(234)*v(56)*v(66)
      a(235) = rct(235)*v(56)*v(56)
      a(236) = rct(236)*v(56)*v(72)
      a(237) = rct(237)*v(56)*v(70)

! Aggregate function
      a_var(1) = a(57)
      a_var(2) = a(58)
      a_var(3) = 0.036*a(63) + 0.37*a(106) + 0.14*a(107) + 0.15*a(109) + &
        0.15*a(110) + 0.01*a(112) + 0.22*a(113) + 0.11*a(114) + 0.11*a(115)
      a_var(4) = 0.1*a(107) + 0.14*a(108) + 0.07*a(112) + 0.13*a(113) + &
        0.21*a(114) + a(165) + a(167) + a(186) + a(188) + 0.5*a(192) + &
        0.499*a(193) + 0.495*a(194) + 0.495*a(195) + 0.5*a(196) + &
        0.499*a(197) + 0.49*a(198) + 0.494*a(199) + 0.5*a(207) + 0.5*a(208) + &
        0.484*a(209)
      a_var(5) = -a(57)
      a_var(6) = a(2) - a(26) - a(27) - a(28)
      a_var(7) = -a(64)
      a_var(8) = -a(73)
      a_var(9) = -a(74)
      a_var(10) = a(53) - a(54)
      a_var(11) = -a(65)
      a_var(12) = -a(63)
      a_var(13) = -a(62) + 0.03*a(107) + 0.06*a(108)
      a_var(14) = -a(61) + 0.06*a(107) + 0.07*a(108)
      a_var(15) = 0.35*a(83) - a(84)
      a_var(16) = -a(6) + a(42) - a(43) - a(47)
      a_var(17) = -a(13) - a(85) + a(150)
      a_var(18) = -a(4) + a(38) - a(45) + a(118) + a(121) + a(124)
      a_var(19) = -a(9) - a(32) + a(33) + a(34) + 0.006*a(107) + &
        0.011*a(108) + 0.001*a(109) + 0.001*a(110) + 0.02*a(111) + 0.02*a(112)
      a_var(20) = 0.1*a(75) + a(97) - a(116) - a(117)
      a_var(21) = 0.9*a(73) - a(118) - a(119) - a(120)
      a_var(22) = 0.9*a(74) - a(121) - a(122) - a(123)
      a_var(23) = -a(23) + 0.024*a(65) - a(79) + 0.41*a(82) + 0.6*a(89) + &
        0.3*a(189)
      a_var(24) = -a(66) - a(98) - a(106)
      a_var(25) = 0.85*a(75) - a(124) - a(125) - a(126)
      a_var(26) = -a(15) - a(87) + 0.11*a(114) + a(164)
      a_var(27) = -a(5) + a(39) + 0.3*a(44) - a(46) + a(91) + a(92) + a(93) + &
        a(94) + 0.2*a(95) + 0.5*a(96) + a(97)
      a_var(28) = a(10) + a(11) + a(12) + 1.87*a(17) + 1.55*a(18) + a(19) + &
        a(22) - a(58) + 0.01*a(59) + 0.036*a(63) + a(76) + 2*a(80) + a(81) + &
        0.41*a(82) + a(91) + 2*a(93) + a(94) + 0.8*a(95) + 0.43*a(106) + &
        0.37*a(107) + 0.3*a(108) + 0.36*a(109) + 0.36*a(110) + 0.14*a(111) + &
        0.14*a(112) + 0.54*a(113) + 0.66*a(114) + 0.13*a(115)
      a_var(29) = -a(71) - a(103) - a(111)
      a_var(30) = -a(72) - a(104) - a(112)
      a_var(31) = -a(88) + 0.4*a(89) + 0.4*a(105) + 0.3*a(115) + a(127) - &
        a(128)
      a_var(32) = -a(75) - a(97) + 0.1*a(116) + a(117) + a(118) + &
        0.02*a(119) + a(120) + a(121) + 0.02*a(122) + a(123) + a(124) + &
        0.02*a(125) + a(126)
      a_var(33) = -a(69) - a(101) - a(109)
      a_var(34) = -a(17) - a(18) + 0.036*a(63) - a(80) + 0.15*a(83) - a(93) + &
        0.25*a(96) + 0.5*a(114) + 0.063*a(133) + 1.2*a(142) + 0.35*a(143) + &
        a(144) + 0.119*a(173) + 0.65*a(182) + 0.37*a(183) + a(184) & 
         + 0.1*a(193) + 0.65*a(202) + 0.37*a(203) + a(204) + 0.063*a(215) + &
        1.3*a(224) + 0.74*a(225) + a(226)
      a_var(35) = -a(89) - a(105) - a(115) + a(129) - a(130)
      a_var(36) = a(66) - a(136) - a(155) - a(176) - a(196) - a(218)
      a_var(37) = -a(59) - a(70) - a(102) - a(110)
      a_var(38) = a(67) - a(137) - a(156) - a(177) - a(197) - a(219)
      a_var(39) = a(68) - a(138) - a(157) - a(178) - a(198) - a(220)
      a_var(40) = -a(19) + a(79) - a(81) + 0.08*a(82) + 0.15*a(83) - a(94) + &
        0.25*a(96) + 0.6*a(113) + 0.62*a(114) + 0.65*a(142) + 0.6*a(143) + &
        a(144) + 0.54*a(147) + 0.005*a(173) + 0.35*a(182) + 0.63*a(183) + &
        a(184) + 0.4*a(189) + 0.004*a(193) + 0.35*a(202) + 0.63*a(203) + &
        a(204) + 0.54*a(207) + 0.7*a(224) + 1.26*a(225) + a(226) + 0.54*a(229)
      a_var(41) = 0.98*a(125) - a(144) - a(163) - a(184) - a(204) - a(226)
      a_var(42) = -a(16) + 0.8*a(21) + 0.25*a(64) - a(78) + 0.12*a(84) + &
        0.41*a(86) + 0.03*a(96) + 0.03*a(107) + 0.16*a(108) + 0.53*a(111) + &
        0.623*a(133) + 0.722*a(134) + 0.642*a(135) + 0.06*a(137) + &
        0.29*a(138) + 0.8*a(140) + 0.464*a(149) + 0.018*a(173) + 0.24*a(174) + &
        0.419*a(175) + 0.081*a(177) + 0.313*a(178) + a(180) + 0.149*a(191) + &
        0.127*a(193) + 0.33*a(194) + 0.581*a(195) + 0.141*a(197) + &
        0.569*a(198) + a(200) + 0.11*a(207) + 0.167*a(209) + 0.149*a(211) + &
        0.285*a(212) + 0.67*a(215) + 0.828*a(216) + 0.88*a(217) + &
        0.06*a(219) + 0.29*a(220) + a(222) + 0.469*a(231)
      a_var(43) = a(72) - a(141) - a(160) - a(181) - a(201) - a(223)
      a_var(44) = 0.75*a(64) - a(134) - a(153) - a(174) - a(194) - a(216)
      a_var(45) = 0.951*a(65) - a(135) - a(154) - a(175) - a(195) - a(217)
      a_var(46) = 0.98*a(119) - a(142) - a(161) - a(182) - a(202) - a(224)
      a_var(47) = 0.98*a(122) - a(143) - a(162) - a(183) - a(203) - a(225)
      a_var(48) = -a(10) - a(11) + a(13) + 0.13*a(17) + 0.45*a(18) + a(22) + &
        a(23) + 0.05*a(59) + 0.01*a(63) - a(76) + 0.08*a(82) + 0.35*a(85) + &
        0.35*a(87) + a(88) + 0.4*a(89) - a(91) + 0.4*a(105) + a(106) + &
        0.64*a(107) + 0.02*a(108) + 0.9*a(109) + 0.9*a(110) + 0.04*a(112) + &
        0.4*a(113) + 0.7*a(115) + a(131) + 0.047*a(133) + 0.021*a(134) + &
        1.6*a(136) + a(137) + 0.606*a(139) + 0.25*a(141) + a(146) + &
        0.287*a(149) + 1.33*a(171) + 0.75*a(172) + 0.81*a(173) + &
        0.829*a(174) + 0.753*a(175) + 1.55*a(176) + 1.25*a(177) + &
        0.755*a(178) + 1.09*a(179) + a(180) + 1.4*a(181) + a(182) + a(183) + &
        a(184) + a(185) + a(186) + 2*a(187) + a(188) + 0.75*a(189) + &
        0.75*a(190) + 0.96*a(191) + 0.091 & 
        *a(193) + 0.076*a(194) + 0.8*a(196) + 0.501*a(197) + 0.34*a(199) + &
        0.4*a(201) + a(206) + 0.207*a(209) + 0.202*a(211) + 0.504*a(212) + &
        a(213) + 0.048*a(215) + 0.021*a(216) + 1.6*a(218) + a(219) + &
        0.686*a(221) + 0.4*a(223) + a(228) + 0.28*a(231) + a(233)
      a_var(49) = a(71) - a(140) - a(159) - a(180) - a(200) - a(222)
      a_var(50) = a(69) + a(70) - a(139) - a(158) - a(179) - a(199) - a(221)
      a_var(51) = -a(22) - a(60) - a(82) - a(95) + 0.9*a(101) + 0.9*a(102) + &
        0.39*a(109) + 0.39*a(110) + 0.79*a(112) - a(113) + 0.446*a(139) + &
        0.4*a(141) + 0.55*a(179) + 0.6*a(181) + 0.771*a(199) + 0.6*a(201) + &
        0.6*a(221) + 0.6*a(223)
      a_var(52) = 0.583*a(63) + 0.44*a(86) + a(90) - a(133) - a(152) - &
        a(173) - a(193) - a(215)
      a_var(53) = -a(12) + a(14) + 0.2*a(21) + a(60) + 0.335*a(63) + &
        0.025*a(65) - a(77) + 0.88*a(84) + 0.08*a(86) - a(92) + 0.25*a(96) + &
        0.44*a(107) + 0.99*a(108) + 0.65*a(111) + 0.16*a(114) + a(132) + &
        0.233*a(133) + 0.211*a(134) + 0.15*a(135) + 0.2*a(136) + 0.94*a(137) + &
        1.71*a(138) + 0.8*a(140) + 0.46*a(147) + 1.24*a(149) + 0.75*a(172) + &
        0.58*a(173) + 0.523*a(174) + 0.411*a(175) + 0.35*a(176) + &
        0.669*a(177) + 0.932*a(178) + a(180) + 0.3*a(189) + 0.64*a(191) + &
        a(192) + 0.724*a(193) + 0.677*a(194) + 0.497*a(195) + 0.6*a(196) + &
        0.859*a(197) + 0.941*a(198) + a(200) + 0.35*a(207) + 0.65*a(209) + &
        0.64*a(211) + 1.21*a(212) + a(214) + 0.243*a(215) + 0.239*a(216) + &
        0.187*a(217) + 0.2*a(218) + 0.94*a(219) + 1.71*a(220) + a(222) + &
        0.46*a(229) + 1.24*a(231)
      a_var(54) = -a(20) + 0.13*a(59) - a(83) - a(96) - a(114) + 0.5*a(142) + &
        0.95*a(143) + a(182) + a(183) + a(202) + a(203) + 0.5*a(224) + a(225)
      a_var(55) = a(20) + 0.51*a(82) + 0.5*a(83) + 0.2*a(95) + 0.5*a(96) - &
        a(129) + a(130) - a(146) - a(166) - a(167) - a(187) - a(188) - &
        a(206) - a(228)
      a_var(56) = 0.15*a(59) + 0.1*a(73) + 0.1*a(74) + 0.05*a(75) + &
        0.49*a(82) + 0.5*a(83) + 0.07*a(86) + 0.35*a(87) + a(88) + a(89) + &
        0.5*a(96) + a(105) + 0.13*a(109) + 0.13*a(110) + 0.048*a(133) + &
        0.334*a(134) + 0.416*a(135) + 0.16*a(147) + 0.085*a(173) + &
        0.245*a(174) + 0.322*a(175) + 0.08*a(189) + 0.071*a(193) + &
        0.237*a(194) + 0.318*a(195) + 0.08*a(207) + 0.051*a(215) + &
        0.391*a(216) + 0.587*a(217) + 0.16*a(229) - a(232) - a(233) - a(234) - &
        2*a(235) - a(236) - a(237)
      a_var(57) = 0.86*a(59) - a(67) - a(99) - a(107) + 0.35*a(109) + &
        0.35*a(110) + 0.46*a(112) + 0.354*a(139) + 0.37*a(179) + &
        0.229*a(199) + 0.4*a(221)
      a_var(58) = -a(68) - a(100) - a(108) + 0.25*a(141) + 0.08*a(179) + &
        0.4*a(181) + 0.4*a(201) + 0.4*a(223)
      a_var(59) = 0.8*a(95) + 0.8*a(98) + 0.43*a(99) + 0.11*a(100) + &
        0.9*a(101) + 0.9*a(102) + 0.1*a(103) + 0.13*a(104) - a(148) - a(169) - &
        a(190) - a(208) - 2*a(210) - a(211) - a(230)
      a_var(60) = 0.2*a(98) + 0.57*a(99) + 0.89*a(100) + 0.1*a(101) + &
        0.1*a(102) + 0.9*a(103) + 0.87*a(104) - a(149) - a(170) - a(191) - &
        a(209) - a(211) - 2*a(212) - a(231)
      a_var(61) = a(16) + a(62) + 0.1*a(107) + 0.18*a(108) + 0.2*a(111) + &
        0.16*a(112) - a(132) + 0.048*a(133) + 0.245*a(134) + 0.133*a(135) - &
        a(151) - a(172) + 0.014*a(174) + 0.013*a(175) - a(192) + &
        0.006*a(193) + 0.018*a(194) + 0.015*a(195) - a(214) + 0.053*a(215) + &
        0.262*a(216) + 0.155*a(217)
      a_var(62) = a(1) + a(3) + a(8) - a(24) - a(25) + a(26) + a(27) - a(35) - &
        a(36) - a(37) - a(59) - a(60) + 0.09*a(109) + 0.09*a(110)
      a_var(63) = -a(2) - a(3) + a(24) - a(25) - a(29) - a(30) - a(48) - &
        a(49) - a(106) - a(107) - a(108) - a(109) - a(110) - a(111) - a(112) - &
        a(113) - a(114) - a(115) - a(120) - a(123) - a(126) + a(165) + a(167)
      a_var(64) = a(78) + 0.03*a(107) + 0.12*a(108) + 0.02*a(109) + &
        0.02*a(110) + 0.42*a(111) + 0.42*a(112) - a(147) - a(168) - a(189) - &
        a(207) - a(229)
      a_var(65) = a(12) + a(15) + a(61) + 0.65*a(85) + 0.19*a(107) + &
        0.23*a(108) + 0.03*a(109) + 0.03*a(110) - a(131) + 0.15*a(133) + &
        0.031*a(134) + a(145) - a(150) - 2*a(171) - a(172) - 0.993*a(173) - &
        0.951*a(174) - a(175) - a(176) - a(177) - a(178) - a(179) - a(180) - &
        a(181) - a(182) - a(183) - a(184) - a(186) - a(187) - a(188) - &
        a(189) - a(190) - a(191) + 0.5*a(192) + 0.508*a(193) + 0.554*a(194) + &
        0.507*a(195) + 0.5*a(196) + 0.501*a(197) + 0.51*a(198) + &
        0.506*a(199) + a(200) + a(201) + a(202) + a(203) + a(204) + 2*a(205) + &
        a(206) + 0.5*a(207) + 0.5*a(208) + 0.516*a(209) - a(213) + &
        0.155*a(215) + 0.04*a(216) + a(227) - a(233) + a(234)
      a_var(66) = a(16) + a(19) + a(22) + a(23) + a(77) + a(81) + 0.65*a(87) + &
        a(92) + a(94) + 0.15*a(109) + 0.15*a(110) + 0.13*a(113) + &
        0.28*a(114) + 0.7*a(115) - a(127) + a(128) - a(145) + a(146) + &
        0.23*a(147) - a(164) - a(165) - a(185) - a(186) + a(187) + &
        0.12*a(189) - a(192) - a(193) - a(194) - a(195) - a(196) - a(197) - &
        a(198) - a(199) - a(200) - a(201) - a(202) - a(203) - a(204) - &
        2*a(205) - 0.88*a(207) - a(208) - a(209) - a(227) + a(228) + &
        0.23*a(229) - a(234)
      a_var(67) = a(4) + a(5) + 0.35*a(6) + 2*a(9) + a(13) + a(14) + a(15) + &
        2*a(28) - a(29) + a(30) - a(31) - a(32) - a(38) - a(39) - a(40) + &
        a(41) + 0.7*a(44) - a(45) - a(46) - a(47) - a(56) - a(57) - a(58) + &
        0.02*a(59) - a(61) - a(62) - 0.964*a(63) - a(64) - a(65) - a(66) - &
        a(67) - a(68) - a(69) - a(70) - a(71) - a(72) - a(73) - a(74) - &
        a(75) - a(76) - a(77) - a(78) - a(79) - a(80) - a(81) - a(82) - &
        a(83) - a(84) - 0.65*a(85) - 0.51*a(86) - a(87) - a(88) - a(89) - &
        a(90) + 0.12*a(106) + 0.4*a(107) + 0.63*a(108) + 0.28*a(109) + &
        0.28*a(110) + 0.85*a(111) + 0.85*a(112) + 0.07*a(113) + 0.21*a(114) + &
        0.036*a(115) + a(120) + a(123) + a(126)
      a_var(68) = -a(21) - a(90) + 0.6*a(105) + a(116) + 0.059*a(133) + &
        0.124*a(134) + 0.261*a(135) + 0.153*a(139) + 0.2*a(140) + &
        0.35*a(141) + 0.05*a(142) + 0.05*a(143) + a(148) + a(169) + a(170) + &
        a(190) + 0.5*a(191) + a(208) + 0.484*a(209) + 2*a(210) + 1.5*a(211) + &
        a(212) + a(230)
      a_var(69) = 0.65*a(6) + 2*a(11) + a(12) + a(13) + a(14) + 0.8*a(18) + &
        a(19) + a(20) + a(21) + a(22) + a(23) + a(29) - a(30) - a(31) + &
        a(32) - 2*a(33) - 2*a(34) + a(40) - a(41) - a(42) + a(43) - a(44) + &
        a(56) + a(57) + a(58) + 0.28*a(59) + 0.381*a(63) + 0.25*a(64) + &
        0.049*a(65) + 0.1*a(73) + 0.1*a(74) + 0.05*a(75) + a(76) + a(79) + &
        a(80) + 0.49*a(82) + 0.5*a(83) + a(84) + 0.35*a(87) + 0.4*a(89) + &
        a(91) + a(93) + 0.5*a(96) + 0.26*a(106) + 0.25*a(107) + 0.22*a(108) + &
        0.3*a(109) + 0.3*a(110) + 0.1*a(111) + 0.1*a(112) + 0.29*a(113) + &
        0.29*a(114) + 0.08*a(115) - a(117) + 0.02*a(119) + 0.02*a(122) + &
        0.02*a(125) + a(131) + a(132) + 0.742*a(133) + 0.599*a(134) + &
        0.606*a(135) + a(136) + a(137) + a(138) + 0.847*a(139) + 0.8*a(140) + &
        0.65*a(141) + 0.95*a(142) + 0.95*a(143) + a(144) + 0.77*a(147) + &
        a(148) - a(150)
      a_var(69) = a_var(69) - a(151) - a(152) - a(153) - a(154) - a(155) - &
        a(156) - a(157) - a(158) - a(159) - a(160) - a(161) - a(162) - &
        a(163) - a(164) - a(165) - a(166) - a(167) - a(168) - a(169) - &
        a(170) + 0.66*a(171) + a(172) + 0.992*a(173) + 0.946*a(174) + &
        0.993*a(175) + a(176) + a(177) + a(178) + a(179) + 2*a(180) + &
        2*a(181) + a(182) + a(183) + 2*a(184) + a(185) + a(187) + &
        0.88*a(189) + a(190) + 0.5*a(191) + 0.5*a(192) + 0.488*a(193) + &
        0.438*a(194) + 0.489*a(195) + 0.5*a(196) + 0.501*a(197) + &
        0.51*a(198) + 0.506*a(199) + a(200) + a(201) + a(202) + a(203) + &
        a(204) + 0.38*a(207) + 0.5*a(208) + a(210) + 0.5*a(211) + a(213) + &
        a(214) + 0.792*a(215) + 0.699*a(216) + 0.845*a(217) + a(218) + &
        a(219) + a(220) + a(221) + a(222) + a(223) + a(224) + a(225) + &
        a(226) + 0.77*a(229) + a(230) - a(232) + a(233)
      a_var(70) = 0.35*a(6) - a(7) - a(8) + a(37) - a(40) - a(44) + a(46) + &
        a(49) - a(51) - a(52) - a(53) + a(54) - 2*a(55) + a(88) + 0.6*a(89) - &
        a(91) - a(92) - a(93) - a(94) - a(95) - a(96) - a(97) - a(98) - &
        a(99) - a(100) - a(101) - a(102) - a(103) - a(104) - 0.4*a(105) - &
        a(213) - a(214) - a(215) - a(216) - a(217) - a(218) - a(219) - &
        a(220) - a(221) - a(222) - a(223) - a(224) - a(225) - a(226) - &
        a(227) - a(228) - a(229) - a(230) - a(231) - a(237)
      a_var(71) = -a(14) - a(86) + 0.13*a(113) + a(151) + a(152) + a(153) + &
        a(154) + a(155) + a(156) + a(157) + a(158) + a(159) + a(160) + &
        a(161) + a(162) + a(163) + a(166) + a(168) + a(232)
      a_var(72) = a(1) + a(4) + a(7) - a(35) + a(36) - a(38) - a(41) - a(48) - &
        2*a(50) - a(51) + a(52) - a(131) - a(132) - a(133) - a(134) - a(135) - &
        a(136) - a(137) - a(138) - a(139) - a(140) - a(141) - a(142) - &
        a(143) - a(144) - a(145) - a(146) - a(147) - a(148) - a(149) - a(236)
      a_var(73) = -a(1) + a(5) + 0.65*a(6) + a(8) + a(21) + a(35) - a(36) - &
        a(37) - a(39) + a(40) + a(41) - a(42) + a(43) + 0.7*a(44) + a(45) + &
        a(47) + a(48) - a(49) + 2*a(50) + 2*a(51) - a(53) + a(54) + 2*a(55) + &
        a(90) + 0.5*a(96) + 0.4*a(105) + 0.7*a(115) - a(116) - a(118) - &
        a(121) - a(124) - a(127) + a(128) - a(129) + a(130) + a(131) + &
        a(132) + 0.941*a(133) + 0.876*a(134) + 0.739*a(135) + a(136) + &
        a(137) + a(138) + 0.847*a(139) + 0.8*a(140) + 0.65*a(141) + &
        0.95*a(142) + 0.95*a(143) + a(144) + a(145) + a(146) + a(147) + &
        a(148) + 2*a(149) + 0.5*a(191) + 0.516*a(209) + 0.5*a(211) + a(212) + &
        a(213) + a(214) + a(215) + a(216) + a(217) + a(218) + a(219) + &
        a(220) + a(221) + a(222) + a(223) + a(224) + a(225) + a(226) + &
        a(227) + a(228) + a(229) + a(230) + 2*a(231) + a(236) + a(237)
      RETURN
    END SUBROUTINE funvar

! End of FunVar function
! ****************************************************************


! ****************************************************************

! JacVar_SP - the Jacobian of Variables in sparse matrix representation
!   Arguments :
!      V         - Concentrations of variable species (local)
!      R         - Concentrations of radical species (local)
!      F         - Concentrations of fixed species (local)
!      RCT       - Rate constants (local)
!      JVS       - the Jacobian of variables

! ****************************************************************

    SUBROUTINE jacvar_sp(v,r,f,rct,jvs)

!     INCLUDE '/users/grell/from_rainer/module_data_racm.f77'


! V - Concentrations of variable species (local)
      REAL*8 v(nvar)
! R - Concentrations of radical species (local)
      REAL*8 r(nrad)
! F - Concentrations of fixed species (local)
      REAL*8 f(nfix)
! RCT - Rate constants (local)
      REAL*8 rct(nreact)
! JVS - the Jacobian of variables
      REAL*8 jvs(lu_nonzero_v+1)


! Local variables
! NTMPB - Length of Temporary Array B
      INTEGER ntmpb
      PARAMETER (ntmpb=440)
! B - temporary matrix
      REAL*8 b(ntmpb)

! B(1) = dA(1)/dV(73)
      b(1) = rct(1)
! B(2) = dA(2)/dV(63)
      b(2) = rct(2)
! B(3) = dA(3)/dV(63)
      b(3) = rct(3)
! B(4) = dA(4)/dV(18)
      b(4) = rct(4)
! B(5) = dA(5)/dV(27)
      b(5) = rct(5)
! B(6) = dA(6)/dV(16)
      b(6) = rct(6)
! B(7) = dA(7)/dV(70)
      b(7) = rct(7)
! B(8) = dA(8)/dV(70)
      b(8) = rct(8)
! B(9) = dA(9)/dV(19)
      b(9) = rct(9)
! B(10) = dA(10)/dV(48)
      b(10) = rct(10)
! B(11) = dA(11)/dV(48)
      b(11) = rct(11)
! B(12) = dA(12)/dV(53)
      b(12) = rct(12)
! B(13) = dA(13)/dV(17)
      b(13) = rct(13)
! B(14) = dA(14)/dV(71)
      b(14) = rct(14)
! B(15) = dA(15)/dV(26)
      b(15) = rct(15)
! B(16) = dA(16)/dV(42)
      b(16) = rct(16)
! B(17) = dA(17)/dV(34)
      b(17) = rct(17)
! B(18) = dA(18)/dV(34)

      b(18) = rct(18)
! B(19) = dA(19)/dV(40)
      b(19) = rct(19)
! B(20) = dA(20)/dV(54)
      b(20) = rct(20)
! B(21) = dA(21)/dV(68)
      b(21) = rct(21)
! B(22) = dA(22)/dV(51)
      b(22) = rct(22)
! B(23) = dA(23)/dV(23)
      b(23) = rct(23)
! B(24) = dA(24)/dV(62)
      b(24) = rct(24)*f(3)
! B(26) = dA(25)/dV(62)
      b(26) = rct(25)*v(63)
! B(27) = dA(25)/dV(63)
      b(27) = rct(25)*v(62)
! B(28) = dA(26)/dV(6)
      b(28) = rct(26)*f(2)
! B(30) = dA(27)/dV(6)
      b(30) = rct(27)*f(3)
! B(32) = dA(28)/dV(6)
      b(32) = rct(28)*f(1)
! B(34) = dA(29)/dV(63)
      b(34) = rct(29)*v(67)
! B(35) = dA(29)/dV(67)
      b(35) = rct(29)*v(63)
! B(36) = dA(30)/dV(63)
      b(36) = rct(30)*v(69)
! B(37) = dA(30)/dV(69)
      b(37) = rct(30)*v(63)
! B(38) = dA(31)/dV(67)
      b(38) = rct(31)*v(69)
! B(39) = dA(31)/dV(69)
      b(39) = rct(31)*v(67)
! B(40) = dA(32)/dV(19)
      b(40) = rct(32)*v(67)
! B(41) = dA(32)/dV(67)
      b(41) = rct(32)*v(19)
! B(42) = dA(33)/dV(69)
      b(42) = rct(33)*2*v(69)
! B(43) = dA(34)/dV(69)
      b(43) = rct(34)*2*v(69)*f(1)
! B(45) = dA(35)/dV(62)
      b(45) = rct(35)*v(72)
! B(46) = dA(35)/dV(72)
      b(46) = rct(35)*v(62)
! B(47) = dA(36)/dV(62)
      b(47) = rct(36)*v(73)
! B(48) = dA(36)/dV(73)
      b(48) = rct(36)*v(62)
! B(49) = dA(37)/dV(62)
      b(49) = rct(37)*v(73)
! B(50) = dA(37)/dV(73)
      b(50) = rct(37)*v(62)
! B(51) = dA(38)/dV(67)
      b(51) = rct(38)*v(72)
! B(52) = dA(38)/dV(72)
      b(52) = rct(38)*v(67)
! B(53) = dA(39)/dV(67)
      b(53) = rct(39)*v(73)
! B(54) = dA(39)/dV(73)
      b(54) = rct(39)*v(67)
! B(55) = dA(40)/dV(67)

      b(55) = rct(40)*v(70)
! B(56) = dA(40)/dV(70)
      b(56) = rct(40)*v(67)
! B(57) = dA(41)/dV(69)
      b(57) = rct(41)*v(72)

! B(58) = dA(41)/dV(72)
      b(58) = rct(41)*v(69)
! B(59) = dA(42)/dV(69)
      b(59) = rct(42)*v(73)
! B(60) = dA(42)/dV(73)
      b(60) = rct(42)*v(69)
! B(61) = dA(43)/dV(16)
      b(61) = rct(43)
! B(62) = dA(44)/dV(69)
      b(62) = rct(44)*v(70)
! B(63) = dA(44)/dV(70)
      b(63) = rct(44)*v(69)
! B(64) = dA(45)/dV(18)
      b(64) = rct(45)*v(67)
! B(65) = dA(45)/dV(67)
      b(65) = rct(45)*v(18)
! B(66) = dA(46)/dV(27)
      b(66) = rct(46)*v(67)
! B(67) = dA(46)/dV(67)

      b(67) = rct(46)*v(27)
! B(68) = dA(47)/dV(16)
      b(68) = rct(47)*v(67)
! B(69) = dA(47)/dV(67)
      b(69) = rct(47)*v(16)

! B(70) = dA(48)/dV(63)
      b(70) = rct(48)*v(72)
! B(71) = dA(48)/dV(72)
      b(71) = rct(48)*v(63)
! B(72) = dA(49)/dV(63)
      b(72) = rct(49)*v(73)
! B(73) = dA(49)/dV(73)
      b(73) = rct(49)*v(63)
! B(74) = dA(50)/dV(72)
      b(74) = rct(50)*2*v(72)*f(3)
! B(76) = dA(51)/dV(70)
      b(76) = rct(51)*v(72)
! B(77) = dA(51)/dV(72)
      b(77) = rct(51)*v(70)
! B(78) = dA(52)/dV(70)
      b(78) = rct(52)*v(73)
! B(79) = dA(52)/dV(73)
      b(79) = rct(52)*v(70)
! B(80) = dA(53)/dV(70)
      b(80) = rct(53)*v(73)
! B(81) = dA(53)/dV(73)
      b(81) = rct(53)*v(70)
! B(82) = dA(54)/dV(10)
      b(82) = rct(54)
! B(83) = dA(55)/dV(70)
      b(83) = rct(55)*2*v(70)
! B(84) = dA(56)/dV(67)
      b(84) = rct(56)*f(4)
! B(86) = dA(57)/dV(5)
      b(86) = rct(57)*v(67)
! B(87) = dA(57)/dV(67)
      b(87) = rct(57)*v(5)
! B(88) = dA(58)/dV(28)
      b(88) = rct(58)*v(67)
! B(89) = dA(58)/dV(67)
      b(89) = rct(58)*v(28)
! B(90) = dA(59)/dV(37)
      b(90) = rct(59)*v(62)
! B(91) = dA(59)/dV(62)
      b(91) = rct(59)*v(37)
! B(92) = dA(60)/dV(51)
      b(92) = rct(60)*v(62)
! B(93) = dA(60)/dV(62)
      b(93) = rct(60)*v(51)
! B(94) = dA(61)/dV(14)
      b(94) = rct(61)*v(67)
! B(95) = dA(61)/dV(67)
      b(95) = rct(61)*v(14)
! B(96) = dA(62)/dV(13)
      b(96) = rct(62)*v(67)
! B(97) = dA(62)/dV(67)

      b(97) = rct(62)*v(13)
! B(98) = dA(63)/dV(12)
      b(98) = rct(63)*v(67)
! B(99) = dA(63)/dV(67)
      b(99) = rct(63)*v(12)

! B(100) = dA(64)/dV(7)
      b(100) = rct(64)*v(67)
! B(101) = dA(64)/dV(67)
      b(101) = rct(64)*v(7)
! B(102) = dA(65)/dV(11)
      b(102) = rct(65)*v(67)
! B(103) = dA(65)/dV(67)
      b(103) = rct(65)*v(11)
! B(104) = dA(66)/dV(24)
      b(104) = rct(66)*v(67)
! B(105) = dA(66)/dV(67)
      b(105) = rct(66)*v(24)
! B(106) = dA(67)/dV(57)
      b(106) = rct(67)*v(67)
! B(107) = dA(67)/dV(67)
      b(107) = rct(67)*v(57)
! B(108) = dA(68)/dV(58)
      b(108) = rct(68)*v(67)
! B(109) = dA(68)/dV(67)
      b(109) = rct(68)*v(58)
! B(110) = dA(69)/dV(33)
      b(110) = rct(69)*v(67)
! B(111) = dA(69)/dV(67)
      b(111) = rct(69)*v(33)
! B(112) = dA(70)/dV(37)
      b(112) = rct(70)*v(67)
! B(113) = dA(70)/dV(67)
      b(113) = rct(70)*v(37)
! B(114) = dA(71)/dV(29)
      b(114) = rct(71)*v(67)
! B(115) = dA(71)/dV(67)
      b(115) = rct(71)*v(29)
! B(116) = dA(72)/dV(30)
      b(116) = rct(72)*v(67)
! B(117) = dA(72)/dV(67)
      b(117) = rct(72)*v(30)
! B(118) = dA(73)/dV(8)
      b(118) = rct(73)*v(67)
! B(119) = dA(73)/dV(67)
      b(119) = rct(73)*v(8)
! B(120) = dA(74)/dV(9)
      b(120) = rct(74)*v(67)
! B(121) = dA(74)/dV(67)
      b(121) = rct(74)*v(9)
! B(122) = dA(75)/dV(32)
      b(122) = rct(75)*v(67)
! B(123) = dA(75)/dV(67)
      b(123) = rct(75)*v(32)
! B(124) = dA(76)/dV(48)
      b(124) = rct(76)*v(67)
! B(125) = dA(76)/dV(67)
      b(125) = rct(76)*v(48)
! B(126) = dA(77)/dV(53)
      b(126) = rct(77)*v(67)
! B(127) = dA(77)/dV(67)
      b(127) = rct(77)*v(53)
! B(128) = dA(78)/dV(42)
      b(128) = rct(78)*v(67)
! B(129) = dA(78)/dV(67)
      b(129) = rct(78)*v(42)
! B(130) = dA(79)/dV(23)
      b(130) = rct(79)*v(67)
! B(131) = dA(79)/dV(67)
      b(131) = rct(79)*v(23)
! B(132) = dA(80)/dV(34)
      b(132) = rct(80)*v(67)
! B(133) = dA(80)/dV(67)
      b(133) = rct(80)*v(34)
! B(134) = dA(81)/dV(40)
      b(134) = rct(81)*v(67)
! B(135) = dA(81)/dV(67)
      b(135) = rct(81)*v(40)
! B(136) = dA(82)/dV(51)
      b(136) = rct(82)*v(67)
! B(137) = dA(82)/dV(67)
      b(137) = rct(82)*v(51)
! B(138) = dA(83)/dV(54)
      b(138) = rct(83)*v(67)
! B(139) = dA(83)/dV(67)
      b(139) = rct(83)*v(54)
! B(140) = dA(84)/dV(15)
      b(140) = rct(84)*v(67)
! B(141) = dA(84)/dV(67)
      b(141) = rct(84)*v(15)
! B(142) = dA(85)/dV(17)
      b(142) = rct(85)*v(67)
! B(143) = dA(85)/dV(67)
      b(143) = rct(85)*v(17)
! B(144) = dA(86)/dV(67)
      b(144) = rct(86)*v(71)
! B(145) = dA(86)/dV(71)
      b(145) = rct(86)*v(67)
! B(146) = dA(87)/dV(26)
      b(146) = rct(87)*v(67)
! B(147) = dA(87)/dV(67)
      b(147) = rct(87)*v(26)
! B(148) = dA(88)/dV(31)
      b(148) = rct(88)*v(67)
! B(149) = dA(88)/dV(67)
      b(149) = rct(88)*v(31)
! B(150) = dA(89)/dV(35)
      b(150) = rct(89)*v(67)
! B(151) = dA(89)/dV(67)
      b(151) = rct(89)*v(35)
! B(152) = dA(90)/dV(67)
      b(152) = rct(90)*v(68)
! B(153) = dA(90)/dV(68)
      b(153) = rct(90)*v(67)
! B(154) = dA(91)/dV(48)
      b(154) = rct(91)*v(70)
! B(155) = dA(91)/dV(70)
      b(155) = rct(91)*v(48)
! B(156) = dA(92)/dV(53)
      b(156) = rct(92)*v(70)
! B(157) = dA(92)/dV(70)
      b(157) = rct(92)*v(53)
! B(158) = dA(93)/dV(34)
      b(158) = rct(93)*v(70)
! B(159) = dA(93)/dV(70)
      b(159) = rct(93)*v(34)
! B(160) = dA(94)/dV(40)
      b(160) = rct(94)*v(70)
! B(161) = dA(94)/dV(70)
      b(161) = rct(94)*v(40)
! B(162) = dA(95)/dV(51)
      b(162) = rct(95)*v(70)
! B(163) = dA(95)/dV(70)
      b(163) = rct(95)*v(51)
! B(164) = dA(96)/dV(54)
      b(164) = rct(96)*v(70)
! B(165) = dA(96)/dV(70)
      b(165) = rct(96)*v(54)
! B(166) = dA(97)/dV(32)
      b(166) = rct(97)*v(70)
! B(167) = dA(97)/dV(70)
      b(167) = rct(97)*v(32)
! B(168) = dA(98)/dV(24)
      b(168) = rct(98)*v(70)
! B(169) = dA(98)/dV(70)
      b(169) = rct(98)*v(24)
! B(170) = dA(99)/dV(57)
      b(170) = rct(99)*v(70)
! B(171) = dA(99)/dV(70)
      b(171) = rct(99)*v(57)
! B(172) = dA(100)/dV(58)
      b(172) = rct(100)*v(70)
! B(173) = dA(100)/dV(70)
      b(173) = rct(100)*v(58)
! B(174) = dA(101)/dV(33)
      b(174) = rct(101)*v(70)

! B(175) = dA(101)/dV(70)
      b(175) = rct(101)*v(33)
! B(176) = dA(102)/dV(37)
      b(176) = rct(102)*v(70)
! B(177) = dA(102)/dV(70)
      b(177) = rct(102)*v(37)
! B(178) = dA(103)/dV(29)
      b(178) = rct(103)*v(70)
! B(179) = dA(103)/dV(70)
      b(179) = rct(103)*v(29)
! B(180) = dA(104)/dV(30)
      b(180) = rct(104)*v(70)
! B(181) = dA(104)/dV(70)
      b(181) = rct(104)*v(30)
! B(182) = dA(105)/dV(35)
      b(182) = rct(105)*v(70)
! B(183) = dA(105)/dV(70)
      b(183) = rct(105)*v(35)

! B(184) = dA(106)/dV(24)
      b(184) = rct(106)*v(63)
! B(185) = dA(106)/dV(63)
      b(185) = rct(106)*v(24)
! B(186) = dA(107)/dV(57)
      b(186) = rct(107)*v(63)
! B(187) = dA(107)/dV(63)
      b(187) = rct(107)*v(57)
! B(188) = dA(108)/dV(58)
      b(188) = rct(108)*v(63)
! B(189) = dA(108)/dV(63)
      b(189) = rct(108)*v(58)
! B(190) = dA(109)/dV(33)
      b(190) = rct(109)*v(63)
! B(191) = dA(109)/dV(63)
      b(191) = rct(109)*v(33)
! B(192) = dA(110)/dV(37)
      b(192) = rct(110)*v(63)

! B(193) = dA(110)/dV(63)
      b(193) = rct(110)*v(37)
! B(194) = dA(111)/dV(29)
      b(194) = rct(111)*v(63)
! B(195) = dA(111)/dV(63)
      b(195) = rct(111)*v(29)
! B(196) = dA(112)/dV(30)
      b(196) = rct(112)*v(63)
! B(197) = dA(112)/dV(63)
      b(197) = rct(112)*v(30)
! B(198) = dA(113)/dV(51)
      b(198) = rct(113)*v(63)
! B(199) = dA(113)/dV(63)
      b(199) = rct(113)*v(51)
! B(200) = dA(114)/dV(54)
      b(200) = rct(114)*v(63)
! B(201) = dA(114)/dV(63)
      b(201) = rct(114)*v(54)

! B(202) = dA(115)/dV(35)
      b(202) = rct(115)*v(63)
! B(203) = dA(115)/dV(63)
      b(203) = rct(115)*v(35)
! B(204) = dA(116)/dV(20)
      b(204) = rct(116)*v(73)
! B(205) = dA(116)/dV(73)
      b(205) = rct(116)*v(20)
! B(206) = dA(117)/dV(20)
      b(206) = rct(117)*v(69)
! B(207) = dA(117)/dV(69)
      b(207) = rct(117)*v(20)
! B(208) = dA(118)/dV(21)
      b(208) = rct(118)*v(73)
! B(209) = dA(118)/dV(73)
      b(209) = rct(118)*v(21)
! B(210) = dA(119)/dV(21)
      b(210) = rct(119)*f(3)
! B(212) = dA(120)/dV(21)
      b(212) = rct(120)*v(63)
! B(213) = dA(120)/dV(63)
      b(213) = rct(120)*v(21)
! B(214) = dA(121)/dV(22)
      b(214) = rct(121)*v(73)
! B(215) = dA(121)/dV(73)
      b(215) = rct(121)*v(22)
! B(216) = dA(122)/dV(22)
      b(216) = rct(122)*f(3)
! B(218) = dA(123)/dV(22)
      b(218) = rct(123)*v(63)
! B(219) = dA(123)/dV(63)
      b(219) = rct(123)*v(22)
! B(220) = dA(124)/dV(25)
      b(220) = rct(124)*v(73)
! B(221) = dA(124)/dV(73)
      b(221) = rct(124)*v(25)
! B(222) = dA(125)/dV(25)
      b(222) = rct(125)*f(3)
! B(224) = dA(126)/dV(25)
      b(224) = rct(126)*v(63)
! B(225) = dA(126)/dV(63)
      b(225) = rct(126)*v(25)
! B(226) = dA(127)/dV(66)
      b(226) = rct(127)*v(73)
! B(227) = dA(127)/dV(73)
      b(227) = rct(127)*v(66)
! B(228) = dA(128)/dV(31)
      b(228) = rct(128)
! B(229) = dA(129)/dV(55)
      b(229) = rct(129)*v(73)
! B(230) = dA(129)/dV(73)
      b(230) = rct(129)*v(55)
! B(231) = dA(130)/dV(35)
      b(231) = rct(130)
! B(232) = dA(131)/dV(65)
      b(232) = rct(131)*v(72)
! B(233) = dA(131)/dV(72)
      b(233) = rct(131)*v(65)
! B(234) = dA(132)/dV(61)
      b(234) = rct(132)*v(72)
! B(235) = dA(132)/dV(72)
      b(235) = rct(132)*v(61)
! B(236) = dA(133)/dV(52)
      b(236) = rct(133)*v(72)
! B(237) = dA(133)/dV(72)
      b(237) = rct(133)*v(52)

! B(238) = dA(134)/dV(44)
      b(238) = rct(134)*v(72)
! B(239) = dA(134)/dV(72)
      b(239) = rct(134)*v(44)
! B(240) = dA(135)/dV(45)
      b(240) = rct(135)*v(72)
! B(241) = dA(135)/dV(72)
      b(241) = rct(135)*v(45)
! B(242) = dA(136)/dV(36)
      b(242) = rct(136)*v(72)
! B(243) = dA(136)/dV(72)
      b(243) = rct(136)*v(36)
! B(244) = dA(137)/dV(38)
      b(244) = rct(137)*v(72)
! B(245) = dA(137)/dV(72)
      b(245) = rct(137)*v(38)
! B(246) = dA(138)/dV(39)
      b(246) = rct(138)*v(72)

! B(247) = dA(138)/dV(72)
      b(247) = rct(138)*v(39)
! B(248) = dA(139)/dV(50)
      b(248) = rct(139)*v(72)
! B(249) = dA(139)/dV(72)
      b(249) = rct(139)*v(50)
! B(250) = dA(140)/dV(49)
      b(250) = rct(140)*v(72)
! B(251) = dA(140)/dV(72)
      b(251) = rct(140)*v(49)
! B(252) = dA(141)/dV(43)
      b(252) = rct(141)*v(72)
! B(253) = dA(141)/dV(72)
      b(253) = rct(141)*v(43)
! B(254) = dA(142)/dV(46)
      b(254) = rct(142)*v(72)
! B(255) = dA(142)/dV(72)
      b(255) = rct(142)*v(46)

! B(256) = dA(143)/dV(47)
      b(256) = rct(143)*v(72)
! B(257) = dA(143)/dV(72)
      b(257) = rct(143)*v(47)
! B(258) = dA(144)/dV(41)
      b(258) = rct(144)*v(72)
! B(259) = dA(144)/dV(72)
      b(259) = rct(144)*v(41)
! B(260) = dA(145)/dV(66)
      b(260) = rct(145)*v(72)
! B(261) = dA(145)/dV(72)
      b(261) = rct(145)*v(66)
! B(262) = dA(146)/dV(55)
      b(262) = rct(146)*v(72)
! B(263) = dA(146)/dV(72)
      b(263) = rct(146)*v(55)
! B(264) = dA(147)/dV(64)
      b(264) = rct(147)*v(72)

! B(265) = dA(147)/dV(72)
      b(265) = rct(147)*v(64)
! B(266) = dA(148)/dV(59)
      b(266) = rct(148)*v(72)
! B(267) = dA(148)/dV(72)
      b(267) = rct(148)*v(59)
! B(268) = dA(149)/dV(60)
      b(268) = rct(149)*v(72)
! B(269) = dA(149)/dV(72)
      b(269) = rct(149)*v(60)
! B(270) = dA(150)/dV(65)
      b(270) = rct(150)*v(69)
! B(271) = dA(150)/dV(69)
      b(271) = rct(150)*v(65)
! B(272) = dA(151)/dV(61)
      b(272) = rct(151)*v(69)
! B(273) = dA(151)/dV(69)
      b(273) = rct(151)*v(61)

! B(274) = dA(152)/dV(52)
      b(274) = rct(152)*v(69)
! B(275) = dA(152)/dV(69)
      b(275) = rct(152)*v(52)
! B(276) = dA(153)/dV(44)
      b(276) = rct(153)*v(69)
! B(277) = dA(153)/dV(69)
      b(277) = rct(153)*v(44)
! B(278) = dA(154)/dV(45)
      b(278) = rct(154)*v(69)
! B(279) = dA(154)/dV(69)
      b(279) = rct(154)*v(45)
! B(280) = dA(155)/dV(36)
      b(280) = rct(155)*v(69)
! B(281) = dA(155)/dV(69)
      b(281) = rct(155)*v(36)
! B(282) = dA(156)/dV(38)
      b(282) = rct(156)*v(69)

! B(283) = dA(156)/dV(69)
      b(283) = rct(156)*v(38)
! B(284) = dA(157)/dV(39)
      b(284) = rct(157)*v(69)
! B(285) = dA(157)/dV(69)
      b(285) = rct(157)*v(39)
! B(286) = dA(158)/dV(50)
      b(286) = rct(158)*v(69)
! B(287) = dA(158)/dV(69)
      b(287) = rct(158)*v(50)
! B(288) = dA(159)/dV(49)
      b(288) = rct(159)*v(69)
! B(289) = dA(159)/dV(69)
      b(289) = rct(159)*v(49)
! B(290) = dA(160)/dV(43)
      b(290) = rct(160)*v(69)
! B(291) = dA(160)/dV(69)
      b(291) = rct(160)*v(43)

! B(292) = dA(161)/dV(46)
      b(292) = rct(161)*v(69)
! B(293) = dA(161)/dV(69)
      b(293) = rct(161)*v(46)
! B(294) = dA(162)/dV(47)
      b(294) = rct(162)*v(69)
! B(295) = dA(162)/dV(69)
      b(295) = rct(162)*v(47)
! B(296) = dA(163)/dV(41)
      b(296) = rct(163)*v(69)
! B(297) = dA(163)/dV(69)
      b(297) = rct(163)*v(41)
! B(298) = dA(164)/dV(66)
      b(298) = rct(164)*v(69)
! B(299) = dA(164)/dV(69)
      b(299) = rct(164)*v(66)
! B(300) = dA(165)/dV(66)
      b(300) = rct(165)*v(69)

! B(301) = dA(165)/dV(69)
      b(301) = rct(165)*v(66)
! B(302) = dA(166)/dV(55)
      b(302) = rct(166)*v(69)
! B(303) = dA(166)/dV(69)
      b(303) = rct(166)*v(55)
! B(304) = dA(167)/dV(55)
      b(304) = rct(167)*v(69)
! B(305) = dA(167)/dV(69)
      b(305) = rct(167)*v(55)
! B(306) = dA(168)/dV(64)
      b(306) = rct(168)*v(69)
! B(307) = dA(168)/dV(69)
      b(307) = rct(168)*v(64)
! B(308) = dA(169)/dV(59)
      b(308) = rct(169)*v(69)
! B(309) = dA(169)/dV(69)
      b(309) = rct(169)*v(59)

! B(310) = dA(170)/dV(60)
      b(310) = rct(170)*v(69)
! B(311) = dA(170)/dV(69)
      b(311) = rct(170)*v(60)
! B(312) = dA(171)/dV(65)
      b(312) = rct(171)*2*v(65)
! B(313) = dA(172)/dV(61)
      b(313) = rct(172)*v(65)
! B(314) = dA(172)/dV(65)
      b(314) = rct(172)*v(61)
! B(315) = dA(173)/dV(52)
      b(315) = rct(173)*v(65)
! B(316) = dA(173)/dV(65)
      b(316) = rct(173)*v(52)
! B(317) = dA(174)/dV(44)
      b(317) = rct(174)*v(65)
! B(318) = dA(174)/dV(65)
      b(318) = rct(174)*v(44)
! B(319) = dA(175)/dV(45)
      b(319) = rct(175)*v(65)
! B(320) = dA(175)/dV(65)
      b(320) = rct(175)*v(45)
! B(321) = dA(176)/dV(36)
      b(321) = rct(176)*v(65)
! B(322) = dA(176)/dV(65)
      b(322) = rct(176)*v(36)
! B(323) = dA(177)/dV(38)
      b(323) = rct(177)*v(65)
! B(324) = dA(177)/dV(65)
      b(324) = rct(177)*v(38)
! B(325) = dA(178)/dV(39)
      b(325) = rct(178)*v(65)
! B(326) = dA(178)/dV(65)
      b(326) = rct(178)*v(39)
! B(327) = dA(179)/dV(50)
      b(327) = rct(179)*v(65)
! B(328) = dA(179)/dV(65)
      b(328) = rct(179)*v(50)
! B(329) = dA(180)/dV(49)
      b(329) = rct(180)*v(65)
! B(330) = dA(180)/dV(65)
      b(330) = rct(180)*v(49)
! B(331) = dA(181)/dV(43)
      b(331) = rct(181)*v(65)
! B(332) = dA(181)/dV(65)
      b(332) = rct(181)*v(43)
! B(333) = dA(182)/dV(46)
      b(333) = rct(182)*v(65)
! B(334) = dA(182)/dV(65)
      b(334) = rct(182)*v(46)
! B(335) = dA(183)/dV(47)
      b(335) = rct(183)*v(65)
! B(336) = dA(183)/dV(65)
      b(336) = rct(183)*v(47)
! B(337) = dA(184)/dV(41)
      b(337) = rct(184)*v(65)
! B(338) = dA(184)/dV(65)
      b(338) = rct(184)*v(41)
! B(339) = dA(185)/dV(65)
      b(339) = rct(185)*v(66)
! B(340) = dA(185)/dV(66)
      b(340) = rct(185)*v(65)
! B(341) = dA(186)/dV(65)
      b(341) = rct(186)*v(66)
! B(342) = dA(186)/dV(66)
      b(342) = rct(186)*v(65)
! B(343) = dA(187)/dV(55)
      b(343) = rct(187)*v(65)
! B(344) = dA(187)/dV(65)
      b(344) = rct(187)*v(55)
! B(345) = dA(188)/dV(55)
      b(345) = rct(188)*v(65)
! B(346) = dA(188)/dV(65)
      b(346) = rct(188)*v(55)
! B(347) = dA(189)/dV(64)
      b(347) = rct(189)*v(65)
! B(348) = dA(189)/dV(65)
      b(348) = rct(189)*v(64)
! B(349) = dA(190)/dV(59)
      b(349) = rct(190)*v(65)
! B(350) = dA(190)/dV(65)
      b(350) = rct(190)*v(59)
! B(351) = dA(191)/dV(60)
      b(351) = rct(191)*v(65)
! B(352) = dA(191)/dV(65)
      b(352) = rct(191)*v(60)
! B(353) = dA(192)/dV(61)
      b(353) = rct(192)*v(66)
! B(354) = dA(192)/dV(66)
      b(354) = rct(192)*v(61)
! B(355) = dA(193)/dV(52)
      b(355) = rct(193)*v(66)
! B(356) = dA(193)/dV(66)
      b(356) = rct(193)*v(52)
! B(357) = dA(194)/dV(44)
      b(357) = rct(194)*v(66)
! B(358) = dA(194)/dV(66)
      b(358) = rct(194)*v(44)
! B(359) = dA(195)/dV(45)
      b(359) = rct(195)*v(66)
! B(360) = dA(195)/dV(66)
      b(360) = rct(195)*v(45)
! B(361) = dA(196)/dV(36)
      b(361) = rct(196)*v(66)
! B(362) = dA(196)/dV(66)
      b(362) = rct(196)*v(36)
! B(363) = dA(197)/dV(38)
      b(363) = rct(197)*v(66)
! B(364) = dA(197)/dV(66)
      b(364) = rct(197)*v(38)
! B(365) = dA(198)/dV(39)
      b(365) = rct(198)*v(66)
! B(366) = dA(198)/dV(66)
      b(366) = rct(198)*v(39)
! B(367) = dA(199)/dV(50)
      b(367) = rct(199)*v(66)
! B(368) = dA(199)/dV(66)
      b(368) = rct(199)*v(50)
! B(369) = dA(200)/dV(49)
      b(369) = rct(200)*v(66)
! B(370) = dA(200)/dV(66)
      b(370) = rct(200)*v(49)
! B(371) = dA(201)/dV(43)
      b(371) = rct(201)*v(66)
! B(372) = dA(201)/dV(66)
      b(372) = rct(201)*v(43)
! B(373) = dA(202)/dV(46)
      b(373) = rct(202)*v(66)
! B(374) = dA(202)/dV(66)
      b(374) = rct(202)*v(46)
! B(375) = dA(203)/dV(47)
      b(375) = rct(203)*v(66)
! B(376) = dA(203)/dV(66)
      b(376) = rct(203)*v(47)
! B(377) = dA(204)/dV(41)
      b(377) = rct(204)*v(66)
! B(378) = dA(204)/dV(66)
      b(378) = rct(204)*v(41)
! B(379) = dA(205)/dV(66)
      b(379) = rct(205)*2*v(66)
! B(380) = dA(206)/dV(55)
      b(380) = rct(206)*v(66)
! B(381) = dA(206)/dV(66)
      b(381) = rct(206)*v(55)
! B(382) = dA(207)/dV(64)
      b(382) = rct(207)*v(66)
! B(383) = dA(207)/dV(66)
      b(383) = rct(207)*v(64)
! B(384) = dA(208)/dV(59)
      b(384) = rct(208)*v(66)
! B(385) = dA(208)/dV(66)
      b(385) = rct(208)*v(59)
! B(386) = dA(209)/dV(60)
      b(386) = rct(209)*v(66)
! B(387) = dA(209)/dV(66)
      b(387) = rct(209)*v(60)
! B(388) = dA(210)/dV(59)
      b(388) = rct(210)*2*v(59)
! B(389) = dA(211)/dV(59)
      b(389) = rct(211)*v(60)
! B(390) = dA(211)/dV(60)
      b(390) = rct(211)*v(59)
! B(391) = dA(212)/dV(60)
      b(391) = rct(212)*2*v(60)
! B(392) = dA(213)/dV(65)
      b(392) = rct(213)*v(70)
! B(393) = dA(213)/dV(70)
      b(393) = rct(213)*v(65)
! B(394) = dA(214)/dV(61)
      b(394) = rct(214)*v(70)
! B(395) = dA(214)/dV(70)
      b(395) = rct(214)*v(61)
! B(396) = dA(215)/dV(52)
      b(396) = rct(215)*v(70)
! B(397) = dA(215)/dV(70)
      b(397) = rct(215)*v(52)
! B(398) = dA(216)/dV(44)
      b(398) = rct(216)*v(70)
! B(399) = dA(216)/dV(70)
      b(399) = rct(216)*v(44)
! B(400) = dA(217)/dV(45)
      b(400) = rct(217)*v(70)
! B(401) = dA(217)/dV(70)
      b(401) = rct(217)*v(45)
! B(402) = dA(218)/dV(36)
      b(402) = rct(218)*v(70)
! B(403) = dA(218)/dV(70)
      b(403) = rct(218)*v(36)
! B(404) = dA(219)/dV(38)
      b(404) = rct(219)*v(70)
! B(405) = dA(219)/dV(70)
      b(405) = rct(219)*v(38)
! B(406) = dA(220)/dV(39)
      b(406) = rct(220)*v(70)
! B(407) = dA(220)/dV(70)
      b(407) = rct(220)*v(39)
! B(408) = dA(221)/dV(50)
      b(408) = rct(221)*v(70)
! B(409) = dA(221)/dV(70)
      b(409) = rct(221)*v(50)
! B(410) = dA(222)/dV(49)
      b(410) = rct(222)*v(70)
! B(411) = dA(222)/dV(70)
      b(411) = rct(222)*v(49)
! B(412) = dA(223)/dV(43)
      b(412) = rct(223)*v(70)
! B(413) = dA(223)/dV(70)
      b(413) = rct(223)*v(43)
! B(414) = dA(224)/dV(46)
      b(414) = rct(224)*v(70)
! B(415) = dA(224)/dV(70)
      b(415) = rct(224)*v(46)
! B(416) = dA(225)/dV(47)
      b(416) = rct(225)*v(70)
! B(417) = dA(225)/dV(70)
      b(417) = rct(225)*v(47)
! B(418) = dA(226)/dV(41)
      b(418) = rct(226)*v(70)
! B(419) = dA(226)/dV(70)
      b(419) = rct(226)*v(41)
! B(420) = dA(227)/dV(66)
      b(420) = rct(227)*v(70)
! B(421) = dA(227)/dV(70)
      b(421) = rct(227)*v(66)
! B(422) = dA(228)/dV(55)
      b(422) = rct(228)*v(70)
! B(423) = dA(228)/dV(70)
      b(423) = rct(228)*v(55)
! B(424) = dA(229)/dV(64)
      b(424) = rct(229)*v(70)
! B(425) = dA(229)/dV(70)
      b(425) = rct(229)*v(64)
! B(426) = dA(230)/dV(59)
      b(426) = rct(230)*v(70)
! B(427) = dA(230)/dV(70)
      b(427) = rct(230)*v(59)
! B(428) = dA(231)/dV(60)
      b(428) = rct(231)*v(70)
! B(429) = dA(231)/dV(70)
      b(429) = rct(231)*v(60)
! B(430) = dA(232)/dV(56)
      b(430) = rct(232)*v(69)
! B(431) = dA(232)/dV(69)
      b(431) = rct(232)*v(56)
! B(432) = dA(233)/dV(56)
      b(432) = rct(233)*v(65)
! B(433) = dA(233)/dV(65)
      b(433) = rct(233)*v(56)
! B(434) = dA(234)/dV(56)
      b(434) = rct(234)*v(66)
! B(435) = dA(234)/dV(66)
      b(435) = rct(234)*v(56)
! B(436) = dA(235)/dV(56)
      b(436) = rct(235)*2*v(56)
! B(437) = dA(236)/dV(56)
      b(437) = rct(236)*v(72)
! B(438) = dA(236)/dV(72)
      b(438) = rct(236)*v(56)
! B(439) = dA(237)/dV(56)
      b(439) = rct(237)*v(70)
! B(440) = dA(237)/dV(70)
      b(440) = rct(237)*v(56)

! Construct the Jacobian terms from B's
! JVS(1) = JacVar_FULL(1,1)
      jvs(1) = 0
! JVS(2) = JacVar_FULL(1,5)
      jvs(2) = b(86)
! JVS(3) = JacVar_FULL(1,67)
      jvs(3) = b(87)
! JVS(4) = JacVar_FULL(2,2)
      jvs(4) = 0
! JVS(5) = JacVar_FULL(2,28)
      jvs(5) = b(88)
! JVS(6) = JacVar_FULL(2,67)
      jvs(6) = b(89)
! JVS(7) = JacVar_FULL(3,3)
      jvs(7) = 0
! JVS(8) = JacVar_FULL(3,12)
      jvs(8) = 0.036*b(98)
! JVS(9) = JacVar_FULL(3,24)
      jvs(9) = 0.37*b(184)
! JVS(10) = JacVar_FULL(3,30)
      jvs(10) = 0.01*b(196)
! JVS(11) = JacVar_FULL(3,33)
      jvs(11) = 0.15*b(190)
! JVS(12) = JacVar_FULL(3,35)

      jvs(12) = 0.11*b(202)
! JVS(13) = JacVar_FULL(3,37)
      jvs(13) = 0.15*b(192)
! JVS(14) = JacVar_FULL(3,51)
      jvs(14) = 0.22*b(198)

! JVS(15) = JacVar_FULL(3,54)
      jvs(15) = 0.11*b(200)
! JVS(16) = JacVar_FULL(3,57)
      jvs(16) = 0.14*b(186)
! JVS(17) = JacVar_FULL(3,63)
      jvs(17) = 0.37*b(185) + 0.14*b(187) + 0.15*b(191) + 0.15*b(193) + &
        0.01*b(197) + 0.22*b(199) + 0.11*b(201) + 0.11*b(203)
! JVS(18) = JacVar_FULL(3,67)
      jvs(18) = 0.036*b(99)
! JVS(19) = JacVar_FULL(4,4)
      jvs(19) = 0
! JVS(20) = JacVar_FULL(4,30)
      jvs(20) = 0.07*b(196)
! JVS(21) = JacVar_FULL(4,36)
      jvs(21) = 0.5*b(361)
! JVS(22) = JacVar_FULL(4,38)
      jvs(22) = 0.499*b(363)
! JVS(23) = JacVar_FULL(4,39)
      jvs(23) = 0.49*b(365)
! JVS(24) = JacVar_FULL(4,44)
      jvs(24) = 0.495*b(357)
! JVS(25) = JacVar_FULL(4,45)
      jvs(25) = 0.495*b(359)
! JVS(26) = JacVar_FULL(4,50)
      jvs(26) = 0.494*b(367)
! JVS(27) = JacVar_FULL(4,51)
      jvs(27) = 0.13*b(198)
! JVS(28) = JacVar_FULL(4,52)
      jvs(28) = 0.499*b(355)
! JVS(29) = JacVar_FULL(4,54)
      jvs(29) = 0.21*b(200)
! JVS(30) = JacVar_FULL(4,55)
      jvs(30) = b(304) + b(345)

! JVS(31) = JacVar_FULL(4,57)
      jvs(31) = 0.1*b(186)
! JVS(32) = JacVar_FULL(4,58)
      jvs(32) = 0.14*b(188)
! JVS(33) = JacVar_FULL(4,59)
      jvs(33) = 0.5*b(384)
! JVS(34) = JacVar_FULL(4,60)
      jvs(34) = 0.484*b(386)
! JVS(35) = JacVar_FULL(4,61)
      jvs(35) = 0.5*b(353)
! JVS(36) = JacVar_FULL(4,63)
      jvs(36) = 0.1*b(187) + 0.14*b(189) + 0.07*b(197) + 0.13*b(199) + &
        0.21*b(201)
! JVS(37) = JacVar_FULL(4,64)
      jvs(37) = 0.5*b(382)
! JVS(38) = JacVar_FULL(4,65)
      jvs(38) = b(341) + b(346)
! JVS(39) = JacVar_FULL(4,66)
      jvs(39) = b(300) + b(342) + 0.5*b(354) + 0.499*b(356) + 0.495*b(358) + &
        0.495*b(360) + 0.5*b(362) + 0.499*b(364) + 0.49*b(366) + &
        0.494*b(368) + 0.5*b(383) + 0.5*b(385) + 0.484*b(387)
! JVS(40) = JacVar_FULL(4,69)
      jvs(40) = b(301) + b(305)

! JVS(41) = JacVar_FULL(5,5)
      jvs(41) = -b(86)
! JVS(42) = JacVar_FULL(5,67)
      jvs(42) = -b(87)
! JVS(43) = JacVar_FULL(6,6)
      jvs(43) = -b(28) - b(30) - b(32)
! JVS(44) = JacVar_FULL(6,63)

      jvs(44) = b(2)
! JVS(45) = JacVar_FULL(7,7)
      jvs(45) = -b(100)
! JVS(46) = JacVar_FULL(7,67)
      jvs(46) = -b(101)
! JVS(47) = JacVar_FULL(8,8)
      jvs(47) = -b(118)
! JVS(48) = JacVar_FULL(8,67)
      jvs(48) = -b(119)
! JVS(49) = JacVar_FULL(9,9)
      jvs(49) = -b(120)
! JVS(50) = JacVar_FULL(9,67)
      jvs(50) = -b(121)
! JVS(51) = JacVar_FULL(10,10)
      jvs(51) = -b(82)
! JVS(52) = JacVar_FULL(10,70)
      jvs(52) = b(80)
! JVS(53) = JacVar_FULL(10,73)
      jvs(53) = b(81)
! JVS(54) = JacVar_FULL(11,11)
      jvs(54) = -b(102)
! JVS(55) = JacVar_FULL(11,67)
      jvs(55) = -b(103)
! JVS(56) = JacVar_FULL(12,12)
      jvs(56) = -b(98)
! JVS(57) = JacVar_FULL(12,67)
      jvs(57) = -b(99)
! JVS(58) = JacVar_FULL(13,13)
      jvs(58) = -b(96)
! JVS(59) = JacVar_FULL(13,57)
      jvs(59) = 0.03*b(186)
! JVS(60) = JacVar_FULL(13,58)
      jvs(60) = 0.06*b(188)
! JVS(61) = JacVar_FULL(13,63)
      jvs(61) = 0.03*b(187) + 0.06*b(189)
! JVS(62) = JacVar_FULL(13,67)
      jvs(62) = -b(97)
! JVS(63) = JacVar_FULL(14,14)
      jvs(63) = -b(94)
! JVS(64) = JacVar_FULL(14,57)
      jvs(64) = 0.06*b(186)
! JVS(65) = JacVar_FULL(14,58)
      jvs(65) = 0.07*b(188)
! JVS(66) = JacVar_FULL(14,63)
      jvs(66) = 0.06*b(187) + 0.07*b(189)
! JVS(67) = JacVar_FULL(14,67)
      jvs(67) = -b(95)
! JVS(68) = JacVar_FULL(15,15)
      jvs(68) = -b(140)
! JVS(69) = JacVar_FULL(15,54)
      jvs(69) = 0.35*b(138)
! JVS(70) = JacVar_FULL(15,67)
      jvs(70) = 0.35*b(139) - b(141)
! JVS(71) = JacVar_FULL(16,16)
      jvs(71) = -b(6) - b(61) - b(68)
! JVS(72) = JacVar_FULL(16,67)
      jvs(72) = -b(69)
! JVS(73) = JacVar_FULL(16,69)
      jvs(73) = b(59)
! JVS(74) = JacVar_FULL(16,73)
      jvs(74) = b(60)
! JVS(75) = JacVar_FULL(17,17)
      jvs(75) = -b(13) - b(142)
! JVS(76) = JacVar_FULL(17,65)
      jvs(76) = b(270)
! JVS(77) = JacVar_FULL(17,67)
      jvs(77) = -b(143)
! JVS(78) = JacVar_FULL(17,69)
      jvs(78) = b(271)
! JVS(79) = JacVar_FULL(18,18)
      jvs(79) = -b(4) - b(64)
! JVS(80) = JacVar_FULL(18,21)
      jvs(80) = b(208)
! JVS(81) = JacVar_FULL(18,22)
      jvs(81) = b(214)
! JVS(82) = JacVar_FULL(18,25)
      jvs(82) = b(220)
! JVS(83) = JacVar_FULL(18,67)
      jvs(83) = b(51) - b(65)
! JVS(84) = JacVar_FULL(18,72)
      jvs(84) = b(52)
! JVS(85) = JacVar_FULL(18,73)

      jvs(85) = b(209) + b(215) + b(221)
! JVS(86) = JacVar_FULL(19,19)
      jvs(86) = -b(9) - b(40)
! JVS(87) = JacVar_FULL(19,29)
      jvs(87) = 0.02*b(194)
! JVS(88) = JacVar_FULL(19,30)
      jvs(88) = 0.02*b(196)
! JVS(89) = JacVar_FULL(19,33)
      jvs(89) = 0.001*b(190)
! JVS(90) = JacVar_FULL(19,37)
      jvs(90) = 0.001*b(192)
! JVS(91) = JacVar_FULL(19,57)
      jvs(91) = 0.006*b(186)
! JVS(92) = JacVar_FULL(19,58)
      jvs(92) = 0.011*b(188)
! JVS(93) = JacVar_FULL(19,63)
      jvs(93) = 0.006*b(187) + 0.011*b(189) + 0.001*b(191) + 0.001*b(193) + &
        0.02*b(195) + 0.02*b(197)
! JVS(94) = JacVar_FULL(19,67)
      jvs(94) = -b(41)
! JVS(95) = JacVar_FULL(19,69)
      jvs(95) = b(42) + b(43)
! JVS(96) = JacVar_FULL(20,20)
      jvs(96) = -b(204) - b(206)
! JVS(97) = JacVar_FULL(20,32)
      jvs(97) = 0.1*b(122) + b(166)
! JVS(98) = JacVar_FULL(20,67)
      jvs(98) = 0.1*b(123)
! JVS(99) = JacVar_FULL(20,69)
      jvs(99) = -b(207)
! JVS(100) = JacVar_FULL(20,70)
      jvs(100) = b(167)
! JVS(101) = JacVar_FULL(20,73)
      jvs(101) = -b(205)
! JVS(102) = JacVar_FULL(21,8)
      jvs(102) = 0.9*b(118)
! JVS(103) = JacVar_FULL(21,21)
      jvs(103) = -b(208) - b(210) - b(212)

! JVS(104) = JacVar_FULL(21,63)
      jvs(104) = -b(213)
! JVS(105) = JacVar_FULL(21,67)
      jvs(105) = 0.9*b(119)
! JVS(106) = JacVar_FULL(21,73)
      jvs(106) = -b(209)
! JVS(107) = JacVar_FULL(22,9)
      jvs(107) = 0.9*b(120)
! JVS(108) = JacVar_FULL(22,22)
      jvs(108) = -b(214) - b(216) - b(218)

! JVS(109) = JacVar_FULL(22,63)
      jvs(109) = -b(219)
! JVS(110) = JacVar_FULL(22,67)
      jvs(110) = 0.9*b(121)
! JVS(111) = JacVar_FULL(22,73)
      jvs(111) = -b(215)
! JVS(112) = JacVar_FULL(23,11)
      jvs(112) = 0.024*b(102)
! JVS(113) = JacVar_FULL(23,23)
      jvs(113) = -b(23) - b(130)
! JVS(114) = JacVar_FULL(23,35)
      jvs(114) = 0.6*b(150)
! JVS(115) = JacVar_FULL(23,51)
      jvs(115) = 0.41*b(136)
! JVS(116) = JacVar_FULL(23,64)
      jvs(116) = 0.3*b(347)
! JVS(117) = JacVar_FULL(23,65)
      jvs(117) = 0.3*b(348)
! JVS(118) = JacVar_FULL(23,67)
      jvs(118) = 0.024*b(103) - b(131) + 0.41*b(137) + 0.6*b(151)
! JVS(119) = JacVar_FULL(24,24)
      jvs(119) = -b(104) - b(168) - b(184)
! JVS(120) = JacVar_FULL(24,63)
      jvs(120) = -b(185)
! JVS(121) = JacVar_FULL(24,67)
      jvs(121) = -b(105)
! JVS(122) = JacVar_FULL(24,70)
      jvs(122) = -b(169)
! JVS(123) = JacVar_FULL(25,25)
      jvs(123) = -b(220) - b(222) - b(224)
! JVS(124) = JacVar_FULL(25,32)
      jvs(124) = 0.85*b(122)
! JVS(125) = JacVar_FULL(25,63)
      jvs(125) = -b(225)
! JVS(126) = JacVar_FULL(25,67)
      jvs(126) = 0.85*b(123)
! JVS(127) = JacVar_FULL(25,73)
      jvs(127) = -b(221)
! JVS(128) = JacVar_FULL(26,26)
      jvs(128) = -b(15) - b(146)
! JVS(129) = JacVar_FULL(26,54)
      jvs(129) = 0.11*b(200)
! JVS(130) = JacVar_FULL(26,63)
      jvs(130) = 0.11*b(201)
! JVS(131) = JacVar_FULL(26,66)
      jvs(131) = b(298)
! JVS(132) = JacVar_FULL(26,67)
      jvs(132) = -b(147)
! JVS(133) = JacVar_FULL(26,69)
      jvs(133) = b(299)
! JVS(134) = JacVar_FULL(27,27)
      jvs(134) = -b(5) - b(66)
! JVS(135) = JacVar_FULL(27,32)
      jvs(135) = b(166)
! JVS(136) = JacVar_FULL(27,34)
      jvs(136) = b(158)
! JVS(137) = JacVar_FULL(27,40)
      jvs(137) = b(160)
! JVS(138) = JacVar_FULL(27,48)
      jvs(138) = b(154)
! JVS(139) = JacVar_FULL(27,51)
      jvs(139) = 0.2*b(162)
! JVS(140) = JacVar_FULL(27,53)
      jvs(140) = b(156)
! JVS(141) = JacVar_FULL(27,54)
      jvs(141) = 0.5*b(164)
! JVS(142) = JacVar_FULL(27,67)
      jvs(142) = b(53) - b(67)
! JVS(143) = JacVar_FULL(27,69)
      jvs(143) = 0.3*b(62)
! JVS(144) = JacVar_FULL(27,70)
      jvs(144) = 0.3*b(63) + b(155) + b(157) + b(159) + b(161) + 0.2*b(163) + &
        0.5*b(165) + b(167)
! JVS(145) = JacVar_FULL(27,73)
      jvs(145) = b(54)
! JVS(146) = JacVar_FULL(28,12)

      jvs(146) = 0.036*b(98)
! JVS(147) = JacVar_FULL(28,24)
      jvs(147) = 0.43*b(184)
! JVS(148) = JacVar_FULL(28,28)
      jvs(148) = -b(88)
! JVS(149) = JacVar_FULL(28,29)
      jvs(149) = 0.14*b(194)
! JVS(150) = JacVar_FULL(28,30)
      jvs(150) = 0.14*b(196)
! JVS(151) = JacVar_FULL(28,33)
      jvs(151) = 0.36*b(190)
! JVS(152) = JacVar_FULL(28,34)
      jvs(152) = 1.87*b(17) + 1.55*b(18) + 2*b(132) + 2*b(158)
! JVS(153) = JacVar_FULL(28,35)
      jvs(153) = 0.13*b(202)
! JVS(154) = JacVar_FULL(28,37)
      jvs(154) = 0.01*b(90) + 0.36*b(192)
! JVS(155) = JacVar_FULL(28,40)
      jvs(155) = b(19) + b(134) + b(160)
! JVS(156) = JacVar_FULL(28,48)
      jvs(156) = b(10) + b(11) + b(124) + b(154)
! JVS(157) = JacVar_FULL(28,51)
      jvs(157) = b(22) + 0.41*b(136) + 0.8*b(162) + 0.54*b(198)
! JVS(158) = JacVar_FULL(28,53)
      jvs(158) = b(12)
! JVS(159) = JacVar_FULL(28,54)
      jvs(159) = 0.66*b(200)
! JVS(160) = JacVar_FULL(28,57)
      jvs(160) = 0.37*b(186)
! JVS(161) = JacVar_FULL(28,58)
      jvs(161) = 0.3*b(188)
! JVS(162) = JacVar_FULL(28,62)
      jvs(162) = 0.01*b(91)
! JVS(163) = JacVar_FULL(28,63)
      jvs(163) = 0.43*b(185) + 0.37*b(187) + 0.3*b(189) + 0.36*b(191) + &
        0.36*b(193) + 0.14*b(195) + 0.14*b(197) + 0.54*b(199) + 0.66*b(201) + &
        0.13*b(203)
! JVS(164) = JacVar_FULL(28,67)
      jvs(164) = -b(89) + 0.036*b(99) + b(125) + 2*b(133) + b(135) + &
        0.41*b(137)
! JVS(165) = JacVar_FULL(28,70)
      jvs(165) = b(155) + 2*b(159) + b(161) + 0.8*b(163)
! JVS(166) = JacVar_FULL(29,29)
      jvs(166) = -b(114) - b(178) - b(194)
! JVS(167) = JacVar_FULL(29,63)
      jvs(167) = -b(195)
! JVS(168) = JacVar_FULL(29,67)
      jvs(168) = -b(115)
! JVS(169) = JacVar_FULL(29,70)
      jvs(169) = -b(179)
! JVS(170) = JacVar_FULL(30,30)
      jvs(170) = -b(116) - b(180) - b(196)
! JVS(171) = JacVar_FULL(30,63)
      jvs(171) = -b(197)
! JVS(172) = JacVar_FULL(30,67)
      jvs(172) = -b(117)
! JVS(173) = JacVar_FULL(30,70)
      jvs(173) = -b(181)
! JVS(174) = JacVar_FULL(31,31)
      jvs(174) = -b(148) - b(228)
! JVS(175) = JacVar_FULL(31,35)
      jvs(175) = 0.4*b(150) + 0.4*b(182) + 0.3*b(202)
! JVS(176) = JacVar_FULL(31,63)
      jvs(176) = 0.3*b(203)
! JVS(177) = JacVar_FULL(31,66)
      jvs(177) = b(226)
! JVS(178) = JacVar_FULL(31,67)
      jvs(178) = -b(149) + 0.4*b(151)
! JVS(179) = JacVar_FULL(31,70)
      jvs(179) = 0.4*b(183)
! JVS(180) = JacVar_FULL(31,73)
      jvs(180) = b(227)
! JVS(181) = JacVar_FULL(32,20)
      jvs(181) = 0.1*b(204) + b(206)
! JVS(182) = JacVar_FULL(32,21)
      jvs(182) = b(208) + 0.02*b(210) + b(212)
! JVS(183) = JacVar_FULL(32,22)
      jvs(183) = b(214) + 0.02*b(216) + b(218)
! JVS(184) = JacVar_FULL(32,25)

      jvs(184) = b(220) + 0.02*b(222) + b(224)
! JVS(185) = JacVar_FULL(32,32)
      jvs(185) = -b(122) - b(166)
! JVS(186) = JacVar_FULL(32,63)
      jvs(186) = b(213) + b(219) + b(225)
! JVS(187) = JacVar_FULL(32,67)
      jvs(187) = -b(123)
! JVS(188) = JacVar_FULL(32,69)
      jvs(188) = b(207)
! JVS(189) = JacVar_FULL(32,70)
      jvs(189) = -b(167)
! JVS(190) = JacVar_FULL(32,73)
      jvs(190) = 0.1*b(205) + b(209) + b(215) + b(221)
! JVS(191) = JacVar_FULL(33,33)
      jvs(191) = -b(110) - b(174) - b(190)
! JVS(192) = JacVar_FULL(33,63)
      jvs(192) = -b(191)
! JVS(193) = JacVar_FULL(33,67)
      jvs(193) = -b(111)
! JVS(194) = JacVar_FULL(33,70)
      jvs(194) = -b(175)
! JVS(195) = JacVar_FULL(34,12)
      jvs(195) = 0.036*b(98)
! JVS(196) = JacVar_FULL(34,34)
      jvs(196) = -b(17) - b(18) - b(132) - b(158)
! JVS(197) = JacVar_FULL(34,41)
      jvs(197) = b(258) + b(337) + b(377) + b(418)
! JVS(198) = JacVar_FULL(34,46)
      jvs(198) = 1.2*b(254) + 0.65*b(333) + 0.65*b(373) + 1.3*b(414)
! JVS(199) = JacVar_FULL(34,47)
      jvs(199) = 0.35*b(256) + 0.37*b(335) + 0.37*b(375) + 0.74*b(416)
! JVS(200) = JacVar_FULL(34,52)
      jvs(200) = 0.063*b(236) + 0.119*b(315) + 0.1*b(355) + 0.063*b(396)
! JVS(201) = JacVar_FULL(34,54)
      jvs(201) = 0.15*b(138) + 0.25*b(164) + 0.5*b(200)
! JVS(202) = JacVar_FULL(34,63)
      jvs(202) = 0.5*b(201)
! JVS(203) = JacVar_FULL(34,65)
      jvs(203) = 0.119*b(316) + 0.65*b(334) + 0.37*b(336) + b(338)
! JVS(204) = JacVar_FULL(34,66)
      jvs(204) = 0.1*b(356) + 0.65*b(374) + 0.37*b(376) + b(378)
! JVS(205) = JacVar_FULL(34,67)
      jvs(205) = 0.036*b(99) - b(133) + 0.15*b(139)
! JVS(206) = JacVar_FULL(34,70)
      jvs(206) = -b(159) + 0.25*b(165) + 0.063*b(397) + 1.3*b(415) + &
        0.74*b(417) + b(419)
! JVS(207) = JacVar_FULL(34,72)
      jvs(207) = 0.063*b(237) + 1.2*b(255) + 0.35*b(257) + b(259)
! JVS(208) = JacVar_FULL(35,35)
      jvs(208) = -b(150) - b(182) - b(202) - b(231)
! JVS(209) = JacVar_FULL(35,55)
      jvs(209) = b(229)
! JVS(210) = JacVar_FULL(35,63)
      jvs(210) = -b(203)
! JVS(211) = JacVar_FULL(35,67)
      jvs(211) = -b(151)
! JVS(212) = JacVar_FULL(35,70)
      jvs(212) = -b(183)
! JVS(213) = JacVar_FULL(35,73)
      jvs(213) = b(230)
! JVS(214) = JacVar_FULL(36,24)
      jvs(214) = b(104)
! JVS(215) = JacVar_FULL(36,36)
      jvs(215) = -b(242) - b(280) - b(321) - b(361) - b(402)
! JVS(216) = JacVar_FULL(36,63)

      jvs(216) = 0
! JVS(217) = JacVar_FULL(36,65)
      jvs(217) = -b(322)
! JVS(218) = JacVar_FULL(36,66)
      jvs(218) = -b(362)
! JVS(219) = JacVar_FULL(36,67)
      jvs(219) = b(105)
! JVS(220) = JacVar_FULL(36,69)
      jvs(220) = -b(281)
! JVS(221) = JacVar_FULL(36,70)
      jvs(221) = -b(403)
! JVS(222) = JacVar_FULL(36,72)
      jvs(222) = -b(243)
! JVS(223) = JacVar_FULL(37,37)
      jvs(223) = -b(90) - b(112) - b(176) - b(192)
! JVS(224) = JacVar_FULL(37,62)
      jvs(224) = -b(91)
! JVS(225) = JacVar_FULL(37,63)
      jvs(225) = -b(193)
! JVS(226) = JacVar_FULL(37,67)
      jvs(226) = -b(113)
! JVS(227) = JacVar_FULL(37,70)
      jvs(227) = -b(177)
! JVS(228) = JacVar_FULL(38,38)
      jvs(228) = -b(244) - b(282) - b(323) - b(363) - b(404)
! JVS(229) = JacVar_FULL(38,57)
      jvs(229) = b(106)
! JVS(230) = JacVar_FULL(38,65)
      jvs(230) = -b(324)

! JVS(231) = JacVar_FULL(38,66)
      jvs(231) = -b(364)
! JVS(232) = JacVar_FULL(38,67)
      jvs(232) = b(107)
! JVS(233) = JacVar_FULL(38,69)
      jvs(233) = -b(283)
! JVS(234) = JacVar_FULL(38,70)
      jvs(234) = -b(405)
! JVS(235) = JacVar_FULL(38,72)
      jvs(235) = -b(245)
! JVS(236) = JacVar_FULL(39,39)
      jvs(236) = -b(246) - b(284) - b(325) - b(365) - b(406)
! JVS(237) = JacVar_FULL(39,58)
      jvs(237) = b(108)
! JVS(238) = JacVar_FULL(39,65)
      jvs(238) = -b(326)
! JVS(239) = JacVar_FULL(39,66)

      jvs(239) = -b(366)
! JVS(240) = JacVar_FULL(39,67)
      jvs(240) = b(109)
! JVS(241) = JacVar_FULL(39,69)
      jvs(241) = -b(285)
! JVS(242) = JacVar_FULL(39,70)
      jvs(242) = -b(407)
! JVS(243) = JacVar_FULL(39,72)
      jvs(243) = -b(247)

! JVS(244) = JacVar_FULL(40,23)
      jvs(244) = b(130)
! JVS(245) = JacVar_FULL(40,35)
      jvs(245) = 0
! JVS(246) = JacVar_FULL(40,40)
      jvs(246) = -b(19) - b(134) - b(160)
! JVS(247) = JacVar_FULL(40,41)

      jvs(247) = b(258) + b(337) + b(377) + b(418)
! JVS(248) = JacVar_FULL(40,46)
      jvs(248) = 0.65*b(254) + 0.35*b(333) + 0.35*b(373) + 0.7*b(414)

! JVS(249) = JacVar_FULL(40,47)
      jvs(249) = 0.6*b(256) + 0.63*b(335) + 0.63*b(375) + 1.26*b(416)
! JVS(250) = JacVar_FULL(40,51)
      jvs(250) = 0.08*b(136) + 0.6*b(198)
! JVS(251) = JacVar_FULL(40,52)
      jvs(251) = 0.005*b(315) + 0.004*b(355)
! JVS(252) = JacVar_FULL(40,54)
      jvs(252) = 0.15*b(138) + 0.25*b(164) + 0.62*b(200)
! JVS(253) = JacVar_FULL(40,55)
      jvs(253) = 0
! JVS(254) = JacVar_FULL(40,63)
      jvs(254) = 0.6*b(199) + 0.62*b(201)
! JVS(255) = JacVar_FULL(40,64)
      jvs(255) = 0.54*b(264) + 0.4*b(347) + 0.54*b(382) + 0.54*b(424)
! JVS(256) = JacVar_FULL(40,65)
      jvs(256) = 0.005*b(316) + 0.35*b(334) + 0.63*b(336) + b(338) + &
        0.4*b(348)
! JVS(257) = JacVar_FULL(40,66)
      jvs(257) = 0.004*b(356) + 0.35*b(374) + 0.63*b(376) + b(378) + &
        0.54*b(383)
! JVS(258) = JacVar_FULL(40,67)
      jvs(258) = b(131) - b(135) + 0.08*b(137) + 0.15*b(139)
! JVS(259) = JacVar_FULL(40,70)
      jvs(259) = -b(161) + 0.25*b(165) + 0.7*b(415) + 1.26*b(417) + b(419) + &
        0.54*b(425)
! JVS(260) = JacVar_FULL(40,72)
      jvs(260) = 0.65*b(255) + 0.6*b(257) + b(259) + 0.54*b(265)
! JVS(261) = JacVar_FULL(40,73)
      jvs(261) = 0
! JVS(262) = JacVar_FULL(41,25)
      jvs(262) = 0.98*b(222)
! JVS(263) = JacVar_FULL(41,32)
      jvs(263) = 0
! JVS(264) = JacVar_FULL(41,41)
      jvs(264) = -b(258) - b(296) - b(337) - b(377) - b(418)
! JVS(265) = JacVar_FULL(41,63)
      jvs(265) = 0
! JVS(266) = JacVar_FULL(41,65)
      jvs(266) = -b(338)
! JVS(267) = JacVar_FULL(41,66)
      jvs(267) = -b(378)
! JVS(268) = JacVar_FULL(41,67)
      jvs(268) = 0
! JVS(269) = JacVar_FULL(41,69)
      jvs(269) = -b(297)
! JVS(270) = JacVar_FULL(41,70)
      jvs(270) = -b(419)
! JVS(271) = JacVar_FULL(41,72)
      jvs(271) = -b(259)
! JVS(272) = JacVar_FULL(41,73)
      jvs(272) = 0
! JVS(273) = JacVar_FULL(42,7)
      jvs(273) = 0.25*b(100)
! JVS(274) = JacVar_FULL(42,15)
      jvs(274) = 0.12*b(140)
! JVS(275) = JacVar_FULL(42,29)
      jvs(275) = 0.53*b(194)
! JVS(276) = JacVar_FULL(42,38)
      jvs(276) = 0.06*b(244) + 0.081*b(323) + 0.141*b(363) + 0.06*b(404)
! JVS(277) = JacVar_FULL(42,39)
      jvs(277) = 0.29*b(246) + 0.313*b(325) + 0.569*b(365) + 0.29*b(406)
! JVS(278) = JacVar_FULL(42,42)
      jvs(278) = -b(16) - b(128)
! JVS(279) = JacVar_FULL(42,44)
      jvs(279) = 0.722*b(238) + 0.24*b(317) + 0.33*b(357) + 0.828*b(398)
! JVS(280) = JacVar_FULL(42,45)
      jvs(280) = 0.642*b(240) + 0.419*b(319) + 0.581*b(359) + 0.88*b(400)
! JVS(281) = JacVar_FULL(42,49)
      jvs(281) = 0.8*b(250) + b(329) + b(369) + b(410)
! JVS(282) = JacVar_FULL(42,52)
      jvs(282) = 0.623*b(236) + 0.018*b(315) + 0.127*b(355) + 0.67*b(396)
! JVS(283) = JacVar_FULL(42,54)
      jvs(283) = 0.03*b(164)
! JVS(284) = JacVar_FULL(42,57)
      jvs(284) = 0.03*b(186)
! JVS(285) = JacVar_FULL(42,58)
      jvs(285) = 0.16*b(188)
! JVS(286) = JacVar_FULL(42,59)
      jvs(286) = 0.149*b(389)
! JVS(287) = JacVar_FULL(42,60)
      jvs(287) = 0.464*b(268) + 0.149*b(351) + 0.167*b(386) + 0.149*b(390) + &
        0.285*b(391) + 0.469*b(428)
! JVS(288) = JacVar_FULL(42,63)
      jvs(288) = 0.03*b(187) + 0.16*b(189) + 0.53*b(195)
! JVS(289) = JacVar_FULL(42,64)
      jvs(289) = 0.11*b(382)
! JVS(290) = JacVar_FULL(42,65)
      jvs(290) = 0.018*b(316) + 0.24*b(318) + 0.419*b(320) + 0.081*b(324) + &
        0.313*b(326) + b(330) + 0.149*b(352)
! JVS(291) = JacVar_FULL(42,66)
      jvs(291) = 0.127*b(356) + 0.33*b(358) + 0.581*b(360) + 0.141*b(364) + &
        0.569*b(366) + b(370) + 0.11*b(383) + 0.167*b(387)
! JVS(292) = JacVar_FULL(42,67)
      jvs(292) = 0.25*b(101) - b(129) + 0.12*b(141) + 0.41*b(144)
! JVS(293) = JacVar_FULL(42,68)
      jvs(293) = 0.8*b(21)
! JVS(294) = JacVar_FULL(42,69)
      jvs(294) = 0
! JVS(295) = JacVar_FULL(42,70)
      jvs(295) = 0.03*b(165) + 0.67*b(397) + 0.828*b(399) + 0.88*b(401) + &
        0.06*b(405) + 0.29*b(407) + b(411) + 0.469*b(429)
! JVS(296) = JacVar_FULL(42,71)
      jvs(296) = 0.41*b(145)
! JVS(297) = JacVar_FULL(42,72)
      jvs(297) = 0.623*b(237) + 0.722*b(239) + 0.642*b(241) + 0.06*b(245) + &
        0.29*b(247) + 0.8*b(251) + 0.464*b(269)
! JVS(298) = JacVar_FULL(43,30)
      jvs(298) = b(116)
! JVS(299) = JacVar_FULL(43,43)
      jvs(299) = -b(252) - b(290) - b(331) - b(371) - b(412)
! JVS(300) = JacVar_FULL(43,63)
      jvs(300) = 0
! JVS(301) = JacVar_FULL(43,65)
      jvs(301) = -b(332)
! JVS(302) = JacVar_FULL(43,66)
      jvs(302) = -b(372)
! JVS(303) = JacVar_FULL(43,67)
      jvs(303) = b(117)
! JVS(304) = JacVar_FULL(43,69)
      jvs(304) = -b(291)
! JVS(305) = JacVar_FULL(43,70)
      jvs(305) = -b(413)
! JVS(306) = JacVar_FULL(43,72)
      jvs(306) = -b(253)
! JVS(307) = JacVar_FULL(44,7)
      jvs(307) = 0.75*b(100)
! JVS(308) = JacVar_FULL(44,44)
      jvs(308) = -b(238) - b(276) - b(317) - b(357) - b(398)
! JVS(309) = JacVar_FULL(44,65)
      jvs(309) = -b(318)
! JVS(310) = JacVar_FULL(44,66)
      jvs(310) = -b(358)
! JVS(311) = JacVar_FULL(44,67)
      jvs(311) = 0.75*b(101)
! JVS(312) = JacVar_FULL(44,69)
      jvs(312) = -b(277)
! JVS(313) = JacVar_FULL(44,70)
      jvs(313) = -b(399)
! JVS(314) = JacVar_FULL(44,72)
      jvs(314) = -b(239)
! JVS(315) = JacVar_FULL(45,11)
      jvs(315) = 0.951*b(102)
! JVS(316) = JacVar_FULL(45,45)
      jvs(316) = -b(240) - b(278) - b(319) - b(359) - b(400)
! JVS(317) = JacVar_FULL(45,65)
      jvs(317) = -b(320)
! JVS(318) = JacVar_FULL(45,66)
      jvs(318) = -b(360)
! JVS(319) = JacVar_FULL(45,67)
      jvs(319) = 0.951*b(103)
! JVS(320) = JacVar_FULL(45,69)
      jvs(320) = -b(279)
! JVS(321) = JacVar_FULL(45,70)
      jvs(321) = -b(401)
! JVS(322) = JacVar_FULL(45,72)
      jvs(322) = -b(241)
! JVS(323) = JacVar_FULL(46,21)
      jvs(323) = 0.98*b(210)
! JVS(324) = JacVar_FULL(46,46)
      jvs(324) = -b(254) - b(292) - b(333) - b(373) - b(414)
! JVS(325) = JacVar_FULL(46,63)
      jvs(325) = 0
! JVS(326) = JacVar_FULL(46,65)
      jvs(326) = -b(334)
! JVS(327) = JacVar_FULL(46,66)
      jvs(327) = -b(374)
! JVS(328) = JacVar_FULL(46,67)
      jvs(328) = 0
! JVS(329) = JacVar_FULL(46,69)
      jvs(329) = -b(293)
! JVS(330) = JacVar_FULL(46,70)
      jvs(330) = -b(415)
! JVS(331) = JacVar_FULL(46,72)
      jvs(331) = -b(255)
! JVS(332) = JacVar_FULL(46,73)
      jvs(332) = 0
! JVS(333) = JacVar_FULL(47,22)
      jvs(333) = 0.98*b(216)
! JVS(334) = JacVar_FULL(47,47)
      jvs(334) = -b(256) - b(294) - b(335) - b(375) - b(416)
! JVS(335) = JacVar_FULL(47,63)
      jvs(335) = 0
! JVS(336) = JacVar_FULL(47,65)
      jvs(336) = -b(336)
! JVS(337) = JacVar_FULL(47,66)
      jvs(337) = -b(376)
! JVS(338) = JacVar_FULL(47,67)
      jvs(338) = 0
! JVS(339) = JacVar_FULL(47,69)

      jvs(339) = -b(295)
! JVS(340) = JacVar_FULL(47,70)
      jvs(340) = -b(417)
! JVS(341) = JacVar_FULL(47,72)
      jvs(341) = -b(257)
! JVS(342) = JacVar_FULL(47,73)
      jvs(342) = 0
! JVS(343) = JacVar_FULL(48,12)
      jvs(343) = 0.01*b(98)
! JVS(344) = JacVar_FULL(48,17)
      jvs(344) = b(13) + 0.35*b(142)
! JVS(345) = JacVar_FULL(48,23)
      jvs(345) = b(23)
! JVS(346) = JacVar_FULL(48,24)
      jvs(346) = b(184)
! JVS(347) = JacVar_FULL(48,26)
      jvs(347) = 0.35*b(146)
! JVS(348) = JacVar_FULL(48,30)
      jvs(348) = 0.04*b(196)
! JVS(349) = JacVar_FULL(48,31)
      jvs(349) = b(148)
! JVS(350) = JacVar_FULL(48,33)
      jvs(350) = 0.9*b(190)
! JVS(351) = JacVar_FULL(48,34)
      jvs(351) = 0.13*b(17) + 0.45*b(18)
! JVS(352) = JacVar_FULL(48,35)
      jvs(352) = 0.4*b(150) + 0.4*b(182) + 0.7*b(202)
! JVS(353) = JacVar_FULL(48,36)
      jvs(353) = 1.6*b(242) + 1.55*b(321) + 0.8*b(361) + 1.6*b(402)
! JVS(354) = JacVar_FULL(48,37)
      jvs(354) = 0.05*b(90) + 0.9*b(192)
! JVS(355) = JacVar_FULL(48,38)
      jvs(355) = b(244) + 1.25*b(323) + 0.501*b(363) + b(404)
! JVS(356) = JacVar_FULL(48,39)
      jvs(356) = 0.755*b(325)
! JVS(357) = JacVar_FULL(48,41)
      jvs(357) = b(337)
! JVS(358) = JacVar_FULL(48,43)
      jvs(358) = 0.25*b(252) + 1.4*b(331) + 0.4*b(371) + 0.4*b(412)
! JVS(359) = JacVar_FULL(48,44)
      jvs(359) = 0.021*b(238) + 0.829*b(317) + 0.076*b(357) + 0.021*b(398)
! JVS(360) = JacVar_FULL(48,45)
      jvs(360) = 0.753*b(319)
! JVS(361) = JacVar_FULL(48,46)
      jvs(361) = b(333)

! JVS(362) = JacVar_FULL(48,47)
      jvs(362) = b(335)
! JVS(363) = JacVar_FULL(48,48)
      jvs(363) = -b(10) - b(11) - b(124) - b(154)
! JVS(364) = JacVar_FULL(48,49)
      jvs(364) = b(329)
! JVS(365) = JacVar_FULL(48,50)
      jvs(365) = 0.606*b(248) + 1.09*b(327) + 0.34*b(367) + 0.686*b(408)
! JVS(366) = JacVar_FULL(48,51)
      jvs(366) = b(22) + 0.08*b(136) + 0.4*b(198)
! JVS(367) = JacVar_FULL(48,52)
      jvs(367) = 0.047*b(236) + 0.81*b(315) + 0.091*b(355) + 0.048*b(396)
! JVS(368) = JacVar_FULL(48,54)
      jvs(368) = 0
! JVS(369) = JacVar_FULL(48,55)
      jvs(369) = b(262) + 2*b(343) + b(345) + b(380) + b(422)
! JVS(370) = JacVar_FULL(48,56)
      jvs(370) = b(432)
! JVS(371) = JacVar_FULL(48,57)
      jvs(371) = 0.64*b(186)
! JVS(372) = JacVar_FULL(48,58)
      jvs(372) = 0.02*b(188)
! JVS(373) = JacVar_FULL(48,59)
      jvs(373) = 0.75*b(349) + 0.202*b(389)
! JVS(374) = JacVar_FULL(48,60)
      jvs(374) = 0.287*b(268) + 0.96*b(351) + 0.207*b(386) + 0.202*b(390) + &
        0.504*b(391) + 0.28*b(428)
! JVS(375) = JacVar_FULL(48,61)
      jvs(375) = 0.75*b(313)
! JVS(376) = JacVar_FULL(48,62)
      jvs(376) = 0.05*b(91)
! JVS(377) = JacVar_FULL(48,63)
      jvs(377) = b(185) + 0.64*b(187) + 0.02*b(189) + 0.9*b(191) + &
        0.9*b(193) + 0.04*b(197) + 0.4*b(199) + 0.7*b(203)
! JVS(378) = JacVar_FULL(48,64)
      jvs(378) = 0.75*b(347)
! JVS(379) = JacVar_FULL(48,65)
      jvs(379) = b(232) + 1.33*b(312) + 0.75*b(314) + 0.81*b(316) + 0.829 & 
        *b(318) + 0.753*b(320) + 1.55*b(322) + 1.25*b(324) + 0.755*b(326) + &
        1.09*b(328) + b(330) + 1.4*b(332) + b(334) + b(336) + b(338) + &
        b(339) + b(341) + 2*b(344) + b(346) + 0.75*b(348) + 0.75*b(350) + &
        0.96*b(352) + b(392) + b(433)
! JVS(380) = JacVar_FULL(48,66)
      jvs(380) = b(340) + b(342) + 0.091*b(356) + 0.076*b(358) + 0.8*b(362) + &
        0.501*b(364) + 0.34*b(368) + 0.4*b(372) + b(381) + 0.207*b(387)
! JVS(381) = JacVar_FULL(48,67)
      jvs(381) = 0.01*b(99) - b(125) + 0.08*b(137) + 0.35*b(143) + &
        0.35*b(147) + b(149) + 0.4*b(151)
! JVS(382) = JacVar_FULL(48,69)
      jvs(382) = 0
! JVS(383) = JacVar_FULL(48,70)
      jvs(383) = -b(155) + 0.4*b(183) + b(393) + 0.048*b(397) + 0.021*b(399) + &
        1.6*b(403) + b(405) + 0.686*b(409) + 0.4*b(413) + b(423) + 0.28*b(429)
! JVS(384) = JacVar_FULL(48,72)
      jvs(384) = b(233) + 0.047*b(237) + 0.021*b(239) + 1.6*b(243) + b(245) + &
        0.606*b(249) + 0.25*b(253) + b(263) + 0.287*b(269)
! JVS(385) = JacVar_FULL(48,73)
      jvs(385) = 0
! JVS(386) = JacVar_FULL(49,29)
      jvs(386) = b(114)
! JVS(387) = JacVar_FULL(49,49)
      jvs(387) = -b(250) - b(288) - b(329) - b(369) - b(410)
! JVS(388) = JacVar_FULL(49,63)
      jvs(388) = 0
! JVS(389) = JacVar_FULL(49,65)
      jvs(389) = -b(330)
! JVS(390) = JacVar_FULL(49,66)
      jvs(390) = -b(370)
! JVS(391) = JacVar_FULL(49,67)
      jvs(391) = b(115)
! JVS(392) = JacVar_FULL(49,69)
      jvs(392) = -b(289)
! JVS(393) = JacVar_FULL(49,70)
      jvs(393) = -b(411)
! JVS(394) = JacVar_FULL(49,72)
      jvs(394) = -b(251)
! JVS(395) = JacVar_FULL(50,33)
      jvs(395) = b(110)
! JVS(396) = JacVar_FULL(50,37)
      jvs(396) = b(112)
! JVS(397) = JacVar_FULL(50,50)
      jvs(397) = -b(248) - b(286) - b(327) - b(367) - b(408)
! JVS(398) = JacVar_FULL(50,62)
      jvs(398) = 0
! JVS(399) = JacVar_FULL(50,63)
      jvs(399) = 0
! JVS(400) = JacVar_FULL(50,65)
      jvs(400) = -b(328)
! JVS(401) = JacVar_FULL(50,66)
      jvs(401) = -b(368)
! JVS(402) = JacVar_FULL(50,67)
      jvs(402) = b(111) + b(113)
! JVS(403) = JacVar_FULL(50,69)
      jvs(403) = -b(287)
! JVS(404) = JacVar_FULL(50,70)
      jvs(404) = -b(409)
! JVS(405) = JacVar_FULL(50,72)
      jvs(405) = -b(249)
! JVS(406) = JacVar_FULL(51,30)
      jvs(406) = 0.79*b(196)
! JVS(407) = JacVar_FULL(51,33)
      jvs(407) = 0.9*b(174) + 0.39*b(190)
! JVS(408) = JacVar_FULL(51,37)
      jvs(408) = 0.9*b(176) + 0.39*b(192)
! JVS(409) = JacVar_FULL(51,43)
      jvs(409) = 0.4*b(252) + 0.6*b(331) + 0.6*b(371) + 0.6*b(412)
! JVS(410) = JacVar_FULL(51,50)
      jvs(410) = 0.446*b(248) + 0.55*b(327) + 0.771*b(367) + 0.6*b(408)
! JVS(411) = JacVar_FULL(51,51)
      jvs(411) = -b(22) - b(92) - b(136) - b(162) - b(198)
! JVS(412) = JacVar_FULL(51,62)
      jvs(412) = -b(93)
! JVS(413) = JacVar_FULL(51,63)
      jvs(413) = 0.39*b(191) + 0.39*b(193) + 0.79*b(197) - b(199)
! JVS(414) = JacVar_FULL(51,65)
      jvs(414) = 0.55*b(328) + 0.6*b(332)
! JVS(415) = JacVar_FULL(51,66)
      jvs(415) = 0.771*b(368) + 0.6*b(372)
! JVS(416) = JacVar_FULL(51,67)
      jvs(416) = -b(137)
! JVS(417) = JacVar_FULL(51,69)
      jvs(417) = 0
! JVS(418) = JacVar_FULL(51,70)
      jvs(418) = -b(163) + 0.9*b(175) + 0.9*b(177) + 0.6*b(409) + 0.6*b(413)
! JVS(419) = JacVar_FULL(51,72)
      jvs(419) = 0.446*b(249) + 0.4*b(253)
! JVS(420) = JacVar_FULL(52,12)
      jvs(420) = 0.583*b(98)
! JVS(421) = JacVar_FULL(52,52)
      jvs(421) = -b(236) - b(274) - b(315) - b(355) - b(396)
! JVS(422) = JacVar_FULL(52,65)
      jvs(422) = -b(316)
! JVS(423) = JacVar_FULL(52,66)
      jvs(423) = -b(356)

! JVS(424) = JacVar_FULL(52,67)
      jvs(424) = 0.583*b(99) + 0.44*b(144) + b(152)
! JVS(425) = JacVar_FULL(52,68)
      jvs(425) = b(153)
! JVS(426) = JacVar_FULL(52,69)
      jvs(426) = -b(275)
! JVS(427) = JacVar_FULL(52,70)
      jvs(427) = -b(397)
! JVS(428) = JacVar_FULL(52,71)
      jvs(428) = 0.44*b(145)
! JVS(429) = JacVar_FULL(52,72)
      jvs(429) = -b(237)
! JVS(430) = JacVar_FULL(53,11)
      jvs(430) = 0.025*b(102)
! JVS(431) = JacVar_FULL(53,12)

      jvs(431) = 0.335*b(98)
! JVS(432) = JacVar_FULL(53,15)
      jvs(432) = 0.88*b(140)
! JVS(433) = JacVar_FULL(53,29)
      jvs(433) = 0.65*b(194)
! JVS(434) = JacVar_FULL(53,36)
      jvs(434) = 0.2*b(242) + 0.35*b(321) + 0.6*b(361) + 0.2*b(402)

! JVS(435) = JacVar_FULL(53,38)
      jvs(435) = 0.94*b(244) + 0.669*b(323) + 0.859*b(363) + 0.94*b(404)
! JVS(436) = JacVar_FULL(53,39)
      jvs(436) = 1.71*b(246) + 0.932*b(325) + 0.941*b(365) + 1.71*b(406)
! JVS(437) = JacVar_FULL(53,44)
      jvs(437) = 0.211*b(238) + 0.523*b(317) + 0.677*b(357) + 0.239*b(398)
! JVS(438) = JacVar_FULL(53,45)
      jvs(438) = 0.15*b(240) + 0.411*b(319) + 0.497*b(359) + 0.187*b(400)
! JVS(439) = JacVar_FULL(53,49)
      jvs(439) = 0.8*b(250) + b(329) + b(369) + b(410)
! JVS(440) = JacVar_FULL(53,51)
      jvs(440) = b(92)
! JVS(441) = JacVar_FULL(53,52)
      jvs(441) = 0.233*b(236) + 0.58*b(315) + 0.724*b(355) + 0.243*b(396)
! JVS(442) = JacVar_FULL(53,53)
      jvs(442) = -b(12) - b(126) - b(156)
! JVS(443) = JacVar_FULL(53,54)
      jvs(443) = 0.25*b(164) + 0.16*b(200)
! JVS(444) = JacVar_FULL(53,57)
      jvs(444) = 0.44*b(186)
! JVS(445) = JacVar_FULL(53,58)
      jvs(445) = 0.99*b(188)
! JVS(446) = JacVar_FULL(53,59)
      jvs(446) = 0.64*b(389)
! JVS(447) = JacVar_FULL(53,60)
      jvs(447) = 1.24*b(268) + 0.64*b(351) + 0.65*b(386) + 0.64*b(390) + &
        1.21*b(391) + 1.24*b(428)
! JVS(448) = JacVar_FULL(53,61)
      jvs(448) = b(234) + 0.75*b(313) + b(353) + b(394)
! JVS(449) = JacVar_FULL(53,62)
      jvs(449) = b(93)
! JVS(450) = JacVar_FULL(53,63)
      jvs(450) = 0.44*b(187) + 0.99*b(189) + 0.65*b(195) + 0.16*b(201)
! JVS(451) = JacVar_FULL(53,64)
      jvs(451) = 0.46*b(264) + 0.3*b(347) + 0.35*b(382) + 0.46*b(424)
! JVS(452) = JacVar_FULL(53,65)
      jvs(452) = 0.75*b(314) + 0.58*b(316) + 0.523*b(318) + 0.411*b(320) + &
        0.35*b(322) + 0.669*b(324) + 0.932*b(326) + b(330) + 0.3*b(348) + &
        0.64*b(352)
! JVS(453) = JacVar_FULL(53,66)
      jvs(453) = b(354) + 0.724*b(356) + 0.677*b(358) + 0.497*b(360) + &
        0.6*b(362) + 0.859*b(364) + 0.941*b(366) + b(370) + 0.35*b(383) + &
        0.65*b(387)
! JVS(454) = JacVar_FULL(53,67)
      jvs(454) = 0.335*b(99) + 0.025*b(103) - b(127) + 0.88*b(141) + &
        0.08*b(144)
! JVS(455) = JacVar_FULL(53,68)
      jvs(455) = 0.2*b(21)
! JVS(456) = JacVar_FULL(53,69)
      jvs(456) = 0
! JVS(457) = JacVar_FULL(53,70)

      jvs(457) = -b(157) + 0.25*b(165) + b(395) + 0.243*b(397) + &
        0.239*b(399) + 0.187*b(401) + 0.2*b(403) + 0.94*b(405) + 1.71*b(407) + &
        b(411) + 0.46*b(425) + 1.24*b(429)
! JVS(458) = JacVar_FULL(53,71)
      jvs(458) = b(14) + 0.08*b(145)
! JVS(459) = JacVar_FULL(53,72)

      jvs(459) = b(235) + 0.233*b(237) + 0.211*b(239) + 0.15*b(241) + &
        0.2*b(243) + 0.94*b(245) + 1.71*b(247) + 0.8*b(251) + 0.46*b(265) + &
        1.24*b(269)
! JVS(460) = JacVar_FULL(54,37)
      jvs(460) = 0.13*b(90)
! JVS(461) = JacVar_FULL(54,46)
      jvs(461) = 0.5*b(254) + b(333) + b(373) + 0.5*b(414)
! JVS(462) = JacVar_FULL(54,47)
      jvs(462) = 0.95*b(256) + b(335) + b(375) + b(416)
! JVS(463) = JacVar_FULL(54,54)
      jvs(463) = -b(20) - b(138) - b(164) - b(200)
! JVS(464) = JacVar_FULL(54,62)
      jvs(464) = 0.13*b(91)
! JVS(465) = JacVar_FULL(54,63)
      jvs(465) = -b(201)
! JVS(466) = JacVar_FULL(54,65)
      jvs(466) = b(334) + b(336)
! JVS(467) = JacVar_FULL(54,66)
      jvs(467) = b(374) + b(376)
! JVS(468) = JacVar_FULL(54,67)
      jvs(468) = -b(139)
! JVS(469) = JacVar_FULL(54,69)
      jvs(469) = 0
! JVS(470) = JacVar_FULL(54,70)
      jvs(470) = -b(165) + 0.5*b(415) + b(417)
! JVS(471) = JacVar_FULL(54,72)
      jvs(471) = 0.5*b(255) + 0.95*b(257)
! JVS(472) = JacVar_FULL(54,73)
      jvs(472) = 0
! JVS(473) = JacVar_FULL(55,35)
      jvs(473) = b(231)
! JVS(474) = JacVar_FULL(55,51)
      jvs(474) = 0.51*b(136) + 0.2*b(162)
! JVS(475) = JacVar_FULL(55,54)
      jvs(475) = b(20) + 0.5*b(138) + 0.5*b(164)
! JVS(476) = JacVar_FULL(55,55)
      jvs(476) = -b(229) - b(262) - b(302) - b(304) - b(343) - b(345) - &
        b(380) - b(422)
! JVS(477) = JacVar_FULL(55,62)
      jvs(477) = 0
! JVS(478) = JacVar_FULL(55,63)
      jvs(478) = 0
! JVS(479) = JacVar_FULL(55,65)
      jvs(479) = -b(344) - b(346)
! JVS(480) = JacVar_FULL(55,66)
      jvs(480) = -b(381)
! JVS(481) = JacVar_FULL(55,67)
      jvs(481) = 0.51*b(137) + 0.5*b(139)
! JVS(482) = JacVar_FULL(55,69)
      jvs(482) = -b(303) - b(305)
! JVS(483) = JacVar_FULL(55,70)
      jvs(483) = 0.2*b(163) + 0.5*b(165) - b(423)

! JVS(484) = JacVar_FULL(55,72)
      jvs(484) = -b(263)
! JVS(485) = JacVar_FULL(55,73)
      jvs(485) = -b(230)
! JVS(486) = JacVar_FULL(56,8)
      jvs(486) = 0.1*b(118)
! JVS(487) = JacVar_FULL(56,9)
      jvs(487) = 0.1*b(120)
! JVS(488) = JacVar_FULL(56,26)
      jvs(488) = 0.35*b(146)
! JVS(489) = JacVar_FULL(56,31)
      jvs(489) = b(148)
! JVS(490) = JacVar_FULL(56,32)
      jvs(490) = 0.05*b(122)
! JVS(491) = JacVar_FULL(56,33)
      jvs(491) = 0.13*b(190)
! JVS(492) = JacVar_FULL(56,35)
      jvs(492) = b(150) + b(182)
! JVS(493) = JacVar_FULL(56,37)
      jvs(493) = 0.15*b(90) + 0.13*b(192)
! JVS(494) = JacVar_FULL(56,44)
      jvs(494) = 0.334*b(238) + 0.245*b(317) + 0.237*b(357) + 0.391*b(398)
! JVS(495) = JacVar_FULL(56,45)
      jvs(495) = 0.416*b(240) + 0.322*b(319) + 0.318*b(359) + 0.587*b(400)
! JVS(496) = JacVar_FULL(56,51)
      jvs(496) = 0.49*b(136)
! JVS(497) = JacVar_FULL(56,52)
      jvs(497) = 0.048*b(236) + 0.085*b(315) + 0.071*b(355) + 0.051*b(396)
! JVS(498) = JacVar_FULL(56,54)
      jvs(498) = 0.5*b(138) + 0.5*b(164)
! JVS(499) = JacVar_FULL(56,55)
      jvs(499) = 0
! JVS(500) = JacVar_FULL(56,56)
      jvs(500) = -b(430) - b(432) - b(434) - 2*b(436) - b(437) - b(439)
! JVS(501) = JacVar_FULL(56,62)
      jvs(501) = 0.15*b(91)
! JVS(502) = JacVar_FULL(56,63)
      jvs(502) = 0.13*b(191) + 0.13*b(193)
! JVS(503) = JacVar_FULL(56,64)
      jvs(503) = 0.16*b(264) + 0.08*b(347) + 0.08*b(382) + 0.16*b(424)
! JVS(504) = JacVar_FULL(56,65)
      jvs(504) = 0.085*b(316) + 0.245*b(318) + 0.322*b(320) + 0.08*b(348) - &
        b(433)
! JVS(505) = JacVar_FULL(56,66)
      jvs(505) = 0.071*b(356) + 0.237*b(358) + 0.318*b(360) + 0.08*b(383) - &
        b(435)
! JVS(506) = JacVar_FULL(56,67)
      jvs(506) = 0.1*b(119) + 0.1*b(121) + 0.05*b(123) + 0.49*b(137) + &
        0.5*b(139) + 0.07*b(144) + 0.35*b(147) + b(149) + b(151)
! JVS(507) = JacVar_FULL(56,68)
      jvs(507) = 0
! JVS(508) = JacVar_FULL(56,69)
      jvs(508) = -b(431)
! JVS(509) = JacVar_FULL(56,70)
      jvs(509) = 0.5*b(165) + b(183) + 0.051*b(397) + 0.391*b(399) + &
        0.587*b(401) + 0.16*b(425) - b(440)
! JVS(510) = JacVar_FULL(56,71)
      jvs(510) = 0.07*b(145)
! JVS(511) = JacVar_FULL(56,72)
      jvs(511) = 0.048*b(237) + 0.334*b(239) + 0.416*b(241) + 0.16*b(265) - &
        b(438)
! JVS(512) = JacVar_FULL(56,73)
      jvs(512) = 0

! JVS(513) = JacVar_FULL(57,30)
      jvs(513) = 0.46*b(196)
! JVS(514) = JacVar_FULL(57,33)
      jvs(514) = 0.35*b(190)
! JVS(515) = JacVar_FULL(57,37)
      jvs(515) = 0.86*b(90) + 0.35*b(192)
! JVS(516) = JacVar_FULL(57,50)
      jvs(516) = 0.354*b(248) + 0.37*b(327) + 0.229*b(367) + 0.4*b(408)
! JVS(517) = JacVar_FULL(57,57)
      jvs(517) = -b(106) - b(170) - b(186)
! JVS(518) = JacVar_FULL(57,62)
      jvs(518) = 0.86*b(91)
! JVS(519) = JacVar_FULL(57,63)

      jvs(519) = -b(187) + 0.35*b(191) + 0.35*b(193) + 0.46*b(197)
! JVS(520) = JacVar_FULL(57,65)
      jvs(520) = 0.37*b(328)
! JVS(521) = JacVar_FULL(57,66)
      jvs(521) = 0.229*b(368)
! JVS(522) = JacVar_FULL(57,67)
      jvs(522) = -b(107)
! JVS(523) = JacVar_FULL(57,69)
      jvs(523) = 0
! JVS(524) = JacVar_FULL(57,70)
      jvs(524) = -b(171) + 0.4*b(409)
! JVS(525) = JacVar_FULL(57,72)
      jvs(525) = 0.354*b(249)
! JVS(526) = JacVar_FULL(58,43)

      jvs(526) = 0.25*b(252) + 0.4*b(331) + 0.4*b(371) + 0.4*b(412)
! JVS(527) = JacVar_FULL(58,50)
      jvs(527) = 0.08*b(327)
! JVS(528) = JacVar_FULL(58,58)
      jvs(528) = -b(108) - b(172) - b(188)
! JVS(529) = JacVar_FULL(58,62)
      jvs(529) = 0

! JVS(530) = JacVar_FULL(58,63)
      jvs(530) = -b(189)
! JVS(531) = JacVar_FULL(58,65)
      jvs(531) = 0.08*b(328) + 0.4*b(332)
! JVS(532) = JacVar_FULL(58,66)
      jvs(532) = 0.4*b(372)
! JVS(533) = JacVar_FULL(58,67)
      jvs(533) = -b(109)
! JVS(534) = JacVar_FULL(58,69)
      jvs(534) = 0
! JVS(535) = JacVar_FULL(58,70)
      jvs(535) = -b(173) + 0.4*b(413)
! JVS(536) = JacVar_FULL(58,72)
      jvs(536) = 0.25*b(253)
! JVS(537) = JacVar_FULL(59,24)
      jvs(537) = 0.8*b(168)
! JVS(538) = JacVar_FULL(59,29)
      jvs(538) = 0.1*b(178)
! JVS(539) = JacVar_FULL(59,30)
      jvs(539) = 0.13*b(180)
! JVS(540) = JacVar_FULL(59,33)
      jvs(540) = 0.9*b(174)
! JVS(541) = JacVar_FULL(59,37)
      jvs(541) = 0.9*b(176)
! JVS(542) = JacVar_FULL(59,51)
      jvs(542) = 0.8*b(162)
! JVS(543) = JacVar_FULL(59,57)

      jvs(543) = 0.43*b(170)
! JVS(544) = JacVar_FULL(59,58)
      jvs(544) = 0.11*b(172)
! JVS(545) = JacVar_FULL(59,59)
      jvs(545) = -b(266) - b(308) - b(349) - b(384) - 2*b(388) - b(389) - &
        b(426)
! JVS(546) = JacVar_FULL(59,60)
      jvs(546) = -b(390)
! JVS(547) = JacVar_FULL(59,62)
      jvs(547) = 0
! JVS(548) = JacVar_FULL(59,63)
      jvs(548) = 0
! JVS(549) = JacVar_FULL(59,65)
      jvs(549) = -b(350)
! JVS(550) = JacVar_FULL(59,66)
      jvs(550) = -b(385)
! JVS(551) = JacVar_FULL(59,67)
      jvs(551) = 0
! JVS(552) = JacVar_FULL(59,69)
      jvs(552) = -b(309)
! JVS(553) = JacVar_FULL(59,70)
      jvs(553) = 0.8*b(163) + 0.8*b(169) + 0.43*b(171) + 0.11*b(173) + &
        0.9*b(175) + 0.9*b(177) + 0.1*b(179) + 0.13*b(181) - b(427)
! JVS(554) = JacVar_FULL(59,72)
      jvs(554) = -b(267)
! JVS(555) = JacVar_FULL(60,24)
      jvs(555) = 0.2*b(168)
! JVS(556) = JacVar_FULL(60,29)
      jvs(556) = 0.9*b(178)
! JVS(557) = JacVar_FULL(60,30)
      jvs(557) = 0.87*b(180)
! JVS(558) = JacVar_FULL(60,33)
      jvs(558) = 0.1*b(174)
! JVS(559) = JacVar_FULL(60,37)
      jvs(559) = 0.1*b(176)
! JVS(560) = JacVar_FULL(60,57)
      jvs(560) = 0.57*b(170)
! JVS(561) = JacVar_FULL(60,58)
      jvs(561) = 0.89*b(172)
! JVS(562) = JacVar_FULL(60,59)
      jvs(562) = -b(389)
! JVS(563) = JacVar_FULL(60,60)
      jvs(563) = -b(268) - b(310) - b(351) - b(386) - b(390) - 2*b(391) - &
        b(428)
! JVS(564) = JacVar_FULL(60,62)

      jvs(564) = 0
! JVS(565) = JacVar_FULL(60,63)
      jvs(565) = 0
! JVS(566) = JacVar_FULL(60,65)
      jvs(566) = -b(352)
! JVS(567) = JacVar_FULL(60,66)
      jvs(567) = -b(387)
! JVS(568) = JacVar_FULL(60,67)
      jvs(568) = 0
! JVS(569) = JacVar_FULL(60,69)
      jvs(569) = -b(311)
! JVS(570) = JacVar_FULL(60,70)
      jvs(570) = 0.2*b(169) + 0.57*b(171) + 0.89*b(173) + 0.1*b(175) + &
        0.1*b(177) + 0.9*b(179) + 0.87*b(181) - b(429)

! JVS(571) = JacVar_FULL(60,72)
      jvs(571) = -b(269)
! JVS(572) = JacVar_FULL(61,13)
      jvs(572) = b(96)
! JVS(573) = JacVar_FULL(61,29)
      jvs(573) = 0.2*b(194)
! JVS(574) = JacVar_FULL(61,30)
      jvs(574) = 0.16*b(196)
! JVS(575) = JacVar_FULL(61,42)
      jvs(575) = b(16)
! JVS(576) = JacVar_FULL(61,44)
      jvs(576) = 0.245*b(238) + 0.014*b(317) + 0.018*b(357) + 0.262*b(398)
! JVS(577) = JacVar_FULL(61,45)
      jvs(577) = 0.133*b(240) + 0.013*b(319) + 0.015*b(359) + 0.155*b(400)
! JVS(578) = JacVar_FULL(61,49)
      jvs(578) = 0
! JVS(579) = JacVar_FULL(61,52)
      jvs(579) = 0.048*b(236) + 0.006*b(355) + 0.053*b(396)
! JVS(580) = JacVar_FULL(61,54)
      jvs(580) = 0
! JVS(581) = JacVar_FULL(61,57)
      jvs(581) = 0.1*b(186)
! JVS(582) = JacVar_FULL(61,58)
      jvs(582) = 0.18*b(188)
! JVS(583) = JacVar_FULL(61,59)
      jvs(583) = 0
! JVS(584) = JacVar_FULL(61,60)
      jvs(584) = 0
! JVS(585) = JacVar_FULL(61,61)
      jvs(585) = -b(234) - b(272) - b(313) - b(353) - b(394)
! JVS(586) = JacVar_FULL(61,62)
      jvs(586) = 0
! JVS(587) = JacVar_FULL(61,63)
      jvs(587) = 0.1*b(187) + 0.18*b(189) + 0.2*b(195) + 0.16*b(197)
! JVS(588) = JacVar_FULL(61,64)
      jvs(588) = 0
! JVS(589) = JacVar_FULL(61,65)
      jvs(589) = -b(314) + 0.014*b(318) + 0.013*b(320)
! JVS(590) = JacVar_FULL(61,66)
      jvs(590) = -b(354) + 0.006*b(356) + 0.018*b(358) + 0.015*b(360)
! JVS(591) = JacVar_FULL(61,67)
      jvs(591) = b(97)
! JVS(592) = JacVar_FULL(61,68)
      jvs(592) = 0
! JVS(593) = JacVar_FULL(61,69)
      jvs(593) = -b(273)
! JVS(594) = JacVar_FULL(61,70)
      jvs(594) = -b(395) + 0.053*b(397) + 0.262*b(399) + 0.155*b(401)
! JVS(595) = JacVar_FULL(61,71)
      jvs(595) = 0
! JVS(596) = JacVar_FULL(61,72)
      jvs(596) = -b(235) + 0.048*b(237) + 0.245*b(239) + 0.133*b(241)
! JVS(597) = JacVar_FULL(61,73)
      jvs(597) = 0
! JVS(598) = JacVar_FULL(62,6)
      jvs(598) = b(28) + b(30)
! JVS(599) = JacVar_FULL(62,33)

      jvs(599) = 0.09*b(190)
! JVS(600) = JacVar_FULL(62,37)
      jvs(600) = -b(90) + 0.09*b(192)
! JVS(601) = JacVar_FULL(62,51)
      jvs(601) = -b(92)
! JVS(602) = JacVar_FULL(62,62)
      jvs(602) = -b(24) - b(26) - b(45) - b(47) - b(49) - b(91) - b(93)

! JVS(603) = JacVar_FULL(62,63)
      jvs(603) = b(3) - b(27) + 0.09*b(191) + 0.09*b(193)
! JVS(604) = JacVar_FULL(62,65)
      jvs(604) = 0
! JVS(605) = JacVar_FULL(62,66)
      jvs(605) = 0
! JVS(606) = JacVar_FULL(62,67)
      jvs(606) = 0
! JVS(607) = JacVar_FULL(62,69)
      jvs(607) = 0
! JVS(608) = JacVar_FULL(62,70)
      jvs(608) = b(8)
! JVS(609) = JacVar_FULL(62,72)
      jvs(609) = -b(46)
! JVS(610) = JacVar_FULL(62,73)
      jvs(610) = b(1) - b(48) - b(50)
! JVS(611) = JacVar_FULL(63,21)
      jvs(611) = -b(212)
! JVS(612) = JacVar_FULL(63,22)
      jvs(612) = -b(218)
! JVS(613) = JacVar_FULL(63,24)
      jvs(613) = -b(184)
! JVS(614) = JacVar_FULL(63,25)
      jvs(614) = -b(224)
! JVS(615) = JacVar_FULL(63,29)
      jvs(615) = -b(194)
! JVS(616) = JacVar_FULL(63,30)
      jvs(616) = -b(196)
! JVS(617) = JacVar_FULL(63,32)
      jvs(617) = 0
! JVS(618) = JacVar_FULL(63,33)
      jvs(618) = -b(190)
! JVS(619) = JacVar_FULL(63,35)
      jvs(619) = -b(202)
! JVS(620) = JacVar_FULL(63,37)
      jvs(620) = -b(192)
! JVS(621) = JacVar_FULL(63,51)
      jvs(621) = -b(198)
! JVS(622) = JacVar_FULL(63,54)
      jvs(622) = -b(200)
! JVS(623) = JacVar_FULL(63,55)
      jvs(623) = b(304)
! JVS(624) = JacVar_FULL(63,57)
      jvs(624) = -b(186)
! JVS(625) = JacVar_FULL(63,58)

      jvs(625) = -b(188)
! JVS(626) = JacVar_FULL(63,62)
      jvs(626) = b(24) - b(26)
! JVS(627) = JacVar_FULL(63,63)
      jvs(627) = -b(2) - b(3) - b(27) - b(34) - b(36) - b(70) - b(72) - &
        b(185) - b(187) - b(189) - b(191) - b(193) - b(195) - b(197) - &
        b(199) - b(201) - b(203) - b(213) - b(219) - b(225)
! JVS(628) = JacVar_FULL(63,65)
      jvs(628) = 0
! JVS(629) = JacVar_FULL(63,66)
      jvs(629) = b(300)
! JVS(630) = JacVar_FULL(63,67)
      jvs(630) = -b(35)
! JVS(631) = JacVar_FULL(63,69)
      jvs(631) = -b(37) + b(301) + b(305)

! JVS(632) = JacVar_FULL(63,70)
      jvs(632) = 0
! JVS(633) = JacVar_FULL(63,72)
      jvs(633) = -b(71)
! JVS(634) = JacVar_FULL(63,73)
      jvs(634) = -b(73)
! JVS(635) = JacVar_FULL(64,29)
      jvs(635) = 0.42*b(194)
! JVS(636) = JacVar_FULL(64,30)
      jvs(636) = 0.42*b(196)
! JVS(637) = JacVar_FULL(64,33)
      jvs(637) = 0.02*b(190)
! JVS(638) = JacVar_FULL(64,37)
      jvs(638) = 0.02*b(192)
! JVS(639) = JacVar_FULL(64,42)
      jvs(639) = b(128)
! JVS(640) = JacVar_FULL(64,44)
      jvs(640) = 0
! JVS(641) = JacVar_FULL(64,45)
      jvs(641) = 0

! JVS(642) = JacVar_FULL(64,49)
      jvs(642) = 0
! JVS(643) = JacVar_FULL(64,52)
      jvs(643) = 0
! JVS(644) = JacVar_FULL(64,54)
      jvs(644) = 0
! JVS(645) = JacVar_FULL(64,57)
      jvs(645) = 0.03*b(186)
! JVS(646) = JacVar_FULL(64,58)
      jvs(646) = 0.12*b(188)
! JVS(647) = JacVar_FULL(64,59)
      jvs(647) = 0
! JVS(648) = JacVar_FULL(64,60)
      jvs(648) = 0
! JVS(649) = JacVar_FULL(64,62)
      jvs(649) = 0
! JVS(650) = JacVar_FULL(64,63)
      jvs(650) = 0.03*b(187) + 0.12*b(189) + 0.02*b(191) + 0.02*b(193) + &
        0.42*b(195) + 0.42*b(197)
! JVS(651) = JacVar_FULL(64,64)
      jvs(651) = -b(264) - b(306) - b(347) - b(382) - b(424)
! JVS(652) = JacVar_FULL(64,65)
      jvs(652) = -b(348)
! JVS(653) = JacVar_FULL(64,66)
      jvs(653) = -b(383)
! JVS(654) = JacVar_FULL(64,67)
      jvs(654) = b(129)
! JVS(655) = JacVar_FULL(64,68)
      jvs(655) = 0
! JVS(656) = JacVar_FULL(64,69)
      jvs(656) = -b(307)
! JVS(657) = JacVar_FULL(64,70)
      jvs(657) = -b(425)
! JVS(658) = JacVar_FULL(64,71)
      jvs(658) = 0
! JVS(659) = JacVar_FULL(64,72)
      jvs(659) = -b(265)
! JVS(660) = JacVar_FULL(64,73)
      jvs(660) = 0
! JVS(661) = JacVar_FULL(65,14)
      jvs(661) = b(94)
! JVS(662) = JacVar_FULL(65,17)
      jvs(662) = 0.65*b(142)
! JVS(663) = JacVar_FULL(65,26)
      jvs(663) = b(15)
! JVS(664) = JacVar_FULL(65,33)
      jvs(664) = 0.03*b(190)
! JVS(665) = JacVar_FULL(65,36)
      jvs(665) = -b(321) + 0.5*b(361)
! JVS(666) = JacVar_FULL(65,37)
      jvs(666) = 0.03*b(192)
! JVS(667) = JacVar_FULL(65,38)
      jvs(667) = -b(323) + 0.501*b(363)

! JVS(668) = JacVar_FULL(65,39)
      jvs(668) = -b(325) + 0.51*b(365)
! JVS(669) = JacVar_FULL(65,41)
      jvs(669) = -b(337) + b(377)
! JVS(670) = JacVar_FULL(65,43)
      jvs(670) = -b(331) + b(371)
! JVS(671) = JacVar_FULL(65,44)
      jvs(671) = 0.031*b(238) - 0.951*b(317) + 0.554*b(357) + 0.04*b(398)
! JVS(672) = JacVar_FULL(65,45)
      jvs(672) = -b(319) + 0.507*b(359)
! JVS(673) = JacVar_FULL(65,46)
      jvs(673) = -b(333) + b(373)
! JVS(674) = JacVar_FULL(65,47)
      jvs(674) = -b(335) + b(375)
! JVS(675) = JacVar_FULL(65,49)
      jvs(675) = -b(329) + b(369)
! JVS(676) = JacVar_FULL(65,50)
      jvs(676) = -b(327) + 0.506*b(367)
! JVS(677) = JacVar_FULL(65,52)
      jvs(677) = 0.15*b(236) - 0.993*b(315) + 0.508*b(355) + 0.155*b(396)
! JVS(678) = JacVar_FULL(65,53)
      jvs(678) = b(12)
! JVS(679) = JacVar_FULL(65,54)
      jvs(679) = 0
! JVS(680) = JacVar_FULL(65,55)
      jvs(680) = -b(343) - b(345) + b(380)
! JVS(681) = JacVar_FULL(65,56)
      jvs(681) = -b(432) + b(434)
! JVS(682) = JacVar_FULL(65,57)
      jvs(682) = 0.19*b(186)
! JVS(683) = JacVar_FULL(65,58)
      jvs(683) = 0.23*b(188)
! JVS(684) = JacVar_FULL(65,59)
      jvs(684) = -b(349) + 0.5*b(384)
! JVS(685) = JacVar_FULL(65,60)
      jvs(685) = -b(351) + 0.516*b(386)
! JVS(686) = JacVar_FULL(65,61)
      jvs(686) = -b(313) + 0.5*b(353)
! JVS(687) = JacVar_FULL(65,62)
      jvs(687) = 0
! JVS(688) = JacVar_FULL(65,63)
      jvs(688) = 0.19*b(187) + 0.23*b(189) + 0.03*b(191) + 0.03*b(193)
! JVS(689) = JacVar_FULL(65,64)
      jvs(689) = -b(347) + 0.5*b(382)
! JVS(690) = JacVar_FULL(65,65)
      jvs(690) = -b(232) - b(270) - 2*b(312) - b(314) - 0.993*b(316) - &
        0.951*b(318) - b(320) - b(322) - b(324) - b(326) - b(328) - b(330) - &
        b(332) - b(334) - b(336) - b(338) - b(341) - b(344) - b(346) - &
        b(348) - b(350) - b(352) - b(392) - b(433)
! JVS(691) = JacVar_FULL(65,66)
      jvs(691) = b(260) - b(342) + 0.5*b(354) + 0.508*b(356) + 0.554*b(358) + &
        0.507*b(360) + 0.5*b(362) + 0.501*b(364) + 0.51*b(366) + &
        0.506*b(368) + b(370) + b(372) + b(374) + b(376) + b(378) + 2*b(379) + &
        b(381) + 0.5*b(383) + 0.5*b(385) + 0.516*b(387) + b(420) + b(435)
! JVS(692) = JacVar_FULL(65,67)
      jvs(692) = b(95) + 0.65*b(143)
! JVS(693) = JacVar_FULL(65,68)
      jvs(693) = 0

! JVS(694) = JacVar_FULL(65,69)
      jvs(694) = -b(271)
! JVS(695) = JacVar_FULL(65,70)
      jvs(695) = -b(393) + 0.155*b(397) + 0.04*b(399) + b(421)
! JVS(696) = JacVar_FULL(65,71)
      jvs(696) = 0
! JVS(697) = JacVar_FULL(65,72)
      jvs(697) = -b(233) + 0.15*b(237) + 0.031*b(239) + b(261)
! JVS(698) = JacVar_FULL(65,73)
      jvs(698) = 0
! JVS(699) = JacVar_FULL(66,23)
      jvs(699) = b(23)
! JVS(700) = JacVar_FULL(66,26)
      jvs(700) = 0.65*b(146)
! JVS(701) = JacVar_FULL(66,31)
      jvs(701) = b(228)
! JVS(702) = JacVar_FULL(66,33)
      jvs(702) = 0.15*b(190)
! JVS(703) = JacVar_FULL(66,35)
      jvs(703) = 0.7*b(202)
! JVS(704) = JacVar_FULL(66,36)
      jvs(704) = -b(361)
! JVS(705) = JacVar_FULL(66,37)
      jvs(705) = 0.15*b(192)
! JVS(706) = JacVar_FULL(66,38)
      jvs(706) = -b(363)
! JVS(707) = JacVar_FULL(66,39)
      jvs(707) = -b(365)
! JVS(708) = JacVar_FULL(66,40)
      jvs(708) = b(19) + b(134) + b(160)
! JVS(709) = JacVar_FULL(66,41)
      jvs(709) = -b(377)
! JVS(710) = JacVar_FULL(66,42)

      jvs(710) = b(16)
! JVS(711) = JacVar_FULL(66,43)
      jvs(711) = -b(371)
! JVS(712) = JacVar_FULL(66,44)
      jvs(712) = -b(357)
! JVS(713) = JacVar_FULL(66,45)
      jvs(713) = -b(359)
! JVS(714) = JacVar_FULL(66,46)
      jvs(714) = -b(373)
! JVS(715) = JacVar_FULL(66,47)
      jvs(715) = -b(375)
! JVS(716) = JacVar_FULL(66,49)
      jvs(716) = -b(369)
! JVS(717) = JacVar_FULL(66,50)
      jvs(717) = -b(367)
! JVS(718) = JacVar_FULL(66,51)
      jvs(718) = b(22) + 0.13*b(198)
! JVS(719) = JacVar_FULL(66,52)
      jvs(719) = -b(355)
! JVS(720) = JacVar_FULL(66,53)
      jvs(720) = b(126) + b(156)

! JVS(721) = JacVar_FULL(66,54)
      jvs(721) = 0.28*b(200)
! JVS(722) = JacVar_FULL(66,55)
      jvs(722) = b(262) + b(343) + b(422)
! JVS(723) = JacVar_FULL(66,56)
      jvs(723) = -b(434)
! JVS(724) = JacVar_FULL(66,57)
      jvs(724) = 0
! JVS(725) = JacVar_FULL(66,58)
      jvs(725) = 0
! JVS(726) = JacVar_FULL(66,59)
      jvs(726) = -b(384)
! JVS(727) = JacVar_FULL(66,60)
      jvs(727) = -b(386)
! JVS(728) = JacVar_FULL(66,61)
      jvs(728) = -b(353)

! JVS(729) = JacVar_FULL(66,62)
      jvs(729) = 0
! JVS(730) = JacVar_FULL(66,63)
      jvs(730) = 0.15*b(191) + 0.15*b(193) + 0.13*b(199) + 0.28*b(201) + &
        0.7*b(203)
! JVS(731) = JacVar_FULL(66,64)
      jvs(731) = 0.23*b(264) + 0.12*b(347) - 0.88*b(382) + 0.23*b(424)
! JVS(732) = JacVar_FULL(66,65)
      jvs(732) = -b(339) - b(341) + b(344) + 0.12*b(348)
! JVS(733) = JacVar_FULL(66,66)
      jvs(733) = -b(226) - b(260) - b(298) - b(300) - b(340) - b(342) - &
        b(354) - b(356) - b(358) - b(360) - b(362) - b(364) - b(366) - &
        b(368) - b(370) - b(372) - b(374) - b(376) - b(378) - 2*b(379) - &
        0.88*b(383) - b(385) - b(387) - b(420) - b(435)
! JVS(734) = JacVar_FULL(66,67)
      jvs(734) = b(127) + b(135) + 0.65*b(147)
! JVS(735) = JacVar_FULL(66,68)
      jvs(735) = 0

! JVS(736) = JacVar_FULL(66,69)
      jvs(736) = -b(299) - b(301)
! JVS(737) = JacVar_FULL(66,70)
      jvs(737) = b(157) + b(161) - b(421) + b(423) + 0.23*b(425)
! JVS(738) = JacVar_FULL(66,71)
      jvs(738) = 0
! JVS(739) = JacVar_FULL(66,72)
      jvs(739) = -b(261) + b(263) + 0.23*b(265)
! JVS(740) = JacVar_FULL(66,73)
      jvs(740) = -b(227)
! JVS(741) = JacVar_FULL(67,5)
      jvs(741) = -b(86)
! JVS(742) = JacVar_FULL(67,6)
      jvs(742) = 2*b(32)
! JVS(743) = JacVar_FULL(67,7)
      jvs(743) = -b(100)
! JVS(744) = JacVar_FULL(67,8)
      jvs(744) = -b(118)
! JVS(745) = JacVar_FULL(67,9)
      jvs(745) = -b(120)
! JVS(746) = JacVar_FULL(67,11)
      jvs(746) = -b(102)
! JVS(747) = JacVar_FULL(67,12)
      jvs(747) = -0.964*b(98)
! JVS(748) = JacVar_FULL(67,13)
      jvs(748) = -b(96)
! JVS(749) = JacVar_FULL(67,14)
      jvs(749) = -b(94)
! JVS(750) = JacVar_FULL(67,15)
      jvs(750) = -b(140)
! JVS(751) = JacVar_FULL(67,16)
      jvs(751) = 0.35*b(6) - b(68)
! JVS(752) = JacVar_FULL(67,17)
      jvs(752) = b(13) - 0.65*b(142)
! JVS(753) = JacVar_FULL(67,18)
      jvs(753) = b(4) - b(64)
! JVS(754) = JacVar_FULL(67,19)
      jvs(754) = 2*b(9) - b(40)
! JVS(755) = JacVar_FULL(67,21)
      jvs(755) = b(212)
! JVS(756) = JacVar_FULL(67,22)
      jvs(756) = b(218)
! JVS(757) = JacVar_FULL(67,23)
      jvs(757) = -b(130)
! JVS(758) = JacVar_FULL(67,24)
      jvs(758) = -b(104) + 0.12*b(184)
! JVS(759) = JacVar_FULL(67,25)
      jvs(759) = b(224)
! JVS(760) = JacVar_FULL(67,26)
      jvs(760) = b(15) - b(146)
! JVS(761) = JacVar_FULL(67,27)
      jvs(761) = b(5) - b(66)
! JVS(762) = JacVar_FULL(67,28)
      jvs(762) = -b(88)
! JVS(763) = JacVar_FULL(67,29)
      jvs(763) = -b(114) + 0.85*b(194)
! JVS(764) = JacVar_FULL(67,30)
      jvs(764) = -b(116) + 0.85*b(196)
! JVS(765) = JacVar_FULL(67,31)
      jvs(765) = -b(148)

! JVS(766) = JacVar_FULL(67,32)
      jvs(766) = -b(122)
! JVS(767) = JacVar_FULL(67,33)
      jvs(767) = -b(110) + 0.28*b(190)
! JVS(768) = JacVar_FULL(67,34)
      jvs(768) = -b(132)
! JVS(769) = JacVar_FULL(67,35)
      jvs(769) = -b(150) + 0.036*b(202)

! JVS(770) = JacVar_FULL(67,37)
      jvs(770) = 0.02*b(90) - b(112) + 0.28*b(192)
! JVS(771) = JacVar_FULL(67,40)
      jvs(771) = -b(134)
! JVS(772) = JacVar_FULL(67,41)
      jvs(772) = 0
! JVS(773) = JacVar_FULL(67,42)
      jvs(773) = -b(128)
! JVS(774) = JacVar_FULL(67,44)
      jvs(774) = 0
! JVS(775) = JacVar_FULL(67,45)
      jvs(775) = 0
! JVS(776) = JacVar_FULL(67,46)
      jvs(776) = 0
! JVS(777) = JacVar_FULL(67,47)
      jvs(777) = 0
! JVS(778) = JacVar_FULL(67,48)
      jvs(778) = -b(124)
! JVS(779) = JacVar_FULL(67,49)
      jvs(779) = 0
! JVS(780) = JacVar_FULL(67,50)
      jvs(780) = 0
! JVS(781) = JacVar_FULL(67,51)
      jvs(781) = -b(136) + 0.07*b(198)
! JVS(782) = JacVar_FULL(67,52)
      jvs(782) = 0
! JVS(783) = JacVar_FULL(67,53)
      jvs(783) = -b(126)
! JVS(784) = JacVar_FULL(67,54)
      jvs(784) = -b(138) + 0.21*b(200)
! JVS(785) = JacVar_FULL(67,55)
      jvs(785) = 0
! JVS(786) = JacVar_FULL(67,56)
      jvs(786) = 0
! JVS(787) = JacVar_FULL(67,57)
      jvs(787) = -b(106) + 0.4*b(186)
! JVS(788) = JacVar_FULL(67,58)
      jvs(788) = -b(108) + 0.63*b(188)
! JVS(789) = JacVar_FULL(67,59)
      jvs(789) = 0
! JVS(790) = JacVar_FULL(67,60)
      jvs(790) = 0
! JVS(791) = JacVar_FULL(67,61)
      jvs(791) = 0
! JVS(792) = JacVar_FULL(67,62)
      jvs(792) = 0.02*b(91)
! JVS(793) = JacVar_FULL(67,63)
      jvs(793) = -b(34) + b(36) + 0.12*b(185) + 0.4*b(187) + 0.63*b(189) + &
        0.28*b(191) + 0.28*b(193) + 0.85*b(195) + 0.85*b(197) + 0.07 & 
        *b(199) + 0.21*b(201) + 0.036*b(203) + b(213) + b(219) + b(225)
! JVS(794) = JacVar_FULL(67,64)
      jvs(794) = 0
! JVS(795) = JacVar_FULL(67,65)
      jvs(795) = 0
! JVS(796) = JacVar_FULL(67,66)
      jvs(796) = 0
! JVS(797) = JacVar_FULL(67,67)
      jvs(797) = -b(35) - b(38) - b(41) - b(51) - b(53) - b(55) - b(65) - &
        b(67) - b(69) - b(84) - b(87) - b(89) - b(95) - b(97) - 0.964*b(99) & 
         -b(101) - b(103) - b(105) - b(107) - b(109) - b(111) - b(113) - &
        b(115) - b(117) - b(119) - b(121) - b(123) - b(125) - b(127) - &
        b(129) - b(131) - b(133) - b(135) - b(137) - b(139) - b(141) - &
        0.65*b(143) - 0.51*b(144) - b(147) - b(149) - b(151) - b(152)
! JVS(798) = JacVar_FULL(67,68)
      jvs(798) = -b(153)
! JVS(799) = JacVar_FULL(67,69)
      jvs(799) = b(37) - b(39) + b(57) + 0.7*b(62)
! JVS(800) = JacVar_FULL(67,70)
      jvs(800) = -b(56) + 0.7*b(63)

! JVS(801) = JacVar_FULL(67,71)
      jvs(801) = b(14) - 0.51*b(145)
! JVS(802) = JacVar_FULL(67,72)
      jvs(802) = -b(52) + b(58)
! JVS(803) = JacVar_FULL(67,73)
      jvs(803) = -b(54)
! JVS(804) = JacVar_FULL(68,20)
      jvs(804) = b(204)
! JVS(805) = JacVar_FULL(68,32)
      jvs(805) = 0
! JVS(806) = JacVar_FULL(68,35)
      jvs(806) = 0.6*b(182)
! JVS(807) = JacVar_FULL(68,43)
      jvs(807) = 0.35*b(252)
! JVS(808) = JacVar_FULL(68,44)
      jvs(808) = 0.124*b(238)
! JVS(809) = JacVar_FULL(68,45)
      jvs(809) = 0.261*b(240)
! JVS(810) = JacVar_FULL(68,46)
      jvs(810) = 0.05*b(254)
! JVS(811) = JacVar_FULL(68,47)
      jvs(811) = 0.05*b(256)
! JVS(812) = JacVar_FULL(68,49)
      jvs(812) = 0.2*b(250)
! JVS(813) = JacVar_FULL(68,50)
      jvs(813) = 0.153*b(248)
! JVS(814) = JacVar_FULL(68,52)
      jvs(814) = 0.059*b(236)
! JVS(815) = JacVar_FULL(68,55)
      jvs(815) = 0
! JVS(816) = JacVar_FULL(68,59)
      jvs(816) = b(266) + b(308) + b(349) + b(384) + 2*b(388) + 1.5*b(389) + &
        b(426)
! JVS(817) = JacVar_FULL(68,60)
      jvs(817) = b(310) + 0.5*b(351) + 0.484*b(386) + 1.5*b(390) + b(391)
! JVS(818) = JacVar_FULL(68,62)
      jvs(818) = 0
! JVS(819) = JacVar_FULL(68,63)
      jvs(819) = 0
! JVS(820) = JacVar_FULL(68,65)
      jvs(820) = b(350) + 0.5*b(352)
! JVS(821) = JacVar_FULL(68,66)
      jvs(821) = b(385) + 0.484*b(387)
! JVS(822) = JacVar_FULL(68,67)
      jvs(822) = -b(152)
! JVS(823) = JacVar_FULL(68,68)
      jvs(823) = -b(21) - b(153)
! JVS(824) = JacVar_FULL(68,69)
      jvs(824) = b(309) + b(311)
! JVS(825) = JacVar_FULL(68,70)
      jvs(825) = 0.6*b(183) + b(427)
! JVS(826) = JacVar_FULL(68,71)
      jvs(826) = 0
! JVS(827) = JacVar_FULL(68,72)
      jvs(827) = 0.059*b(237) + 0.124*b(239) + 0.261*b(241) + 0.153*b(249) + &
        0.2*b(251) + 0.35*b(253) + 0.05*b(255) + 0.05*b(257) + b(267)
! JVS(828) = JacVar_FULL(68,73)
      jvs(828) = b(205)
! JVS(829) = JacVar_FULL(69,5)

      jvs(829) = b(86)
! JVS(830) = JacVar_FULL(69,7)
      jvs(830) = 0.25*b(100)
! JVS(831) = JacVar_FULL(69,8)
      jvs(831) = 0.1*b(118)
! JVS(832) = JacVar_FULL(69,9)
      jvs(832) = 0.1*b(120)
! JVS(833) = JacVar_FULL(69,11)
      jvs(833) = 0.049*b(102)
! JVS(834) = JacVar_FULL(69,12)
      jvs(834) = 0.381*b(98)
! JVS(835) = JacVar_FULL(69,15)
      jvs(835) = b(140)
! JVS(836) = JacVar_FULL(69,16)
      jvs(836) = 0.65*b(6) + b(61)
! JVS(837) = JacVar_FULL(69,17)
      jvs(837) = b(13)
! JVS(838) = JacVar_FULL(69,19)
      jvs(838) = b(40)
! JVS(839) = JacVar_FULL(69,20)
      jvs(839) = -b(206)
! JVS(840) = JacVar_FULL(69,21)
      jvs(840) = 0.02*b(210)
! JVS(841) = JacVar_FULL(69,22)
      jvs(841) = 0.02*b(216)
! JVS(842) = JacVar_FULL(69,23)
      jvs(842) = b(23) + b(130)
! JVS(843) = JacVar_FULL(69,24)
      jvs(843) = 0.26*b(184)
! JVS(844) = JacVar_FULL(69,25)
      jvs(844) = 0.02*b(222)
! JVS(845) = JacVar_FULL(69,26)
      jvs(845) = 0.35*b(146)
! JVS(846) = JacVar_FULL(69,28)
      jvs(846) = b(88)
! JVS(847) = JacVar_FULL(69,29)
      jvs(847) = 0.1*b(194)
! JVS(848) = JacVar_FULL(69,30)
      jvs(848) = 0.1*b(196)
! JVS(849) = JacVar_FULL(69,32)
      jvs(849) = 0.05*b(122)
! JVS(850) = JacVar_FULL(69,33)
      jvs(850) = 0.3*b(190)
! JVS(851) = JacVar_FULL(69,34)
      jvs(851) = 0.8*b(18) + b(132) + b(158)
! JVS(852) = JacVar_FULL(69,35)
      jvs(852) = 0.4*b(150) + 0.08*b(202)
! JVS(853) = JacVar_FULL(69,36)
      jvs(853) = b(242) - b(280) + b(321) + 0.5*b(361) + b(402)
! JVS(854) = JacVar_FULL(69,37)
      jvs(854) = 0.28*b(90) + 0.3*b(192)
! JVS(855) = JacVar_FULL(69,38)
      jvs(855) = b(244) - b(282) + b(323) + 0.501*b(363) + b(404)
! JVS(856) = JacVar_FULL(69,39)
      jvs(856) = b(246) - b(284) + b(325) + 0.51*b(365) + b(406)
! JVS(857) = JacVar_FULL(69,40)
      jvs(857) = b(19)
! JVS(858) = JacVar_FULL(69,41)
      jvs(858) = b(258) - b(296) + 2*b(337) + b(377) + b(418)
! JVS(859) = JacVar_FULL(69,43)
      jvs(859) = 0.65*b(252) - b(290) + 2*b(331) + b(371) + b(412)
! JVS(860) = JacVar_FULL(69,44)
      jvs(860) = 0.599*b(238) - b(276) + 0.946*b(317) + 0.438*b(357) + &
        0.699*b(398)
! JVS(861) = JacVar_FULL(69,45)
      jvs(861) = 0.606*b(240) - b(278) + 0.993*b(319) + 0.489*b(359) + &
        0.845*b(400)
! JVS(862) = JacVar_FULL(69,46)
      jvs(862) = 0.95*b(254) - b(292) + b(333) + b(373) + b(414)
! JVS(863) = JacVar_FULL(69,47)
      jvs(863) = 0.95*b(256) - b(294) + b(335) + b(375) + b(416)
! JVS(864) = JacVar_FULL(69,48)
      jvs(864) = 2*b(11) + b(124) + b(154)

! JVS(865) = JacVar_FULL(69,49)
      jvs(865) = 0.8*b(250) - b(288) + 2*b(329) + b(369) + b(410)
! JVS(866) = JacVar_FULL(69,50)
      jvs(866) = 0.847*b(248) - b(286) + b(327) + 0.506*b(367) + b(408)
! JVS(867) = JacVar_FULL(69,51)
      jvs(867) = b(22) + 0.49*b(136) + 0.29*b(198)
! JVS(868) = JacVar_FULL(69,52)
      jvs(868) = 0.742*b(236) - b(274) + 0.992*b(315) + 0.488*b(355) + &
        0.792*b(396)
! JVS(869) = JacVar_FULL(69,53)
      jvs(869) = b(12)
! JVS(870) = JacVar_FULL(69,54)
      jvs(870) = b(20) + 0.5*b(138) + 0.5*b(164) + 0.29*b(200)
! JVS(871) = JacVar_FULL(69,55)
      jvs(871) = -b(302) - b(304) + b(343)
! JVS(872) = JacVar_FULL(69,56)
      jvs(872) = -b(430) + b(432)
! JVS(873) = JacVar_FULL(69,57)
      jvs(873) = 0.25*b(186)
! JVS(874) = JacVar_FULL(69,58)
      jvs(874) = 0.22*b(188)
! JVS(875) = JacVar_FULL(69,59)
      jvs(875) = b(266) - b(308) + b(349) + 0.5*b(384) + b(388) + 0.5*b(389) + &
        b(426)
! JVS(876) = JacVar_FULL(69,60)
      jvs(876) = -b(310) + 0.5*b(351) + 0.5*b(390)
! JVS(877) = JacVar_FULL(69,61)
      jvs(877) = b(234) - b(272) + b(313) + 0.5*b(353) + b(394)
! JVS(878) = JacVar_FULL(69,62)
      jvs(878) = 0.28*b(91)
! JVS(879) = JacVar_FULL(69,63)
      jvs(879) = b(34) - b(36) + 0.26*b(185) + 0.25*b(187) + 0.22*b(189) + &
        0.3*b(191) + 0.3*b(193) + 0.1*b(195) + 0.1*b(197) + 0.29*b(199) + &
        0.29*b(201) + 0.08*b(203)
! JVS(880) = JacVar_FULL(69,64)
      jvs(880) = 0.77*b(264) - b(306) + 0.88*b(347) + 0.38*b(382) + &
        0.77*b(424)
! JVS(881) = JacVar_FULL(69,65)
      jvs(881) = b(232) - b(270) + 0.66*b(312) + b(314) + 0.992*b(316) + &
        0.946*b(318) + 0.993*b(320) + b(322) + b(324) + b(326) + b(328) + &
        2*b(330) + 2*b(332) + b(334) + b(336) + 2*b(338) + b(339) + b(344) + &
        0.88*b(348) + b(350) + 0.5*b(352) + b(392) + b(433)
! JVS(882) = JacVar_FULL(69,66)
      jvs(882) = -b(298) - b(300) + b(340) + 0.5*b(354) + 0.488*b(356) + 0.438 & 
        *b(358) + 0.489*b(360) + 0.5*b(362) + 0.501*b(364) + 0.51*b(366) + &
        0.506*b(368) + b(370) + b(372) + b(374) + b(376) + b(378) + &
        0.38*b(383) + 0.5*b(385)
! JVS(883) = JacVar_FULL(69,67)
      jvs(883) = b(35) - b(38) + b(41) + b(55) + b(84) + b(87) + b(89) + &
        0.381*b(99) + 0.25*b(101) + 0.049*b(103) + 0.1*b(119) + 0.1*b(121) + &
        0.05*b(123) + b(125) + b(131) + b(133) + 0.49*b(137) + 0.5*b(139) + &
        b(141) + 0.35*b(147) + 0.4*b(151)
! JVS(884) = JacVar_FULL(69,68)
      jvs(884) = b(21)
! JVS(885) = JacVar_FULL(69,69)
      jvs(885) = -b(37) - b(39) - 2*b(42) - 2*b(43) - b(57) - b(59) - b(62) - &
        b(207) - b(271) - b(273) - b(275) - b(277) - b(279) - b(281) - b(283) & 
         -b(285) - b(287) - b(289) - b(291) - b(293) - b(295) - b(297) - &
        b(299) - b(301) - b(303) - b(305) - b(307) - b(309) - b(311) - b(431)
! JVS(886) = JacVar_FULL(69,70)
      jvs(886) = b(56) - b(63) + b(155) + b(159) + 0.5*b(165) + b(393) + &
        b(395) + 0.792*b(397) + 0.699*b(399) + 0.845*b(401) + b(403) + &
        b(405) + b(407) + b(409) + b(411) + b(413) + b(415) + b(417) + &
        b(419) + 0.77*b(425) + b(427)
! JVS(887) = JacVar_FULL(69,71)
      jvs(887) = b(14)
! JVS(888) = JacVar_FULL(69,72)
      jvs(888) = -b(58) + b(233) + b(235) + 0.742*b(237) + 0.599*b(239) + &
        0.606*b(241) + b(243) + b(245) + b(247) + 0.847*b(249) + 0.8*b(251) + &
        0.65*b(253) + 0.95*b(255) + 0.95*b(257) + b(259) + 0.77*b(265) + &
        b(267)
! JVS(889) = JacVar_FULL(69,73)
      jvs(889) = -b(60)
! JVS(890) = JacVar_FULL(70,10)
      jvs(890) = b(82)
! JVS(891) = JacVar_FULL(70,16)
      jvs(891) = 0.35*b(6)
! JVS(892) = JacVar_FULL(70,24)
      jvs(892) = -b(168)
! JVS(893) = JacVar_FULL(70,27)
      jvs(893) = b(66)
! JVS(894) = JacVar_FULL(70,29)
      jvs(894) = -b(178)

! JVS(895) = JacVar_FULL(70,30)
      jvs(895) = -b(180)
! JVS(896) = JacVar_FULL(70,31)
      jvs(896) = b(148)
! JVS(897) = JacVar_FULL(70,32)
      jvs(897) = -b(166)
! JVS(898) = JacVar_FULL(70,33)
      jvs(898) = -b(174)
! JVS(899) = JacVar_FULL(70,34)
      jvs(899) = -b(158)
! JVS(900) = JacVar_FULL(70,35)
      jvs(900) = 0.6*b(150) - 0.4*b(182)
! JVS(901) = JacVar_FULL(70,36)
      jvs(901) = -b(402)
! JVS(902) = JacVar_FULL(70,37)
      jvs(902) = -b(176)
! JVS(903) = JacVar_FULL(70,38)
      jvs(903) = -b(404)
! JVS(904) = JacVar_FULL(70,39)
      jvs(904) = -b(406)
! JVS(905) = JacVar_FULL(70,40)
      jvs(905) = -b(160)
! JVS(906) = JacVar_FULL(70,41)
      jvs(906) = -b(418)
! JVS(907) = JacVar_FULL(70,43)
      jvs(907) = -b(412)
! JVS(908) = JacVar_FULL(70,44)
      jvs(908) = -b(398)
! JVS(909) = JacVar_FULL(70,45)
      jvs(909) = -b(400)
! JVS(910) = JacVar_FULL(70,46)
      jvs(910) = -b(414)
! JVS(911) = JacVar_FULL(70,47)
      jvs(911) = -b(416)
! JVS(912) = JacVar_FULL(70,48)
      jvs(912) = -b(154)
! JVS(913) = JacVar_FULL(70,49)
      jvs(913) = -b(410)
! JVS(914) = JacVar_FULL(70,50)
      jvs(914) = -b(408)
! JVS(915) = JacVar_FULL(70,51)
      jvs(915) = -b(162)
! JVS(916) = JacVar_FULL(70,52)
      jvs(916) = -b(396)
! JVS(917) = JacVar_FULL(70,53)
      jvs(917) = -b(156)
! JVS(918) = JacVar_FULL(70,54)
      jvs(918) = -b(164)
! JVS(919) = JacVar_FULL(70,55)
      jvs(919) = -b(422)
! JVS(920) = JacVar_FULL(70,56)
      jvs(920) = -b(439)
! JVS(921) = JacVar_FULL(70,57)
      jvs(921) = -b(170)
! JVS(922) = JacVar_FULL(70,58)
      jvs(922) = -b(172)
! JVS(923) = JacVar_FULL(70,59)
      jvs(923) = -b(426)
! JVS(924) = JacVar_FULL(70,60)
      jvs(924) = -b(428)
! JVS(925) = JacVar_FULL(70,61)
      jvs(925) = -b(394)
! JVS(926) = JacVar_FULL(70,62)
      jvs(926) = b(49)
! JVS(927) = JacVar_FULL(70,63)
      jvs(927) = b(72)
! JVS(928) = JacVar_FULL(70,64)
      jvs(928) = -b(424)
! JVS(929) = JacVar_FULL(70,65)
      jvs(929) = -b(392)
! JVS(930) = JacVar_FULL(70,66)
      jvs(930) = -b(420)
! JVS(931) = JacVar_FULL(70,67)
      jvs(931) = -b(55) + b(67) + b(149) + 0.6*b(151)
! JVS(932) = JacVar_FULL(70,68)
      jvs(932) = 0
! JVS(933) = JacVar_FULL(70,69)
      jvs(933) = -b(62)
! JVS(934) = JacVar_FULL(70,70)
      jvs(934) = -b(7) - b(8) - b(56) - b(63) - b(76) - b(78) - b(80) - &
        2*b(83) - b(155) - b(157) - b(159) - b(161) - b(163) - b(165) - &
        b(167) - b(169) - b(171) - b(173) - b(175) - b(177) - b(179) - &
        b(181) - 0.4*b(183) - b(393) - b(395) - b(397) - b(399) - b(401) - &
        b(403) - b(405) - b(407) - b(409) - b(411) - b(413) - b(415) - &
        b(417) - b(419) - b(421) - b(423) - b(425) - b(427) - b(429) - b(440)
! JVS(935) = JacVar_FULL(70,71)
      jvs(935) = 0
! JVS(936) = JacVar_FULL(70,72)
      jvs(936) = -b(77)
! JVS(937) = JacVar_FULL(70,73)
      jvs(937) = b(50) + b(73) - b(79) - b(81)
! JVS(938) = JacVar_FULL(71,36)
      jvs(938) = b(280)
! JVS(939) = JacVar_FULL(71,38)
      jvs(939) = b(282)
! JVS(940) = JacVar_FULL(71,39)
      jvs(940) = b(284)
! JVS(941) = JacVar_FULL(71,41)
      jvs(941) = b(296)
! JVS(942) = JacVar_FULL(71,43)
      jvs(942) = b(290)
! JVS(943) = JacVar_FULL(71,44)
      jvs(943) = b(276)
! JVS(944) = JacVar_FULL(71,45)
      jvs(944) = b(278)
! JVS(945) = JacVar_FULL(71,46)
      jvs(945) = b(292)
! JVS(946) = JacVar_FULL(71,47)
      jvs(946) = b(294)
! JVS(947) = JacVar_FULL(71,49)
      jvs(947) = b(288)
! JVS(948) = JacVar_FULL(71,50)
      jvs(948) = b(286)
! JVS(949) = JacVar_FULL(71,51)
      jvs(949) = 0.13*b(198)
! JVS(950) = JacVar_FULL(71,52)
      jvs(950) = b(274)
! JVS(951) = JacVar_FULL(71,55)
      jvs(951) = b(302)
! JVS(952) = JacVar_FULL(71,56)
      jvs(952) = b(430)
! JVS(953) = JacVar_FULL(71,57)
      jvs(953) = 0
! JVS(954) = JacVar_FULL(71,58)
      jvs(954) = 0
! JVS(955) = JacVar_FULL(71,61)
      jvs(955) = b(272)
! JVS(956) = JacVar_FULL(71,62)

      jvs(956) = 0
! JVS(957) = JacVar_FULL(71,63)
      jvs(957) = 0.13*b(199)
! JVS(958) = JacVar_FULL(71,64)
      jvs(958) = b(306)
! JVS(959) = JacVar_FULL(71,65)
      jvs(959) = 0
! JVS(960) = JacVar_FULL(71,66)
      jvs(960) = 0
! JVS(961) = JacVar_FULL(71,67)
      jvs(961) = -b(144)
! JVS(962) = JacVar_FULL(71,68)
      jvs(962) = 0
! JVS(963) = JacVar_FULL(71,69)
      jvs(963) = b(273) + b(275) + b(277) + b(279) + b(281) + b(283) + &
        b(285) + b(287) + b(289) + b(291) + b(293) + b(295) + b(297) + &
        b(303) + b(307) + b(431)

! JVS(964) = JacVar_FULL(71,70)
      jvs(964) = 0
! JVS(965) = JacVar_FULL(71,71)
      jvs(965) = -b(14) - b(145)
! JVS(966) = JacVar_FULL(71,72)
      jvs(966) = 0
! JVS(967) = JacVar_FULL(71,73)
      jvs(967) = 0
! JVS(968) = JacVar_FULL(72,18)
      jvs(968) = b(4)
! JVS(969) = JacVar_FULL(72,21)
      jvs(969) = 0
! JVS(970) = JacVar_FULL(72,22)
      jvs(970) = 0
! JVS(971) = JacVar_FULL(72,25)
      jvs(971) = 0
! JVS(972) = JacVar_FULL(72,32)
      jvs(972) = 0
! JVS(973) = JacVar_FULL(72,36)
      jvs(973) = -b(242)
! JVS(974) = JacVar_FULL(72,38)
      jvs(974) = -b(244)
! JVS(975) = JacVar_FULL(72,39)
      jvs(975) = -b(246)
! JVS(976) = JacVar_FULL(72,41)

      jvs(976) = -b(258)
! JVS(977) = JacVar_FULL(72,43)
      jvs(977) = -b(252)
! JVS(978) = JacVar_FULL(72,44)
      jvs(978) = -b(238)
! JVS(979) = JacVar_FULL(72,45)
      jvs(979) = -b(240)
! JVS(980) = JacVar_FULL(72,46)
      jvs(980) = -b(254)
! JVS(981) = JacVar_FULL(72,47)
      jvs(981) = -b(256)
! JVS(982) = JacVar_FULL(72,49)
      jvs(982) = -b(250)
! JVS(983) = JacVar_FULL(72,50)
      jvs(983) = -b(248)
! JVS(984) = JacVar_FULL(72,52)
      jvs(984) = -b(236)
! JVS(985) = JacVar_FULL(72,55)

      jvs(985) = -b(262)
! JVS(986) = JacVar_FULL(72,56)
      jvs(986) = -b(437)
! JVS(987) = JacVar_FULL(72,57)
      jvs(987) = 0
! JVS(988) = JacVar_FULL(72,58)
      jvs(988) = 0
! JVS(989) = JacVar_FULL(72,59)
      jvs(989) = -b(266)
! JVS(990) = JacVar_FULL(72,60)
      jvs(990) = -b(268)
! JVS(991) = JacVar_FULL(72,61)
      jvs(991) = -b(234)
! JVS(992) = JacVar_FULL(72,62)
      jvs(992) = -b(45) + b(47)
! JVS(993) = JacVar_FULL(72,63)
      jvs(993) = -b(70)
! JVS(994) = JacVar_FULL(72,64)
      jvs(994) = -b(264)
! JVS(995) = JacVar_FULL(72,65)
      jvs(995) = -b(232)
! JVS(996) = JacVar_FULL(72,66)
      jvs(996) = -b(260)
! JVS(997) = JacVar_FULL(72,67)
      jvs(997) = -b(51)
! JVS(998) = JacVar_FULL(72,68)
      jvs(998) = 0
! JVS(999) = JacVar_FULL(72,69)
      jvs(999) = -b(57)
! JVS(1000) = JacVar_FULL(72,70)
      jvs(1000) = b(7) - b(76) + b(78)
! JVS(1001) = JacVar_FULL(72,71)
      jvs(1001) = 0
! JVS(1002) = JacVar_FULL(72,72)
      jvs(1002) = -b(46) - b(52) - b(58) - b(71) - 2*b(74) - b(77) - b(233) - &
        b(235) - b(237) - b(239) - b(241) - b(243) - b(245) - b(247) - &
        b(249) - b(251) - b(253) - b(255) - b(257) - b(259) - b(261) - &
        b(263) - b(265) - b(267) - b(269) - b(438)
! JVS(1003) = JacVar_FULL(72,73)
      jvs(1003) = b(1) + b(48) + b(79)
! JVS(1004) = JacVar_FULL(73,10)
      jvs(1004) = b(82)
! JVS(1005) = JacVar_FULL(73,16)
      jvs(1005) = 0.65*b(6) + b(61) + b(68)
! JVS(1006) = JacVar_FULL(73,18)
      jvs(1006) = b(64)
! JVS(1007) = JacVar_FULL(73,20)
      jvs(1007) = -b(204)
! JVS(1008) = JacVar_FULL(73,21)
      jvs(1008) = -b(208)
! JVS(1009) = JacVar_FULL(73,22)
      jvs(1009) = -b(214)
! JVS(1010) = JacVar_FULL(73,25)
      jvs(1010) = -b(220)
! JVS(1011) = JacVar_FULL(73,27)
      jvs(1011) = b(5)
! JVS(1012) = JacVar_FULL(73,31)
      jvs(1012) = b(228)
! JVS(1013) = JacVar_FULL(73,32)
      jvs(1013) = 0
! JVS(1014) = JacVar_FULL(73,34)
      jvs(1014) = 0
! JVS(1015) = JacVar_FULL(73,35)
      jvs(1015) = 0.4*b(182) + 0.7*b(202) + b(231)
! JVS(1016) = JacVar_FULL(73,36)
      jvs(1016) = b(242) + b(402)
! JVS(1017) = JacVar_FULL(73,38)
      jvs(1017) = b(244) + b(404)
! JVS(1018) = JacVar_FULL(73,39)
      jvs(1018) = b(246) + b(406)
! JVS(1019) = JacVar_FULL(73,40)
      jvs(1019) = 0
! JVS(1020) = JacVar_FULL(73,41)
      jvs(1020) = b(258) + b(418)
! JVS(1021) = JacVar_FULL(73,43)
      jvs(1021) = 0.65*b(252) + b(412)
! JVS(1022) = JacVar_FULL(73,44)
      jvs(1022) = 0.876*b(238) + b(398)
! JVS(1023) = JacVar_FULL(73,45)
      jvs(1023) = 0.739*b(240) + b(400)
! JVS(1024) = JacVar_FULL(73,46)
      jvs(1024) = 0.95*b(254) + b(414)
! JVS(1025) = JacVar_FULL(73,47)
      jvs(1025) = 0.95*b(256) + b(416)
! JVS(1026) = JacVar_FULL(73,48)
      jvs(1026) = 0
! JVS(1027) = JacVar_FULL(73,49)
      jvs(1027) = 0.8*b(250) + b(410)
! JVS(1028) = JacVar_FULL(73,50)
      jvs(1028) = 0.847*b(248) + b(408)
! JVS(1029) = JacVar_FULL(73,51)
      jvs(1029) = 0
! JVS(1030) = JacVar_FULL(73,52)
      jvs(1030) = 0.941*b(236) + b(396)
! JVS(1031) = JacVar_FULL(73,53)
      jvs(1031) = 0
! JVS(1032) = JacVar_FULL(73,54)
      jvs(1032) = 0.5*b(164)
! JVS(1033) = JacVar_FULL(73,55)
      jvs(1033) = -b(229) + b(262) + b(422)
! JVS(1034) = JacVar_FULL(73,56)
      jvs(1034) = b(437) + b(439)
! JVS(1035) = JacVar_FULL(73,57)
      jvs(1035) = 0
! JVS(1036) = JacVar_FULL(73,58)
      jvs(1036) = 0
! JVS(1037) = JacVar_FULL(73,59)
      jvs(1037) = b(266) + 0.5*b(389) + b(426)
! JVS(1038) = JacVar_FULL(73,60)
      jvs(1038) = 2*b(268) + 0.5*b(351) + 0.516*b(386) + 0.5*b(390) + b(391) + &
        2*b(428)
! JVS(1039) = JacVar_FULL(73,61)
      jvs(1039) = b(234) + b(394)
! JVS(1040) = JacVar_FULL(73,62)
      jvs(1040) = b(45) - b(47) - b(49)
! JVS(1041) = JacVar_FULL(73,63)
      jvs(1041) = b(70) - b(72) + 0.7*b(203)
! JVS(1042) = JacVar_FULL(73,64)
      jvs(1042) = b(264) + b(424)
! JVS(1043) = JacVar_FULL(73,65)
      jvs(1043) = b(232) + 0.5*b(352) + b(392)
! JVS(1044) = JacVar_FULL(73,66)
      jvs(1044) = -b(226) + b(260) + 0.516*b(387) + b(420)
! JVS(1045) = JacVar_FULL(73,67)

      jvs(1045) = -b(53) + b(55) + b(65) + b(69) + b(152)
! JVS(1046) = JacVar_FULL(73,68)
      jvs(1046) = b(21) + b(153)
! JVS(1047) = JacVar_FULL(73,69)
      jvs(1047) = b(57) - b(59) + 0.7*b(62)
! JVS(1048) = JacVar_FULL(73,70)
      jvs(1048) = b(8) + b(56) + 0.7*b(63) + 2*b(76) - b(80) + 2*b(83) + &
        0.5*b(165) + 0.4*b(183) + b(393) + b(395) + b(397) + b(399) + b(401) + &
        b(403) + b(405) + b(407) + b(409) + b(411) + b(413) + b(415) + &
        b(417) + b(419) + b(421) + b(423) + b(425) + b(427) + 2*b(429) + &
        b(440)
! JVS(1049) = JacVar_FULL(73,71)
      jvs(1049) = 0
! JVS(1050) = JacVar_FULL(73,72)
      jvs(1050) = b(46) + b(58) + b(71) + 2*b(74) + 2*b(77) + b(233) + &
        b(235) + 0.941*b(237) + 0.876*b(239) + 0.739*b(241) + b(243) + &
        b(245) + b(247) + 0.847*b(249) + 0.8*b(251) + 0.65*b(253) + &
        0.95*b(255) + 0.95*b(257) + b(259) + b(261) + b(263) + b(265) + &
        b(267) + 2*b(269) + b(438)
! JVS(1051) = JacVar_FULL(73,73)
      jvs(1051) = -b(1) - b(48) - b(50) - b(54) - b(60) - b(73) - b(81) - &
        b(205) - b(209) - b(215) - b(221) - b(227) - b(230)
      RETURN
    END SUBROUTINE jacvar_sp

! End of JacVar_SP function
! ****************************************************************



! Begin Rate Coefficient Law Functions

!  User-defined Rate Law functions

!  Note: the default argument type for rate laws, as read from the equat
!        but all the internal calculations are performed in double preci

! Arrhenius
    REAL*8 FUNCTION arr(a0,b0,tempd)


      REAL*8 a0, b0, tempd

      arr = dble(a0)*exp(-dble(b0)/tempd)
!      ARR =  DBLE(A0) * EXP(-DBLE(B0)/TEMP) * (TEMP/300.0D0)**DBLE(C0)

      RETURN
    END FUNCTION arr


    REAL*8 FUNCTION troe(k0,nn,kinf,mm,to300,cm)
!      INCLUDE 'radm2_ros2.h'
      REAL k0, nn, kinf, mm, to300, cm
      REAL tmp0, tmpi, tmpm, tmpr, tmpe
! HO2 + NO2 -> HNO4
! TMP0(j) = 0.1800E-30*(TO300(j))**(  -3.200)
! TMPI(j) = 0.4700E-11*(TO300(j))**(  -1.400)
! TMPM(j) = TMP0(j) * CM(j)
! TMPR(j) = TMPM(j)/TMPI(j)
! TMPE(j) = (1. + (LOG10(TMPR(j))**2))**(-1)
! RKI(j, 19) = ((TMPM(j)/(1. + TMPR(j)))*0.6**TMPE(j)) * PATMOT2(j)
      tmp0 = k0*(to300)**(-nn)

      tmpi = kinf*(to300)**(-mm)
      tmpm = tmp0*cm
      tmpr = tmpm/tmpi
      tmpe = (1.+(log10(tmpr)**2))**(-1)
      troe = (tmpm/(1.+tmpr))*0.6**tmpe
      RETURN
    END FUNCTION troe

    REAL*8 FUNCTION troe_eq(a0,b0,rc,tinv)
!      INCLUDE 'radm2_ros2.h'
      REAL a0, b0, tinv
      REAL*8 rc

      troe_eq = rc*dble(a0)*exp(-dble(b0)*dble(tinv))
      RETURN
    END FUNCTION troe_eq

    REAL*8 FUNCTION troe2(ko,n,kinf,m,a0,b0,to300,cm,tinv)
!      INCLUDE 'radm2_ros2.h'
      REAL k0, n, kinf, m, a0, b0, to300, cm, tinv
      REAL tmp0, tmpi, tmpm, tmpr, tmpe, tmpf, tmpq, troe_eq
! first order reaction
! HNO4 -> HO2 + NO2
! TMP0(j) = 0.1800E-30*(TO300(j))**(  -3.200)
! TMPI(j) = 0.4700E-11*(TO300(j))**(  -1.400)
! TMPM(j) = TMP0(j) * CM(j)
! TMPR(j) = TMPM(j)/TMPI(j)
! TMPE(j) = (1. + (LOG10(TMPR(j))**2))**(-1)
! TMPF(j) = (TMPM(j)/(1. + TMPR(j)))*0.6**TMPE(j)
! TMPQ(j) = 0.2100E-26*EXP( 10900.0    *TINV(j))
! RKI(j, 20) = (TMPF(j)/TMPQ(j)) * 1. * 60.
      tmp0 = k0*(to300)**(-n)
      tmpi = kinf*(to300)**(-m)
      tmpm = tmp0*cm
      tmpr = tmpm/tmpi
      tmpe = (1.+(log10(tmpr)**2))**(-1)
      tmpf = (tmpm/(1.+tmpr))*0.6**tmpe
      tmpq = a0*exp(b0*tinv)
      troe_eq = (tmpf/tmpq)
      RETURN
    END FUNCTION troe2


    REAL*8 FUNCTION thermal_t2(a0,b0,tempt)
!      INCLUDE 'radm2_ros2.h'
      REAL a0, b0
      REAL*8 tempt

!      THERMAL_T2 =  DBLE(A0) * EXP( -DBLE(B0)/ DBLE(TEMP) )

      thermal_t2 = tempt*tempt*dble(a0)*exp(-dble(b0)/tempt)

      RETURN
    END FUNCTION thermal_t2



    REAL*8 FUNCTION sp1(a0,b0,a1,b1,a2,b2,tinv,cm)
      REAL a0, b0, a1, b1, a2, b2, tinv, cm
      REAL tmp0, tmp1, tmp2, tmp3

      tmp0 = a0*exp(b0*tinv)
      tmp2 = a1*exp(b1*tinv)
      tmp3 = a2*exp(b2*tinv)*cm
      sp1 = tmp0 + tmp3/(1.0+tmp3/tmp2)
      RETURN
    END FUNCTION sp1




! Simplified Arrhenius, with two arguments
! Note: The argument B0 has a changed sign when compared to ARR
!RS    REAL*8 FUNCTION arr2(a0,b0)


!RS      REAL a0, b0

!RS      arr2 = dble(a0)*exp(-dble(b0)/temp)
!      ARR2 =  DBLE(A0) * EXP( DBLE(B0)/TEMP )
!RS      RETURN
!RS    END FUNCTION arr2

! Simplified Arrhenius, with two arguments
! Note: The argument B0 has a changed sign when compared to ARR
!RS   REAL*8 FUNCTION arr3(k0,n,kinf,m)
!RS
!RS
!RS     REAL k0, n, kinf, m
!RS
!RS     arr3 = dble(a0)*exp(dble(b0)/temp)
!RS
!RS     RETURN
!RS   END FUNCTION arr3

!RS   REAL*8 FUNCTION ep1(a0)
!RS
!RS     REAL a0
!RS
!RS     ep1 = dble(a0)*cfactor*1.0D6*(temp/300.0)**2.3
!RS
!RS     RETURN
!RS   END FUNCTION ep1


!RS   REAL*8 FUNCTION ep2(a0,c0,a2,c2,a3,c3)
!RS
!RS     REAL a0, c0, a2, c2, a3, c3
!RS     DOUBLE PRECISION k0, k2, k3
!RS
!RS     k0 = dble(a0)*exp(-dble(c0)/temp)
!RS     k2 = dble(a2)*exp(-dble(c2)/temp)
!RS     k3 = dble(a3)*exp(-dble(c3)/temp)
!RS     k3 = k3*cfactor*1.0D6
!RS     ep2 = k0 + k3/(1.0D0+k3/k2)
!RS
!RS     RETURN
!RS   END FUNCTION ep2A



!RS   REAL*8 FUNCTION ep3(a1,c1,a2,c2)
!RS
!RS     REAL a1, c1, a2, c2
!RS     DOUBLE PRECISION k1, k2
!RS
!RS     k1 = dble(a1)*exp(-dble(c1)/temp)
!RS     k2 = dble(a2)*exp(-dble(c2)/temp)
!RS     ep3 = k1 + k2*(1.0D6*cfactor)
!RS
!RS     RETURN
!RS   END FUNCTION ep3


!RS   REAL*8 FUNCTION ep4(a1,a2)
!RS
!RS     REAL a1, a2
!RS     DOUBLE PRECISION k1, k2
!RS
!RS     ep4 = dble(a1)*(1.0+dble(a2)*1.0D6*cfactor)
!RS
!RS     RETURN
!RS   END FUNCTION ep4
!RS
!RS
!RS   REAL*8 FUNCTION fall(a0,b0,c0,a1,b1,c1,cf)
!RS
!RS     REAL a0, b0, c0, a1, b1, c1, cf
!RS     DOUBLE PRECISION k0, k1
!RS
!RS     k0 = dble(a0)*exp(-dble(b0)/temp)*(temp/300.0D0)**dble(c0)
!RS     k1 = dble(a1)*exp(-dble(b1)/temp)*(temp/300.0D0)**dble(c1)
!RS     k0 = k0*cfactor*1.0D6
!RS     k1 = k0/k1
!RS     fall = (k0/(1.0D0+k1))*dble(cf)**(1.0D0/(1.0D0+(dlog10(k1))**2))
!RS
!RS     RETURN
!RS   END FUNCTION fall













! End Rate Coefficient Laws

! ****************************************************************

! Update_RCONST - function to update rate constants
!   Arguments :

! ****************************************************************

    SUBROUTINE update_rconst(rconst,temp)



      IMPLICIT NONE
!     INCLUDE '/users/grell/from_rainer/module_data_racm.f77'

!     INTEGER I
      REAL*8 rconst(nreact),temp
      real temps
      REAL tinv, pot, to300, pt1, pt2, pt3
      REAL cm, gascon
      REAL const1, const2, const3
!     EXTERNAL arr, troe, troe_eq, sp1, thermal_t2
!     REAL*8 arr, troe, troe_eq, sp1, thermal_t2

      const1 = 7.34E21
      const2 = 4.4E17
      const3 = 3.23E33
      temps=real(temp)
!      PRES=101.3
      tinv = 1./temps
!      POT= P*TIN/101.3
      pot = pres*tinv/101.3
      to300 = temps/300.
      pt1 = const1*pot
      pt2 = const2*pot/60.0
      pt3 = const3*pot*pot/60.0
!     GASCON GAS CONSTANT PER MOLECULE
      gascon = 83.145/6.0221E23
!     CM(j) = PRES(j) /(GASCON * TEMP(j))
!      CM = PRES /(GASCON * REAL(TEMP))
      cm = pt1



      rconst(24) = ((pt2*cm*6.00E-34*(temps/300.0)**(-2.3)))
      rconst(25) = ((pt2*arr(8.00D-12,2060.0,temp)))
      rconst(26) = ((pt2*arr(1.80D-11,-110.0,temp)))
      rconst(27) = ((pt2*arr(3.20D-11,-70.0,temp)))
      rconst(28) = ((pt2*arr(2.20D-10,0.0,temp)))
      rconst(29) = ((pt2*arr(1.60D-12,940.0,temp)))
      rconst(30) = ((pt2*arr(1.10D-14,500.0,temp)))
      rconst(31) = ((pt2*arr(4.80D-11,-250.0,temp)))
      rconst(32) = ((pt2*arr(2.90D-12,160.0,temp)))
      rconst(33) = (pt2*(2.3E-13*exp(600./temps)+1.7E-33*cm*exp(1000./temps)))
      rconst(34) = (pt3*(3.22E-34 & 
        *exp(2800./temps)+2.38E-54*cm*exp(3200./temps)))
      rconst(35) = (pt2*troe(9.00E-32,1.5,3.00E-11,0.0,to300,cm))
      rconst(36) = ((pt2*arr(6.50D-12,-120.0,temp)))
      rconst(37) = (pt2*troe(9.00E-32,2.0,2.20E-11,0.0,to300,cm))
      rconst(38) = (pt2*troe(7.00E-31,2.6,1.50E-11,0.5,to300,cm))
      rconst(39) = (pt2*troe(2.60E-30,3.2,2.40E-11,1.3,to300,cm))
      rconst(40) = ((pt2*arr(2.20D-11,0.0,temp)))
      rconst(41) = ((pt2*arr(3.70D-12,-250.0,temp)))
      rconst(42) = (pt2*troe(1.80E-31,3.2,4.70E-12,1.4,to300,cm))
      rconst(43) = (troe_eq(4.76E26,10900.0,rconst(042)/pt2,tinv))
      rconst(44) = ((pt2*arr(3.50D-12,0.0,temp)))
      rconst(45) = ((pt2*arr(1.80D-11,390.0,temp)))
      rconst(46) = (pt2*sp1(7.2E-15,785.,4.1E-16,1440.,1.9E-33,725.,tinv,cm))

      rconst(47) = ((pt2*arr(1.30D-12,-380.0,temp)))
      rconst(48) = ((pt2*arr(2.00D-12,1400.0,temp)))
      rconst(49) = ((pt2*arr(1.20D-13,2450.0,temp)))
      rconst(50) = ((pt3*arr(3.30D-39,-530.0,temp)))
      rconst(51) = ((pt2*arr(1.50D-11,-170.0,temp)))
      rconst(52) = ((pt2*arr(4.50D-14,1260.0,temp)))
      rconst(53) = (pt2*troe(2.20E-30,3.9,1.50E-12,0.7,to300,cm))
      rconst(54) = (troe_eq(3.70E26,11000.0,rconst(053)/pt2,tinv))
      rconst(55) = ((pt2*arr(8.50D-13,2450.0,temp)))
      rconst(56) = ((pt2*arr(5.50D-12,2000.0,temp)))
      rconst(57) = (pt2*troe(3.00E-31,3.3,1.50E-12,0.0,to300,cm))
      rconst(58) = (pt2*1.5E-13*(1.0+2.439E-20*cm))
      rconst(59) = ((pt2*arr(6.00D-11,0.0,temp)))
      rconst(60) = ((pt2*arr(1.59D-11,-13.0,temp)))
      rconst(61) = ((pt2*thermal_t2(7.44E-18,1361.0,temp)))
      rconst(62) = ((pt2*thermal_t2(1.51E-17,492.0,temp)))
      rconst(63) = ((pt2*arr(5.26D-12,260.0,temp)))
      rconst(64) = ((pt2*arr(8.02D-12,155.0,temp)))
      rconst(65) = ((pt2*arr(1.64D-11,125.0,temp)))
      rconst(66) = ((pt2*arr(1.96D-12,-438.0,temp)))
      rconst(67) = ((pt2*arr(5.72D-12,-500.0,temp)))
      rconst(68) = ((pt2*arr(1.33D-11,-500.0,temp)))
      rconst(69) = ((pt2*arr(1.48D-11,-448.0,temp)))
      rconst(70) = ((pt2*arr(2.54D-11,-410.0,temp)))
      rconst(71) = ((pt2*arr(1.21D-11,-444.0,temp)))
      rconst(72) = ((pt2*arr(1.71D-10,0.0,temp)))
      rconst(73) = ((pt2*arr(1.81D-12,-355.0,temp)))

      rconst(74) = ((pt2*arr(7.30D-12,-355.0,temp)))
      rconst(75) = ((pt2*arr(6.00D-11,0.0,temp)))
      rconst(76) = ((pt2*arr(1.00D-11,0.0,temp)))
      rconst(77) = ((pt2*arr(5.55D-12,-331.0,temp)))
      rconst(78) = ((pt2*thermal_t2(5.68E-18,-92.0,temp)))
      rconst(79) = ((pt2*arr(3.00D-12,0.0,temp)))
      rconst(80) = ((pt2*arr(1.14D-11,0.0,temp)))
      rconst(81) = ((pt2*arr(1.72D-11,0.0,temp)))
      rconst(82) = ((pt2*arr(1.86D-11,-175.0,temp)))
      rconst(83) = ((pt2*arr(2.80D-11,-175.0,temp)))
      rconst(84) = ((pt2*arr(2.70D-10,0.0,temp)))
      rconst(85) = ((pt2*arr(2.93D-12,-190.0,temp)))
      rconst(86) = ((pt2*arr(3.40D-12,-190.0,temp)))

      rconst(87) = ((pt2*arr(2.93D-12,-190.0,temp)))
      rconst(88) = ((pt2*arr(4.00D-14,0.0,temp)))
      rconst(89) = ((pt2*arr(3.25D-13,-500.0,temp)))
      rconst(90) = ((pt2*arr(5.31D-12,260.0,temp)))
      rconst(91) = ((pt2*arr(3.40D-13,1900.0,temp)))
      rconst(92) = ((pt2*arr(1.40D-12,1900.0,temp)))
      rconst(93) = ((pt2*arr(2.90D-12,1900.0,temp)))
      rconst(94) = ((pt2*arr(1.40D-12,1900.0,temp)))
      rconst(95) = ((pt2*arr(8.27D-15,150.0,temp)))
      rconst(96) = ((pt2*arr(2.87D-13,1000.0,temp)))
      rconst(97) = ((pt2*arr(2.20D-11,0.0,temp)))
      rconst(98) = ((pt2*thermal_t2(4.88E-18,2282.0,temp)))
      rconst(99) = ((pt2*arr(1.79D-13,450.0,temp)))
      rconst(100) = ((pt2*arr(8.64D-13,-450.0,temp)))
      rconst(101) = ((pt2*arr(1.00D-13,0.0,temp)))
      rconst(102) = ((pt2*arr(3.02D-12,446.0,temp)))
      rconst(103) = ((pt2*arr(1.19D-12,-490.0,temp)))
      rconst(104) = ((pt2*arr(1.22D-11,0.0,temp)))
      rconst(105) = ((pt2*arr(2.20D-14,500.0,temp)))
      rconst(106) = ((pt2*arr(9.14D-15,2580.0,temp)))
      rconst(107) = ((pt2*arr(4.33D-15,1800.0,temp)))
      rconst(108) = ((pt2*arr(4.40D-15,845.0,temp)))
      rconst(109) = ((pt2*arr(1.34D-14,2283.0,temp)))
      rconst(110) = ((pt2*arr(7.86D-15,1913.0,temp)))
      rconst(111) = ((pt2*arr(1.01D-15,736.0,temp)))
      rconst(112) = ((pt2*arr(2.00D-16,0.0,temp)))
      rconst(113) = ((pt2*arr(1.36D-15,2112.0,temp)))
      rconst(114) = ((pt2*arr(2.00D-18,0.0,temp)))
      rconst(115) = ((pt2*arr(2.46D-15,1700.0,temp)))
      rconst(116) = ((pt2*arr(2.00D-11,0.0,temp)))
      rconst(117) = ((pt2*arr(1.00D-11,0.0,temp)))
      rconst(118) = ((pt2*arr(3.60D-11,0.0,temp)))
      rconst(119) = ((pt2*arr(1.66D-17,-1044.0,temp)))
      rconst(120) = ((pt2*arr(5.00D-11,0.0,temp)))
      rconst(121) = ((pt2*arr(3.60D-11,0.0,temp)))

      rconst(122) = ((pt2*arr(1.66D-17,-1044.0,temp)))
      rconst(123) = ((pt2*arr(1.00D-11,0.0,temp)))
      rconst(124) = ((pt2*arr(3.60D-11,0.0,temp)))
      rconst(125) = ((pt2*arr(1.66D-17,-1044.0,temp)))
      rconst(126) = ((pt2*arr(5.00D-11,0.0,temp)))
      rconst(127) = (pt2*troe(9.70E-29,5.6,9.30E-12,1.5,to300,cm))
      rconst(128) = (troe_eq(1.16E28,13954.0,rconst(127)/pt2,tinv))
      rconst(129) = (pt2*troe(9.70E-29,5.6,9.30E-12,1.5,to300,cm))
      rconst(130) = (troe_eq(1.16E28,13954.0,rconst(129)/pt2,tinv))
      rconst(131) = ((pt2*arr(4.20D-12,-180.0,temp)))
      rconst(132) = ((pt2*arr(8.70D-12,0.0,temp)))
      rconst(133) = ((pt2*arr(4.00D-12,0.0,temp)))
      rconst(134) = ((pt2*arr(4.00D-12,0.0,temp)))
      rconst(135) = ((pt2*arr(4.00D-12,0.0,temp)))
      rconst(136) = ((pt2*arr(9.00D-12,0.0,temp)))
      rconst(137) = ((pt2*arr(4.00D-12,0.0,temp)))
      rconst(138) = ((pt2*arr(4.00D-12,0.0,temp)))
      rconst(139) = ((pt2*arr(4.00D-12,0.0,temp)))
      rconst(140) = ((pt2*arr(4.00D-12,0.0,temp)))

      rconst(141) = ((pt2*arr(4.00D-12,0.0,temp)))
      rconst(142) = ((pt2*arr(4.00D-12,0.0,temp)))
      rconst(143) = ((pt2*arr(4.00D-12,0.0,temp)))
      rconst(144) = ((pt2*arr(4.00D-12,0.0,temp)))
      rconst(145) = ((pt2*arr(2.00D-11,0.0,temp)))
      rconst(146) = ((pt2*arr(2.00D-11,0.0,temp)))
      rconst(147) = ((pt2*arr(4.00D-12,0.0,temp)))
      rconst(148) = ((pt2*arr(4.00D-12,0.0,temp)))
      rconst(149) = ((pt2*arr(4.00D-12,0.0,temp)))
      rconst(150) = ((pt2*arr(3.80D-13,-800.0,temp)))
      rconst(151) = ((pt2*arr(7.50D-13,-700.0,temp)))
      rconst(152) = ((pt2*arr(1.66D-13,-1300.0,temp)))
      rconst(153) = ((pt2*arr(1.66D-13,-1300.0,temp)))
      rconst(154) = ((pt2*arr(1.66D-13,-1300.0,temp)))
      rconst(155) = ((pt2*arr(1.90D-13,-1300.0,temp)))
      rconst(156) = ((pt2*arr(1.66D-13,-1300.0,temp)))
      rconst(157) = ((pt2*arr(1.66D-13,-1300.0,temp)))
      rconst(158) = ((pt2*arr(1.28D-13,-1300.0,temp)))
      rconst(159) = ((pt2*arr(1.50D-11,0.0,temp)))
      rconst(160) = ((pt2*arr(1.50D-11,0.0,temp)))
      rconst(161) = ((pt2*arr(3.75D-13,-980.0,temp)))
      rconst(162) = ((pt2*arr(3.75D-13,-980.0,temp)))
      rconst(163) = ((pt2*arr(3.75D-13,-980.0,temp)))
      rconst(164) = ((pt2*arr(1.15D-12,-550.0,temp)))
      rconst(165) = ((pt2*arr(3.86D-16,-2640.0,temp)))
      rconst(166) = ((pt2*arr(1.15D-12,-550.0,temp)))
      rconst(167) = ((pt2*arr(3.86D-16,-2640.0,temp)))
      rconst(168) = ((pt2*arr(1.15D-13,-1300.0,temp)))
      rconst(169) = ((pt2*arr(1.66D-13,-1300.0,temp)))
      rconst(170) = ((pt2*arr(1.66D-13,-1300.0,temp)))
      rconst(171) = ((pt2*arr(9.10D-14,-416.0,temp)))
      rconst(172) = ((pt2*arr(1.18D-13,-158.0,temp)))
      rconst(173) = ((pt2*arr(9.46D-14,-431.0,temp)))
      rconst(174) = ((pt2*arr(1.00D-13,-467.0,temp)))
      rconst(175) = ((pt2*arr(4.34D-14,-633.0,temp)))
      rconst(176) = ((pt2*arr(1.71D-13,-708.0,temp)))
      rconst(177) = ((pt2*arr(1.46D-13,-708.0,temp)))
      rconst(178) = ((pt2*arr(9.18D-14,-708.0,temp)))
      rconst(179) = ((pt2*arr(1.36D-13,-708.0,temp)))
      rconst(180) = ((pt2*arr(3.56D-14,-708.0,temp)))
      rconst(181) = ((pt2*arr(3.56D-14,-708.0,temp)))
      rconst(182) = ((pt2*arr(3.56D-14,-708.0,temp)))
      rconst(183) = ((pt2*arr(3.56D-14,-708.0,temp)))
      rconst(184) = ((pt2*arr(3.56D-14,-708.0,temp)))
      rconst(185) = ((pt2*arr(3.21D-11,440.0,temp)))
      rconst(186) = ((pt2*arr(2.68D-16,-2510.0,temp)))
      rconst(187) = ((pt2*arr(3.21D-11,440.0,temp)))
      rconst(188) = ((pt2*arr(2.68D-16,-2510.0,temp)))
      rconst(189) = ((pt2*arr(6.91D-13,-508.0,temp)))
      rconst(190) = ((pt2*arr(1.60D-13,-708.0,temp)))
      rconst(191) = ((pt2*arr(9.68D-14,-708.0,temp)))
      rconst(192) = ((pt2*arr(1.03D-12,-211.0,temp)))
      rconst(193) = ((pt2*arr(6.90D-13,-460.0,temp)))
      rconst(194) = ((pt2*arr(5.59D-13,-522.0,temp)))
      rconst(195) = ((pt2*arr(2.47D-13,-683.0,temp)))
      rconst(196) = ((pt2*arr(9.48D-13,-765.0,temp)))
      rconst(197) = ((pt2*arr(8.11D-13,-765.0,temp)))
      rconst(198) = ((pt2*arr(5.09D-13,-765.0,temp)))
      rconst(199) = ((pt2*arr(7.60D-13,-765.0,temp)))
      rconst(200) = ((pt2*arr(7.40D-13,-765.0,temp)))
      rconst(201) = ((pt2*arr(7.40D-13,-765.0,temp)))
      rconst(202) = ((pt2*arr(7.40D-13,-765.0,temp)))
      rconst(203) = ((pt2*arr(7.40D-13,-765.0,temp)))
      rconst(204) = ((pt2*arr(7.40D-13,-765.0,temp)))
      rconst(205) = ((pt2*arr(2.80D-12,-530.0,temp)))
      rconst(206) = ((pt2*arr(2.80D-12,-530.0,temp)))
      rconst(207) = ((pt2*arr(7.51D-13,-565.0,temp)))
      rconst(208) = ((pt2*arr(8.85D-13,-765.0,temp)))
      rconst(209) = ((pt2*arr(5.37D-13,-765.0,temp)))
      rconst(210) = ((pt2*arr(7.00D-14,-1000.0,temp)))
      rconst(211) = ((pt2*arr(4.25D-14,-1000.0,temp)))
      rconst(212) = ((pt2*arr(2.96D-14,-1000.0,temp)))
      rconst(213) = ((pt2*arr(1.20D-12,0.0,temp)))
      rconst(214) = ((pt2*arr(1.20D-12,0.0,temp)))
      rconst(215) = ((pt2*arr(1.20D-12,0.0,temp)))
      rconst(216) = ((pt2*arr(1.20D-12,0.0,temp)))
      rconst(217) = ((pt2*arr(1.20D-12,0.0,temp)))
      rconst(218) = ((pt2*arr(1.20D-12,0.0,temp)))
      rconst(219) = ((pt2*arr(1.20D-12,0.0,temp)))
      rconst(220) = ((pt2*arr(1.20D-12,0.0,temp)))
      rconst(221) = ((pt2*arr(1.20D-12,0.0,temp)))

      rconst(222) = ((pt2*arr(1.20D-12,0.0,temp)))
      rconst(223) = ((pt2*arr(1.20D-12,0.0,temp)))
      rconst(224) = ((pt2*arr(1.20D-12,0.0,temp)))
      rconst(225) = ((pt2*arr(1.20D-12,0.0,temp)))
      rconst(226) = ((pt2*arr(1.20D-12,0.0,temp)))
      rconst(227) = ((pt2*arr(4.00D-12,0.0,temp)))
      rconst(228) = ((pt2*arr(4.00D-12,0.0,temp)))
      rconst(229) = ((pt2*arr(1.20D-12,0.0,temp)))
      rconst(230) = ((pt2*arr(1.20D-12,0.0,temp)))
      rconst(231) = ((pt2*arr(1.20D-12,0.0,temp)))
      rconst(232) = ((pt2*arr(1.66D-13,-1300.0,temp)))
      rconst(233) = ((pt2*arr(5.99D-15,-1510.0,temp)))
      rconst(234) = ((pt2*arr(3.40D-14,-1560.0,temp)))
      rconst(235) = ((pt2*arr(7.13D-17,-2950.0,temp)))
      rconst(236) = ((pt2*arr(4.00D-12,0.0,temp)))
      rconst(237) = ((pt2*arr(1.20D-12,0.0,temp)))
      RETURN
    END SUBROUTINE update_rconst

! End of Update_RCONST function
! ****************************************************************



! ****************************************************************

! Linear Algebra Data and Routines File


! Generated by KPP - symbolic chemistry Kinetics PreProcessor
!     KPP is developed at CGRER labs University of Iowa by
!     Valeriu Damian & Adrian Sandu

! File                 : racm_kpp_seulex_linalg.f
! Time                 : Thu Apr 15 16:55:52 2004
! Working directory    : /home/haas/Chemie/kpp_1.2/kpp-1.2/examples/racm
! Equation file        : racm_kpp_seulex.k
! Output root filename : racm_kpp_seulex

! ****************************************************************




! ****************************************************************

! SPARSE_UTIL - SPARSE Utility functions
!   Arguments :

! ****************************************************************


    SUBROUTINE kppdecomp(n,v,ier)


!     IMPLICIT NONE
!     INCLUDE '/users/grell/from_rainer/module_data_racm.f77'
      REAL*8 v(lu_nonzero_v), w(nspec)
      INTEGER k, kk, j, jj
      REAL*8 a
      INTEGER n, ier

      ier = 0
      DO k = 1, n
        IF (v(lu_diag_v(k))==0.) THEN
          ier = k
          RETURN
        END IF
        DO kk = lu_crow_v(k), lu_crow_v(k+1) - 1
          w(lu_icol_v(kk)) = v(kk)
        END DO
        DO kk = lu_crow_v(k), lu_diag_v(k) - 1
          j = lu_icol_v(kk)
          a = -w(j)/v(lu_diag_v(j))
          w(j) = -a
          DO jj = lu_diag_v(j) + 1, lu_crow_v(j+1) - 1
            w(lu_icol_v(jj)) = w(lu_icol_v(jj)) + a*v(jj)
          END DO
        END DO
        DO kk = lu_crow_v(k), lu_crow_v(k+1) - 1
          v(kk) = w(lu_icol_v(kk))
        END DO
      END DO
      RETURN
    END SUBROUTINE kppdecomp
! End of SPARSE_UTIL function
! ****************************************************************


! ****************************************************************

! KppSolve - sparse back substitution
!   Arguments :
!      JVS       - the Jacobian of variables
!      X         - vector for variables

! ****************************************************************

    SUBROUTINE kppsolve(jvs,x)

!     IMPLICIT NONE
!     INCLUDE '/users/grell/from_rainer/module_data_racm.f77'


! JVS - the Jacobian of variables
      REAL*8 jvs(lu_nonzero_v)
! X - vector for variables
      REAL*8 x(nvar)


      x(21) = x(21) - jvs(102)*x(8)
      x(22) = x(22) - jvs(107)*x(9)
      x(23) = x(23) - jvs(112)*x(11)
      x(28) = x(28) - jvs(146)*x(12) - jvs(147)*x(24)
      x(32) = x(32) - jvs(181)*x(20) - jvs(182)*x(21) - jvs(183)*x(22) & 
         -jvs(184)*x(25)
      x(34) = x(34) - jvs(195)*x(12)
      x(36) = x(36) - jvs(214)*x(24)
      x(40) = x(40) - jvs(244)*x(23) - jvs(245)*x(35)
      x(41) = x(41) - jvs(262)*x(25) - jvs(263)*x(32)
      x(42) = x(42) - jvs(273)*x(7) - jvs(274)*x(15) - jvs(275)*x(29) - &
        jvs(276)*x(38) - jvs(277)*x(39)
      x(43) = x(43) - jvs(298)*x(30)
      x(44) = x(44) - jvs(307)*x(7)
      x(45) = x(45) - jvs(315)*x(11)
      x(46) = x(46) - jvs(323)*x(21)
      x(47) = x(47) - jvs(333)*x(22)
      x(48) = x(48) - jvs(343)*x(12) - jvs(344)*x(17) - jvs(345)*x(23) - &
        jvs(346)*x(24) - jvs(347)*x(26) - jvs(348)*x(30) - jvs(349)*x(31) - &
        jvs(350)*x(33) - jvs(351)*x(34) - jvs(352)*x(35) - jvs(353)*x(36) - &
        jvs(354)*x(37) - jvs(355)*x(38) - jvs(356)*x(39) - jvs(357)*x(41) - &
        jvs(358)*x(43) - jvs(359)*x(44) - jvs(360)*x(45) - jvs(361)*x(46) - &
        jvs(362)*x(47)
      x(49) = x(49) - jvs(386)*x(29)
      x(50) = x(50) - jvs(395)*x(33) - jvs(396)*x(37)
      x(51) = x(51) - jvs(406)*x(30) - jvs(407)*x(33) - jvs(408)*x(37) - &
        jvs(409)*x(43) - jvs(410)*x(50)
      x(52) = x(52) - jvs(420)*x(12)
      x(53) = x(53) - jvs(430)*x(11) - jvs(431)*x(12) - jvs(432)*x(15) - &
        jvs(433)*x(29) - jvs(434)*x(36) - jvs(435)*x(38) - jvs(436)*x(39) - &
        jvs(437)*x(44) - jvs(438)*x(45) - jvs(439)*x(49) - jvs(440)*x(51) - &
        jvs(441)*x(52)
      x(54) = x(54) - jvs(460)*x(37) - jvs(461)*x(46) - jvs(462)*x(47)
      x(55) = x(55) - jvs(473)*x(35) - jvs(474)*x(51) - jvs(475)*x(54)
      x(56) = x(56) - jvs(486)*x(8) - jvs(487)*x(9) - jvs(488)*x(26) - &
        jvs(489)*x(31) - jvs(490)*x(32) - jvs(491)*x(33) - jvs(492)*x(35) - &
        jvs(493)*x(37) - jvs(494)*x(44) - jvs(495)*x(45) - jvs(496)*x(51) - &
        jvs(497)*x(52) - jvs(498)*x(54) - jvs(499)*x(55)
      x(57) = x(57) - jvs(513)*x(30) - jvs(514)*x(33) - jvs(515)*x(37) - &
        jvs(516)*x(50)
      x(58) = x(58) - jvs(526)*x(43) - jvs(527)*x(50)
      x(59) = x(59) - jvs(537)*x(24) - jvs(538)*x(29) - jvs(539)*x(30) - &
        jvs(540)*x(33) - jvs(541)*x(37) - jvs(542)*x(51) - jvs(543)*x(57) - &
        jvs(544)*x(58)
      x(60) = x(60) - jvs(555)*x(24) - jvs(556)*x(29) - jvs(557)*x(30) - &
        jvs(558)*x(33) - jvs(559)*x(37) - jvs(560)*x(57) - jvs(561)*x(58) - &
        jvs(562)*x(59)
      x(61) = x(61) - jvs(572)*x(13) - jvs(573)*x(29) - jvs(574)*x(30) - &
        jvs(575)*x(42) - jvs(576)*x(44) - jvs(577)*x(45) - jvs(578)*x(49) - &
        jvs(579)*x(52) - jvs(580)*x(54) - jvs(581)*x(57) - jvs(582)*x(58) - &
        jvs(583)*x(59) - jvs(584)*x(60)
      x(62) = x(62) - jvs(598)*x(6) - jvs(599)*x(33) - jvs(600)*x(37) - &
        jvs(601)*x(51)
      x(63) = x(63) - jvs(611)*x(21) - jvs(612)*x(22) - jvs(613)*x(24) - &
        jvs(614)*x(25) - jvs(615)*x(29) - jvs(616)*x(30) - jvs(617)*x(32) - &
        jvs(618)*x(33) - jvs(619)*x(35) - jvs(620)*x(37) - jvs(621)*x(51) - &
        jvs(622)*x(54) - jvs(623)*x(55) - jvs(624)*x(57) - jvs(625)*x(58) - &
        jvs(626)*x(62)
      x(64) = x(64) - jvs(635)*x(29) - jvs(636)*x(30) - jvs(637)*x(33) - &
        jvs(638)*x(37) - jvs(639)*x(42) - jvs(640)*x(44) - jvs(641)*x(45) - &
        jvs(642)*x(49) - jvs(643)*x(52) - jvs(644)*x(54) - jvs(645)*x(57) - &
        jvs(646)*x(58) - jvs(647)*x(59) - jvs(648)*x(60) - jvs(649)*x(62) - &
        jvs(650)*x(63)
      x(65) = x(65) - jvs(661)*x(14) - jvs(662)*x(17) - jvs(663)*x(26) - &
        jvs(664)*x(33) - jvs(665)*x(36) - jvs(666)*x(37) - jvs(667)*x(38) - &
        jvs(668)*x(39) - jvs(669)*x(41) - jvs(670)*x(43) - jvs(671)*x(44) - &
        jvs(672)*x(45) - jvs(673)*x(46) - jvs(674)*x(47) - jvs(675)*x(49) - &
        jvs(676)*x(50) - jvs(677)*x(52) - jvs(678)*x(53) - jvs(679)*x(54) - &
        jvs(680)*x(55) - jvs(681)*x(56) - jvs(682)*x(57) - jvs(683)*x(58) - &
        jvs(684)*x(59) - jvs(685)*x(60) - jvs(686)*x(61) - jvs(687)*x(62) - &
        jvs(688)*x(63) - jvs(689)*x(64)
      x(66) = x(66) - jvs(699)*x(23) - jvs(700)*x(26) - jvs(701)*x(31) - &
        jvs(702)*x(33) - jvs(703)*x(35) - jvs(704)*x(36) - jvs(705)*x(37) - &
        jvs(706)*x(38) - jvs(707)*x(39) - jvs(708)*x(40) - jvs(709)*x(41) - &
        jvs(710)*x(42) - jvs(711)*x(43) - jvs(712)*x(44) - jvs(713)*x(45) - &
        jvs(714)*x(46) - jvs(715)*x(47) - jvs(716)*x(49) - jvs(717)*x(50) - &
        jvs(718)*x(51) - jvs(719)*x(52) - jvs(720)*x(53) - jvs(721)*x(54) - &
        jvs(722)*x(55) - jvs(723)*x(56) - jvs(724)*x(57) - jvs(725)*x(58) - &
        jvs(726)*x(59) - jvs(727)*x(60) - jvs(728)*x(61) - jvs(729)*x(62) - &
        jvs(730)*x(63) - jvs(731)*x(64) - jvs(732)*x(65)
      x(67) = x(67) - jvs(741)*x(5) - jvs(742)*x(6) - jvs(743)*x(7) - &
        jvs(744)*x(8) - jvs(745)*x(9) - jvs(746)*x(11) - jvs(747)*x(12) - &
        jvs(748)*x(13) - jvs(749)*x(14) - jvs(750)*x(15) - jvs(751)*x(16) - &
        jvs(752)*x(17) - jvs(753)*x(18) - jvs(754)*x(19) - jvs(755)*x(21) - &
        jvs(756)*x(22) - jvs(757)*x(23) - jvs(758)*x(24) - jvs(759)*x(25) - &
        jvs(760)*x(26) - jvs(761)*x(27) - jvs(762)*x(28) - jvs(763)*x(29) - &
        jvs(764)*x(30) - jvs(765)*x(31) - jvs(766)*x(32) - jvs(767)*x(33) - &
        jvs(768)*x(34) - jvs(769)*x(35) - jvs(770)*x(37) - jvs(771)*x(40) - &
        jvs(772)*x(41) - jvs(773)*x(42) - jvs(774)*x(44) - jvs(775)*x(45) - &
        jvs(776)*x(46) - jvs(777)*x(47) - jvs(778)*x(48) - jvs(779)*x(49) - &
        jvs(780)*x(50) - jvs(781)*x(51) - jvs(782)*x(52) - jvs(783)*x(53) - &
        jvs(784)*x(54) - jvs(785)*x(55) - jvs(786)*x(56) - jvs(787)*x(57) - &
        jvs(788)*x(58) - jvs(789)*x(59) - jvs(790)*x(60) - jvs(791)*x(61) - &
        jvs(792)*x(62) - jvs(793)*x(63) - jvs(794)*x(64) - jvs(795)*x(65) - &
        jvs(796)*x(66)
      x(68) = x(68) - jvs(804)*x(20) - jvs(805)*x(32) - jvs(806)*x(35) - &
        jvs(807)*x(43) - jvs(808)*x(44) - jvs(809)*x(45) - jvs(810)*x(46) - &
        jvs(811)*x(47) - jvs(812)*x(49) - jvs(813)*x(50) - jvs(814)*x(52) - &
        jvs(815)*x(55) - jvs(816)*x(59) - jvs(817)*x(60) - jvs(818)*x(62) - &
        jvs(819)*x(63) - jvs(820)*x(65) - jvs(821)*x(66) - jvs(822)*x(67)
      x(69) = x(69) - jvs(829)*x(5) - jvs(830)*x(7) - jvs(831)*x(8) - &
        jvs(832)*x(9) - jvs(833)*x(11) - jvs(834)*x(12) - jvs(835)*x(15) - &
        jvs(836)*x(16) - jvs(837)*x(17) - jvs(838)*x(19) - jvs(839)*x(20) - &
        jvs(840)*x(21) - jvs(841)*x(22) - jvs(842)*x(23) - jvs(843)*x(24) - &
        jvs(844)*x(25) - jvs(845)*x(26) - jvs(846)*x(28) - jvs(847)*x(29) - &
        jvs(848)*x(30) - jvs(849)*x(32) - jvs(850)*x(33) - jvs(851)*x(34) - &
        jvs(852)*x(35) - jvs(853)*x(36) - jvs(854)*x(37) - jvs(855)*x(38) - &
        jvs(856)*x(39) - jvs(857)*x(40) - jvs(858)*x(41) - jvs(859)*x(43) - &
        jvs(860)*x(44) - jvs(861)*x(45) - jvs(862)*x(46) - jvs(863)*x(47) - &
        jvs(864)*x(48) - jvs(865)*x(49) - jvs(866)*x(50) - jvs(867)*x(51) - &
        jvs(868)*x(52) - jvs(869)*x(53) - jvs(870)*x(54) - jvs(871)*x(55) - &
        jvs(872)*x(56) - jvs(873)*x(57) - jvs(874)*x(58) - jvs(875)*x(59) - &
        jvs(876)*x(60) - jvs(877)*x(61) - jvs(878)*x(62) - jvs(879)*x(63) - &
        jvs(880)*x(64) - jvs(881)*x(65) - jvs(882)*x(66) - jvs(883)*x(67) - &
        jvs(884)*x(68)
      x(70) = x(70) - jvs(890)*x(10) - jvs(891)*x(16) - jvs(892)*x(24) - &
        jvs(893)*x(27) - jvs(894)*x(29) - jvs(895)*x(30) - jvs(896)*x(31) - &
        jvs(897)*x(32) - jvs(898)*x(33) - jvs(899)*x(34) - jvs(900)*x(35) - &
        jvs(901)*x(36) - jvs(902)*x(37) - jvs(903)*x(38) - jvs(904)*x(39) - &
        jvs(905)*x(40) - jvs(906)*x(41) - jvs(907)*x(43) - jvs(908)*x(44) - &
        jvs(909)*x(45) - jvs(910)*x(46) - jvs(911)*x(47) - jvs(912)*x(48) - &
        jvs(913)*x(49) - jvs(914)*x(50) - jvs(915)*x(51) - jvs(916)*x(52) - &
        jvs(917)*x(53) - jvs(918)*x(54) - jvs(919)*x(55) - jvs(920)*x(56) - &
        jvs(921)*x(57) - jvs(922)*x(58) - jvs(923)*x(59) - jvs(924)*x(60) - &
        jvs(925)*x(61) - jvs(926)*x(62) - jvs(927)*x(63) - jvs(928)*x(64) - &
        jvs(929)*x(65) - jvs(930)*x(66) - jvs(931)*x(67) - jvs(932)*x(68) - &
        jvs(933)*x(69)
      x(71) = x(71) - jvs(938)*x(36) - jvs(939)*x(38) - jvs(940)*x(39) - &
        jvs(941)*x(41) - jvs(942)*x(43) - jvs(943)*x(44) - jvs(944)*x(45) - &
        jvs(945)*x(46) - jvs(946)*x(47) - jvs(947)*x(49) - jvs(948)*x(50) - &
        jvs(949)*x(51) - jvs(950)*x(52) - jvs(951)*x(55) - jvs(952)*x(56) - &
        jvs(953)*x(57) - jvs(954)*x(58) - jvs(955)*x(61) - jvs(956)*x(62) - &
        jvs(957)*x(63) - jvs(958)*x(64) - jvs(959)*x(65) - jvs(960)*x(66) - &
        jvs(961)*x(67) - jvs(962)*x(68) - jvs(963)*x(69) - jvs(964)*x(70)
      x(72) = x(72) - jvs(968)*x(18) - jvs(969)*x(21) - jvs(970)*x(22) - &
        jvs(971)*x(25) - jvs(972)*x(32) - jvs(973)*x(36) - jvs(974)*x(38) - &
        jvs(975)*x(39) - jvs(976)*x(41) - jvs(977)*x(43) - jvs(978)*x(44) - &
        jvs(979)*x(45) - jvs(980)*x(46) - jvs(981)*x(47) - jvs(982)*x(49) - &
        jvs(983)*x(50) - jvs(984)*x(52) - jvs(985)*x(55) - jvs(986)*x(56) - &
        jvs(987)*x(57) - jvs(988)*x(58) - jvs(989)*x(59) - jvs(990)*x(60) - &
        jvs(991)*x(61) - jvs(992)*x(62) - jvs(993)*x(63) - jvs(994)*x(64) - &
        jvs(995)*x(65) - jvs(996)*x(66) - jvs(997)*x(67) - jvs(998)*x(68) - &
        jvs(999)*x(69) - jvs(1000)*x(70) - jvs(1001)*x(71)
      x(73) = x(73) - jvs(1004)*x(10) - jvs(1005)*x(16) - jvs(1006)*x(18) - &
        jvs(1007)*x(20) - jvs(1008)*x(21) - jvs(1009)*x(22) - &
        jvs(1010)*x(25) - jvs(1011)*x(27) - jvs(1012)*x(31) - &
        jvs(1013)*x(32) - jvs(1014)*x(34) - jvs(1015)*x(35) - &
        jvs(1016)*x(36) - jvs(1017)*x(38) - jvs(1018)*x(39) - &
        jvs(1019)*x(40) - jvs(1020)*x(41) - jvs(1021)*x(43) - &
        jvs(1022)*x(44) - jvs(1023)*x(45) - jvs(1024)*x(46) - &
        jvs(1025)*x(47) - jvs(1026)*x(48) - jvs(1027)*x(49) - &
        jvs(1028)*x(50) - jvs(1029)*x(51) - jvs(1030)*x(52) - &
        jvs(1031)*x(53) - jvs(1032)*x(54) - jvs(1033)*x(55) - &
        jvs(1034)*x(56) - jvs(1035)*x(57) - jvs(1036)*x(58) - &
        jvs(1037)*x(59) - jvs(1038)*x(60) - jvs(1039)*x(61) - &
        jvs(1040)*x(62) - jvs(1041)*x(63) - jvs(1042)*x(64) - &
        jvs(1043)*x(65) - jvs(1044)*x(66) - jvs(1045)*x(67) - &
        jvs(1046)*x(68) - jvs(1047)*x(69) - jvs(1048)*x(70) - &
        jvs(1049)*x(71) - jvs(1050)*x(72)
      x(73) = x(73)/jvs(1051)
      x(72) = (x(72)-jvs(1003)*x(73))/(jvs(1002))
      x(71) = (x(71)-jvs(966)*x(72)-jvs(967)*x(73))/(jvs(965))
      x(70) = (x(70)-jvs(935)*x(71)-jvs(936)*x(72)-jvs(937)*x(73))/(jvs(934))
      x(69) = (x(69)-jvs(886)*x(70)-jvs(887)*x(71)-jvs(888)*x(72)-jvs(889)*x( &
        73))/(jvs(885))
      x(68) = (x(68)-jvs(824)*x(69)-jvs(825)*x(70)-jvs(826)*x(71)-jvs(827)*x( &
        72)-jvs(828)*x(73))/(jvs(823))
      x(67) = (x(67)-jvs(798)*x(68)-jvs(799)*x(69)-jvs(800)*x(70)-jvs(801)*x( &
        71)-jvs(802)*x(72)-jvs(803)*x(73))/(jvs(797))
      x(66) = (x(66)-jvs(734)*x(67)-jvs(735)*x(68)-jvs(736)*x(69) & 
        -jvs(737)*x(70)-jvs(738)*x(71)-jvs(739)*x(72)-jvs(740)*x(73))/ &
        (jvs(733))
      x(65) = (x(65)-jvs(691)*x(66)-jvs(692)*x(67)-jvs(693)*x(68)-jvs(694)*x( &
        69)-jvs(695)*x(70)-jvs(696)*x(71)-jvs(697)*x(72)-jvs(698)*x(73))/ &
        (jvs(690))
      x(64) = (x(64)-jvs(652)*x(65)-jvs(653)*x(66)-jvs(654)*x(67)-jvs(655)*x( &
        68)-jvs(656)*x(69)-jvs(657)*x(70)-jvs(658)*x(71)-jvs(659)*x(72)- &
        jvs(660)*x(73))/(jvs(651))
      x(63) = (x(63)-jvs(628)*x(65)-jvs(629)*x(66)-jvs(630)*x(67)-jvs(631)*x( &
        69)-jvs(632)*x(70)-jvs(633)*x(72)-jvs(634)*x(73))/(jvs(627))
      x(62) = (x(62)-jvs(603)*x(63)-jvs(604)*x(65)-jvs(605)*x(66)-jvs(606)*x( &
        67)-jvs(607)*x(69)-jvs(608)*x(70)-jvs(609)*x(72)-jvs(610)*x(73))/ &
        (jvs(602))
      x(61) = (x(61)-jvs(586)*x(62)-jvs(587)*x(63)-jvs(588)*x(64)-jvs(589)*x( &
        65)-jvs(590)*x(66)-jvs(591)*x(67)-jvs(592)*x(68)-jvs(593)*x(69)- &
        jvs(594)*x(70)-jvs(595)*x(71)-jvs(596)*x(72)-jvs(597)*x(73))/ &
        (jvs(585))
      x(60) = (x(60)-jvs(564)*x(62)-jvs(565)*x(63)-jvs(566)*x(65)-jvs(567)*x( &
        66)-jvs(568)*x(67)-jvs(569)*x(69)-jvs(570)*x(70)-jvs(571)*x(72))/ &
        (jvs(563))
      x(59) = (x(59)-jvs(546)*x(60)-jvs(547)*x(62)-jvs(548)*x(63)-jvs(549)*x( &
        65)-jvs(550)*x(66)-jvs(551)*x(67)-jvs(552)*x(69)-jvs(553)*x(70)- &
        jvs(554)*x(72))/(jvs(545))
      x(58) = (x(58)-jvs(529)*x(62)-jvs(530)*x(63)-jvs(531)*x(65)-jvs(532)*x( &
        66)-jvs(533)*x(67)-jvs(534)*x(69)-jvs(535)*x(70)-jvs(536)*x(72))/ &
        (jvs(528))
      x(57) = (x(57)-jvs(518)*x(62)-jvs(519)*x(63)-jvs(520)*x(65)-jvs(521)*x( &
        66)-jvs(522)*x(67)-jvs(523)*x(69)-jvs(524) & 
        *x(70)-jvs(525)*x(72))/(jvs(517))
      x(56) = (x(56)-jvs(501)*x(62)-jvs(502)*x(63)-jvs(503)*x(64)-jvs(504)*x( &
        65)-jvs(505)*x(66)-jvs(506)*x(67)-jvs(507)*x(68)-jvs(508)*x(69)- &
        jvs(509)*x(70)-jvs(510)*x(71)-jvs(511)*x(72)-jvs(512)*x(73))/ &
        (jvs(500))
      x(55) = (x(55)-jvs(477)*x(62)-jvs(478)*x(63)-jvs(479)*x(65)-jvs(480)*x( &
        66)-jvs(481)*x(67)-jvs(482)*x(69)-jvs(483)*x(70)-jvs(484)*x(72)- &
        jvs(485)*x(73))/(jvs(476))
      x(54) = (x(54)-jvs(464)*x(62)-jvs(465)*x(63)-jvs(466)*x(65)-jvs(467)*x( &
        66)-jvs(468)*x(67)-jvs(469)*x(69)-jvs(470)*x(70)-jvs(471)*x(72)- &
        jvs(472)*x(73))/(jvs(463))
      x(53) = (x(53)-jvs(443)*x(54)-jvs(444)*x(57)-jvs(445)*x(58)-jvs(446)*x( &
        59)-jvs(447)*x(60)-jvs(448)*x(61)-jvs(449)*x(62)-jvs(450)*x(63)- &
        jvs(451)*x(64)-jvs(452)*x(65)-jvs(453)*x(66)-jvs(454)*x(67)- &
        jvs(455)*x(68)-jvs(456)*x(69)-jvs(457)*x(70)-jvs(458)*x(71)- &
        jvs(459)*x(72))/(jvs(442))
      x(52) = (x(52)-jvs(422)*x(65)-jvs(423)*x(66)-jvs(424)*x(67)-jvs(425)*x( &
        68)-jvs(426)*x(69)-jvs(427)*x(70)-jvs(428)*x(71)-jvs(429)*x(72))/ &
        (jvs(421))
      x(51) = (x(51)-jvs(412)*x(62)-jvs(413)*x(63)-jvs(414)*x(65)-jvs(415)*x( &
        66)-jvs(416)*x(67)-jvs(417)*x(69)-jvs(418)*x(70)-jvs(419)*x(72))/ &
        (jvs(411))
      x(50) = (x(50)-jvs(398)*x(62)-jvs(399)*x(63)-jvs(400)*x(65)-jvs(401)*x( &
        66)-jvs(402)*x(67)-jvs(403)*x(69)-jvs(404)*x(70)-jvs(405)*x(72))/ &
        (jvs(397))
      x(49) = (x(49)-jvs(388)*x(63)-jvs(389)*x(65)-jvs(390)*x(66)-jvs(391)*x( &
        67)-jvs(392)*x(69)-jvs(393)*x(70)-jvs(394)*x(72))/(jvs(387))
      x(48) = (x(48)-jvs(364)*x(49)-jvs(365)*x(50)-jvs(366)*x(51)-jvs(367)*x( &
        52)-jvs(368)*x(54)-jvs(369)*x(55)-jvs(370)*x(56)-jvs(371)*x(57)- &
        jvs(372)*x(58)-jvs(373)*x(59)-jvs(374)*x(60)-jvs(375)*x(61)- &
        jvs(376)*x(62)-jvs(377)*x(63)-jvs(378)*x(64)-jvs(379)*x(65)- &
        jvs(380)*x(66)-jvs(381)*x(67)-jvs(382)*x(69)-jvs(383)*x(70)- &
        jvs(384)*x(72)-jvs(385)*x(73))/(jvs(363))
      x(47) = (x(47)-jvs(335)*x(63)-jvs(336)*x(65)-jvs(337)*x(66)-jvs(338)*x( &
        67)-jvs(339)*x(69)-jvs(340)*x(70)-jvs(341)*x(72)-jvs(342)*x(73))/ &
        (jvs(334))
      x(46) = (x(46)-jvs(325)*x(63)-jvs(326)*x(65)-jvs(327)*x(66)-jvs(328)*x( &
        67)-jvs(329)*x(69)-jvs(330)*x(70)-jvs(331)*x(72)-jvs(332)*x(73))/ &
        (jvs(324))
      x(45) = (x(45)-jvs(317)*x(65)-jvs(318)*x(66)-jvs(319)*x(67)-jvs(320)*x( &
        69)-jvs(321)*x(70)-jvs(322)*x(72))/(jvs(316))
      x(44) = (x(44)-jvs(309)*x(65)-jvs(310)*x(66)-jvs(311)*x(67)-jvs(312)*x( &
        69)-jvs(313)*x(70)-jvs(314)*x(72))/(jvs(308))
      x(43) = (x(43)-jvs(300)*x(63)-jvs(301)*x(65)-jvs(302)*x(66)-jvs(303)*x( &
        67)-jvs(304)*x(69)-jvs(305)*x(70)-jvs(306)*x(72))/(jvs(299))
      x(42) = (x(42)-jvs(279)*x(44)-jvs(280)*x(45)-jvs(281)*x(49)-jvs(282)*x( &
        52)-jvs(283)*x(54)-jvs(284)*x(57)-jvs(285) & 
        *x(58)-jvs(286)*x(59)-jvs(287)*x(60)-jvs(288)*x(63)-jvs(289)*x(64)- &
        jvs(290)*x(65)-jvs(291)*x(66)-jvs(292) & 
        *x(67)-jvs(293)*x(68)-jvs(294)*x(69)-jvs(295)*x(70)-jvs(296)*x(71)- &
        jvs(297)*x(72))/(jvs(278))
      x(41) = (x(41)-jvs(265)*x(63)-jvs(266)*x(65)-jvs(267)*x(66)-jvs(268)*x( &
        67)-jvs(269)*x(69)-jvs(270)*x(70)-jvs(271)*x(72)-jvs(272)*x(73))/ &
        (jvs(264))
      x(40) = (x(40)-jvs(247)*x(41)-jvs(248)*x(46)-jvs(249)*x(47)-jvs(250)*x( &
        51)-jvs(251)*x(52)-jvs(252)*x(54)-jvs(253)*x(55)-jvs(254)*x(63)- &
        jvs(255)*x(64)-jvs(256)*x(65)-jvs(257)*x(66)-jvs(258)*x(67)- &
        jvs(259)*x(70)-jvs(260)*x(72)-jvs(261)*x(73))/(jvs(246))
      x(39) = (x(39)-jvs(237)*x(58)-jvs(238)*x(65)-jvs(239)*x(66)-jvs(240)*x( &
        67)-jvs(241)*x(69)-jvs(242)*x(70)-jvs(243)*x(72))/(jvs(236))
      x(38) = (x(38)-jvs(229)*x(57)-jvs(230)*x(65)-jvs(231)*x(66)-jvs(232)*x( &
        67)-jvs(233)*x(69)-jvs(234)*x(70)-jvs(235)*x(72))/(jvs(228))
      x(37) = (x(37)-jvs(224)*x(62)-jvs(225)*x(63)-jvs(226)*x(67)-jvs(227)*x( &
        70))/(jvs(223))
      x(36) = (x(36)-jvs(216)*x(63)-jvs(217)*x(65)-jvs(218)*x(66)-jvs(219)*x( &
        67)-jvs(220)*x(69)-jvs(221)*x(70)-jvs(222)*x(72))/(jvs(215))
      x(35) = (x(35)-jvs(209)*x(55)-jvs(210)*x(63)-jvs(211)*x(67)-jvs(212)*x( &
        70)-jvs(213)*x(73))/(jvs(208))
      x(34) = (x(34)-jvs(197)*x(41)-jvs(198)*x(46)-jvs(199)*x(47)-jvs(200)*x( &
        52)-jvs(201)*x(54)-jvs(202)*x(63)-jvs(203)*x(65)-jvs(204)*x(66)- &
        jvs(205)*x(67)-jvs(206)*x(70)-jvs(207)*x(72))/(jvs(196))
      x(33) = (x(33)-jvs(192)*x(63)-jvs(193)*x(67)-jvs(194)*x(70))/(jvs(191))
      x(32) = (x(32)-jvs(186)*x(63)-jvs(187)*x(67)-jvs(188)*x(69)-jvs(189)*x( &
        70)-jvs(190)*x(73))/(jvs(185))
      x(31) = (x(31)-jvs(175)*x(35)-jvs(176)*x(63)-jvs(177)*x(66)-jvs(178)*x( &
        67)-jvs(179)*x(70)-jvs(180)*x(73))/(jvs(174))
      x(30) = (x(30)-jvs(171)*x(63)-jvs(172)*x(67)-jvs(173)*x(70))/(jvs(170))
      x(29) = (x(29)-jvs(167)*x(63)-jvs(168)*x(67)-jvs(169)*x(70))/(jvs(166))
      x(28) = (x(28)-jvs(149)*x(29)-jvs(150)*x(30)-jvs(151)*x(33)-jvs(152)*x( &
        34)-jvs(153)*x(35)-jvs(154)*x(37)-jvs(155)*x(40)-jvs(156)*x(48)- &
        jvs(157)*x(51)-jvs(158)*x(53)-jvs(159)*x(54)-jvs(160)*x(57)- &
        jvs(161)*x(58)-jvs(162)*x(62)-jvs(163)*x(63)-jvs(164)*x(67)- &
        jvs(165)*x(70))/(jvs(148))
      x(27) = (x(27)-jvs(135)*x(32)-jvs(136)*x(34)-jvs(137)*x(40)-jvs(138)*x( &
        48)-jvs(139)*x(51)-jvs(140)*x(53)-jvs(141) & 
        *x(54)-jvs(142)*x(67)-jvs(143)*x(69)-jvs(144)*x(70)-jvs(145)*x(73))/ &
        (jvs(134))
      x(26) = (x(26)-jvs(129)*x(54)-jvs(130)*x(63)-jvs(131)*x(66)-jvs(132)*x( &
        67)-jvs(133)*x(69))/(jvs(128))
      x(25) = (x(25)-jvs(124)*x(32)-jvs(125)*x(63)-jvs(126)*x(67)-jvs(127)*x( &
        73))/(jvs(123))
      x(24) = (x(24)-jvs(120)*x(63)-jvs(121)*x(67)-jvs(122)*x(70))/(jvs(119))
      x(23) = (x(23)-jvs(114)*x(35)-jvs(115)*x(51)-jvs(116)*x(64)-jvs(117)*x( &
        65)-jvs(118)*x(67))/(jvs(113))
      x(22) = (x(22)-jvs(109)*x(63)-jvs(110)*x(67)-jvs(111)*x(73))/(jvs(108))
      x(21) = (x(21)-jvs(104)*x(63)-jvs(105)*x(67)-jvs(106)*x(73))/(jvs(103))
      x(20) = (x(20)-jvs(97)*x(32)-jvs(98)*x(67)-jvs(99)*x(69)-jvs(100)*x(70)- &
        jvs(101)*x(73))/(jvs(96))
      x(19) = (x(19)-jvs(87)*x(29)-jvs(88)*x(30)-jvs(89)*x(33)-jvs(90)*x(37)- &
        jvs(91)*x(57)-jvs(92)*x(58)-jvs(93)*x(63)-jvs(94)*x(67)-jvs(95)*x(69)) &
        /(jvs(86))
      x(18) = (x(18)-jvs(80)*x(21)-jvs(81)*x(22)-jvs(82)*x(25)-jvs(83)*x(67)- &
        jvs(84)*x(72)-jvs(85)*x(73))/(jvs(79))
      x(17) = (x(17)-jvs(76)*x(65)-jvs(77)*x(67)-jvs(78)*x(69))/(jvs(75))
      x(16) = (x(16)-jvs(72)*x(67)-jvs(73)*x(69)-jvs(74)*x(73))/(jvs(71))
      x(15) = (x(15)-jvs(69)*x(54)-jvs(70)*x(67))/(jvs(68))
      x(14) = (x(14)-jvs(64)*x(57)-jvs(65)*x(58)-jvs(66)*x(63)-jvs(67)*x(67))/ &
        (jvs(63))
      x(13) = (x(13)-jvs(59)*x(57)-jvs(60)*x(58)-jvs(61)*x(63)-jvs(62)*x(67))/ &
        (jvs(58))
      x(12) = (x(12)-jvs(57)*x(67))/(jvs(56))
      x(11) = (x(11)-jvs(55)*x(67))/(jvs(54))
      x(10) = (x(10)-jvs(52)*x(70)-jvs(53)*x(73))/(jvs(51))
      x(9) = (x(9)-jvs(50)*x(67))/(jvs(49))
      x(8) = (x(8)-jvs(48)*x(67))/(jvs(47))
      x(7) = (x(7)-jvs(46)*x(67))/(jvs(45))
      x(6) = (x(6)-jvs(44)*x(63))/(jvs(43))
      x(5) = (x(5)-jvs(42)*x(67))/(jvs(41))
      x(4) = (x(4)-jvs(20)*x(30)-jvs(21)*x(36)-jvs(22)*x(38)-jvs(23)*x(39)-jvs &
        (24)*x(44)-jvs(25)*x(45)-jvs(26)*x(50)-jvs(27)*x(51)-jvs(28)*x(52)- &
        jvs(29)*x(54)-jvs(30)*x(55)-jvs(31)*x(57)-jvs(32)*x(58)-jvs(33)*x(59)- &
        jvs(34)*x(60)-jvs(35)*x(61)-jvs(36)*x(63)-jvs(37)*x(64)-jvs(38)*x(65)- &
        jvs(39)*x(66)-jvs(40)*x(69))/(jvs(19))
      x(3) = (x(3)-jvs(8)*x(12)-jvs(9)*x(24)-jvs(10)*x(30)-jvs(11)*x(33)-jvs( &
        12)*x(35)-jvs(13)*x(37)-jvs(14)*x(51)-jvs(15)*x(54)-jvs(16)*x(57)- &
        jvs(17)*x(63)-jvs(18)*x(67))/(jvs(7))
      x(2) = (x(2)-jvs(5)*x(28)-jvs(6)*x(67))/(jvs(4))
      x(1) = (x(1)-jvs(2)*x(5)-jvs(3)*x(67))/(jvs(1))
      RETURN
    END SUBROUTINE kppsolve
      END MODULE module_racm